<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.6 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-04" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. There is currently 
ongoing work for a RFC8366bis. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request:agent-signed-data element
(defined in <xref target="async-voucher-request-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-trigger:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="async-voucher-request-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include this Content-Type header field indicating the
included media type for the voucher response. Note that this is also an 
indication regarding the acceptable fromat of the voucher response. 
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide 
additional data, like CSR attributes or information about the enroll 
type: initial or re-enroll. In the following the enrollment is described 
as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it constructs the
enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 
can be transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certificate request objects from CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object. If the pledge uses PKCS#10, it MUST sign it additionally 
with its IDevID credential to achieve proof-of-identity bound to the 
PKCS#10 as described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for 
the pledge in the new domain, which can be used to request further 
LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
“know” its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certificate request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-sztp-csr:csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-sztp-csr:csr": {
    "p10": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)
*/</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field indicating the 
pledge acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The ietf-voucher-request:voucher can be optionally enhanced with the
following additional parameter:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jws+json” as defined
in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar and can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jws+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="async-voucher-request-yang" title="Async Voucher Request artifact">
<t>The following enhancement extends the voucher-request as defined in 
<xref target="RFC8995"/> to include additional fields necessary for handling 
bootstrapping in the pledge-responder-mode.</t>

<section anchor="async-voucher-request-yang-tree" title="Tree Diagram">
<t>The following tree diagram is mostly a duplicate of the contents of
<xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the 
registrar-proximity-certificate, and agent-signing certificate. 
The tree diagram is described in <xref target="RFC8340"/>. The enhanced fields are 
described in Section Each node in the diagram is fully described 
by the YANG module in Section <xref target="async-voucher-request-yang-module"/>.
Please review the YANG module for a detailed description of the 
voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request

 grouping async-voucher-request-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
                  
]]></artwork></figure>

</section>
<section anchor="async-voucher-request-yang-module" title="YANG Module">
<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to 
include a signed artifact from the registrar-agent (agent-signed-data) 
as well as the registrar-proximity-certificate and the 
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-async@2021-08-19.yang"

module ietf-voucher-request-async {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher-request-async";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision 2021-08-19 {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
        
      augment voucher {
        description "Base the async-voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in 
<xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent" title="Misuse of acquired voucher and enrollment responses by Registrar-agent">
<t>A Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2 can be detected by the pledge-voucher-request 
processing on the domain registrar side. This requires the domain 
registrar to verify the proximity-registrar-cert leaf in the 
pledge-voucher-request against his own LDevID. In addition, the domain 
registrar has to verify the association of the pledge to his domain based
on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials" title="Misuse of registrar-agent credentials">
<t>Concerns have been raised, that there may be opportunities to misuse 
the registrar-agent with a valid LDevID. This may be addressed by 
utilizing short-lived certificates (e.g., valid for a day) to 
authenticate the registrar-agent against the domain registrar. 
The LDevID certificate for the registrar-agent may be provided by a 
prior BRSKI execution based on an existing IDevID. Alternatively, 
the LDevID may be acquired by a service technician after authentication 
against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations" title="YANG Module Security Considerations">
<t>The enhanced voucher-request described in section 
<xref target="async-voucher-request-yang"/> bases on <xref target="RFC8995"/>, but uses a different 
encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.  Therefore, similar 
considerations as described in Section 11.7 (Security Considerations) 
of <xref target="RFC8995"/> apply. 
The YANG module specified in this document defines the schema for data 
that is subsequently encapsulated by a JOSE signed-data content type, 
as described <xref target="I-D.ietf-anima-jws-voucher"/>. As such, all of the 
YANG-modeled data is protected from modification. The use of YANG to 
define data structures, via the “yang-data” statement, is relatively 
new and distinct from the traditional use of YANG to define an 
API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> 
and RESTCONF <xref target="RFC8040"/>. For this reason, these guidelines do not 
follow the template described by Section 3.7 of <xref target="RFC8407"/>].</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>We would like to thank the various reviewers, in particular 
Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='25' month='July' year='2021'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='15' month='August' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-07'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-07.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document aims at simple, interoperable, and automated PKI
   management operations covering typical use cases of industrial and
   IoT scenarios.  This is achieved by profiling the Certificate
   Management Protocol (CMP), the related Certificate Request Message
   Format (CRMF), and HTTP-based or CoAP-based transport in a succinct
   but sufficiently detailed and self-contained way.  To make secure
   certificate management for simple scenarios and constrained devices
   as lightweight as possible, only the most crucial types of operations
   and options are specified as mandatory.  More special and complex use
   cases are supported as well, by features specified as recommended or
   optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-12'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-12.txt' type='TXT'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>Addressed feedback for voucher-request enhancements from YANG doctor 
early review in <xref target="async-voucher-request-yang"/> as well as in the 
security considerations.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAARpHmEAA+y963Yjx5Um+j+fIof1Q6QEgJe6SKLVblMsSmK7bk1Slrs1
Gq0kkCTTBSIxyAQpulS95kHmrHWe5TzKPMnZ14gdkZEgWCq7feYMl60igcy4
x75+e+/hcJg1bTGb/FxM61m5n7eLZZlV8wX91rR7Oztf7uxlk3o8K67h68mi
uGiHVdleDItZdV0MzxfN22pYNHez8bCcLerpdLjzJBsX7X7etJNsXu1ned7W
4/38k7uy+QT+GNfX82Lc+g+au+tFedGYD+pFG34CA5rVbXVRlRP4cFbTU+2i
8s20VTuF8Z0u53N4O68vchrT1aKe1csmP6KhXZezNq9m+dcnp388zjfpn+HB
0VZWnJ8vypv9XD/JikVZ7Oev5+WiaKt61uSwRPnLYlZclthIdnu5nx+8On55
kP/wbTYpWuh6b2dvNyuW7VW92M+G0A2M/3SUf7OoygaGy+t32pYXF+XMfVov
oKHTChtt8oNv4RMdinzIEy1LmOjrtq2H3xVXs+FJNbvMn+FaVu3dfv5yOavG
V/DnoryEwcI0iptiURW02BPo9ZMvdj9//CUv/nLWLuCdb8vFdTG7g4/K66Ka
4m7RyEYXOLI/NNz7CDYLHlkuqv38qm3nzf729u3t7ch8va1z/W6Uf72ox2+v
iqWf73flbLKo3gbf/OPM+YpHNzrX0X3IvI9G+YuyWLgpH02rutWPaK6HVTOu
89M7WOJrO7kTmEFbwV9F05T5525uPxTTadWU02k5c9M5/G74xWO4WWY6p7dV
+9dyMYWjCR/Pr+j+bnz2ZDd/8iT/4vMv8i/h9m742U5hSH8Y41hoejL8s1H+
Q7mYlX4CZ1f1ddH4T/9x9qulkQ1vaWQP2qtZDU211U2J5Ojkm8Nne0929/Nc
/vj82d6++/Wx/Pr5zuMd/fXp7lP59YudJ/rpF4+fPdNfn+x8rr9++SU9ezx8
PjJ08i+3zfCmXo6vykXw7axsx/XsYtj8tZ0Pxw18Wc0uosHuffmFdvRkb3fH
/7orvz7d+3zP/fqFPvD02dO9oK9pcT1vhtPq8qq9LfG/w/H1fDhf1BfVtEw8
id8u50jdGjdlP/svvnyi78BZhUNYLobFuByO62I+LJt2WMNJW3C7R4fDZ3uP
n+4Ov8Q/gSEwtf4Evsjpi3yYv6lhX4EZ0C3Jrx2tJdILN6QeVzCSSe7Wp57l
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

-->

</rfc>

