<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.6 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-04" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. There is currently 
ongoing work for a RFC8366bis. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request:agent-signed-data element
(defined in <xref target="async-voucher-request-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-trigger:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="async-voucher-request-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include this Content-Type header field indicating the
included media type for the voucher response. Note that this is also an 
indication regarding the acceptable fromat of the voucher response. 
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide 
additional data, like CSR attributes or information about the enroll 
type: initial or re-enroll. In the following the enrollment is described 
as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it constructs the
enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 
can be transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certificate request objects from CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object. If the pledge uses PKCS#10, it MUST sign it additionally 
with its IDevID credential to achieve proof-of-identity bound to the 
PKCS#10 as described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for 
the pledge in the new domain, which can be used to request further 
LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
“know” its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certificate request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-sztp-csr:csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-sztp-csr:csr": {
    "p10": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)
*/</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field indicating the 
pledge acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The ietf-voucher-request:voucher can be optionally enhanced with the
following additional parameter:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jws+json” as defined
in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar and can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jws+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="async-voucher-request-yang" title="Async Voucher Request artifact">
<t>The following enhancement extends the voucher-request as defined in 
<xref target="RFC8995"/> to include additional fields necessary for handling 
bootstrapping in the pledge-responder-mode.</t>

<section anchor="async-voucher-request-yang-tree" title="Tree Diagram">
<t>The following tree diagram is mostly a duplicate of the contents of
<xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the 
registrar-proximity-certificate, and agent-signing certificate. 
The tree diagram is described in <xref target="RFC8340"/>. The enhanced fields are 
described in Section Each node in the diagram is fully described 
by the YANG module in Section <xref target="async-voucher-request-yang-module"/>.
Please review the YANG module for a detailed description of the 
voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request

 grouping async-voucher-request-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
         +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
                  
]]></artwork></figure>

</section>
<section anchor="async-voucher-request-yang-module" title="YANG Module">
<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to 
include a signed artifact from the registrar-agent (agent-signed-data) 
as well as the registrar-proximity-certificate and the 
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-async-voucher-request@2021-08-18.yang"

module ietf-async-voucher-request {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-async-voucher-request";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>"
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision 2021-08-18 {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      augment "voucher-request" {
        description "Base the async-voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in 
<xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent" title="Misuse of acquired voucher and enrollment responses by Registrar-agent">
<t>A Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2 can be detected by the pledge-voucher-request 
processing on the domain registrar side. This requires the domain 
registrar to verify the proximity-registrar-cert leaf in the 
pledge-voucher-request against his own LDevID. In addition, the domain 
registrar has to verify the association of the pledge to his domain based
on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials" title="Misuse of registrar-agent credentials">
<t>Concerns have been raised, that there may be opportunities to misuse 
the registrar-agent with a valid LDevID. This may be addressed by 
utilizing short-lived certificates (e.g., valid for a day) to 
authenticate the registrar-agent against the domain registrar. 
The LDevID certificate for the registrar-agent may be provided by a 
prior BRSKI execution based on an existing IDevID. Alternatively, 
the LDevID may be acquired by a service technician after authentication 
against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations" title="YANG Module Security Considerations">
<t>The enhanced voucher-request described in section 
<xref target="async-voucher-request-yang"/> bases on <xref target="RFC8995"/>, but uses a different 
encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.  Therefore, similar 
considerations as described in Section 11.7 (Security Considerations) 
of <xref target="RFC8995"/> apply. 
The YANG module specified in this document defines the schema for data 
that is subsequently encapsulated by a JOSE signed-data content type, 
as described <xref target="I-D.ietf-anima-jws-voucher"/>. As such, all of the 
YANG-modeled data is protected from modification. The use of YANG to 
define data structures, via the “yang-data” statement, is relatively 
new and distinct from the traditional use of YANG to define an 
API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> 
and RESTCONF <xref target="RFC8040"/>. For this reason, these guidelines do not 
follow the template described by Section 3.7 of <xref target="RFC8407"/>].</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>We would like to thank the various reviewers, in particular 
Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='25' month='July' year='2021'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='15' month='August' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-07'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-07.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document aims at simple, interoperable, and automated PKI
   management operations covering typical use cases of industrial and
   IoT scenarios.  This is achieved by profiling the Certificate
   Management Protocol (CMP), the related Certificate Request Message
   Format (CRMF), and HTTP-based or CoAP-based transport in a succinct
   but sufficiently detailed and self-contained way.  To make secure
   certificate management for simple scenarios and constrained devices
   as lightweight as possible, only the most crucial types of operations
   and options are specified as mandatory.  More special and complex use
   cases are supported as well, by features specified as recommended or
   optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-12'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-12.txt' type='TXT'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>Addressed feedback for voucher-request enhancements from YANG doctor 
early review in <xref target="async-voucher-request-yang"/> as well as in the 
security considerations.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAJXfHGEAA+y963bkRpIm+B9PgWH+EClFBC95kcRSVxfFpCR25a1JqlTd
Go0OGAGSqAwGYgIIUqxU9pkHmT1nn2UfZZ5k7epu7nAEg6ms6trZydNdyiQB
h1/M7fqZ2XA4zJq2mE1+Lqb1rNzP28WyzKr5gv7WtHs7O1/u7GWTejwrruHX
k0Vx0Q6rsr0YFrPquhieL5q31bBo7mbjYTlb1NPpcOdJNi7a/bxpJ9m82s/y
vK3H+/knd2XzCfxjXF/Pi3Hrf9DcXS/Ki8b8oF604U9gQrO6rS6qcgI/nNX0
VLuo/DBt1U5hfqfL+RzezuuLnOZ0tahn9bLJj2hq1+WszatZ/vXJ6R+P8036
z/DgaCsrzs8X5c1+rj/JikVZ7Oev5+WiaKt61uSwRfnLYlZcljhIdnu5nx+8
On55kP/wbTYpWvj03s7eblYs26t6sZ8N4TMw/9NR/s2iKhuYLu/faVteXJQz
99N6AQOdVjhokx98Cz/RqcgPeaFlCQt93bb18LviajY8qWaX+TPcy6q9289f
LmfV+Ar+uSgvYbKwjOKmWFQFbfYEvvrJF7ufP/6SN385axfwzrfl4rqY3cGP
yuuimuJp0cxGFzizPzT89REcFjyyXFT7+VXbzpv97e3b29uR+fW2rvW7Uf71
oh6/vSqWfr3flbPJonob/OYfZ81XPLvRuc7uQ9Z9NMpflMXCLfloWtWt/ojW
elg14zo/vYMtvraLO4EVtBX8q2iaMv/cre2HYjqtmnI6LWduOYffDb94DDfL
LOf0tmr/Wi6mQJrw4/kV3d+Nz57s5k+e5F98/kX+JdzeDb/aKUzpD2OcCy1P
pn82yn8oF7PSL+Dsqr4uGv/Tf5zzamlmw1ua2YPOalbDUG11UyI7Ovnm8Nne
k939PJd/fP5sb9/99bH89fOdxzv616e7T+WvX+w80Z9+8fjZM/3rk53P9a9f
fknPHg+fjwyf/MttM7ypl+OrchH8dla243p2MWz+2s6H4wZ+Wc0uosnuffmF
fujJ3u6O/+uu/PXp3ud77q9f6ANPnz3dC741La7nzXBaXV61tyX+73B8PR/O
F/VFNS0TT+Jvl3Pkbo1bsl/9F18+0XeAVoEIy8WwGJfDcV3Mh2XTDmugtAWP
e3Q4fLb3+Onu8Ev8JwgE5tafwC9y+kU+zN/UcK4gDOiW5NeO1xLrhRtSjyuY
ySR3+1PP8vKX8VUxuyxp0BwGeV60Bb0Ap36NJCfsuynHQCDtHX6nAPnwJdyo
u3P8nv7ibXlnPwrfkEHnZl55+d+X1Rwf+IR+q+yeP04X5XjWAnnSZ4spMINy
3C7qthxf4WSm+SHMq2oa+C29pKJj9/PhzlP6SVMiA8ZF7ssEYJNgq2T/cvzw
q6OTw+Hh8Zvhzs7T4dNgS3lVp365MgP4uv/pG/jGddmWi75FvAIZepUfXMNz
42KWn5TTqjivpvjuIdzOcTUNZ/94uLvXM3uY5n5O8yRCODoafrGzN9o9OAmm
jb/I5Rc8zzJ/Xt5U4zI/nsB2o+jvne3xrIFhlm2JYp/XS3uNdOCXj0rAZTUr
y0UTTv6L4c6z3q0/OkLWJBPDvT8+fT1Eet59ugtv7kX0fPp6G2lafpmf1MUk
vymvqvG0bGC6f+K/DoFJfruoJkQNjkqZdC7gDjlyJlrdg/Mo29t68Zavwnw+
1Tfg7oJuVU+BqwJhLoh0mzVJ8xTVvmIxqf7KY71eXAKrkn9s30PHMsO8l56f
DElYJTeVNwm2S7cJZ/z68M2bYDNB+Zrlh1fF4rIE3lDBnXyjq90b7Yx2883n
qIxu9a3Wvn8AArWYyca6OX6JVJsNh0MQaCiFx22WnV1VTQ7q7pK4wKRsxovq
HM6unF3hALTBSGbndd3iO/M5yrkCDuAadofZSZkhM4Elg2AHLXrcIjWztjnI
370TIfH+fb4FmnFeTJs6r0nTBM17Bh8HYQcs66Is4EUcfQa/X+T1bHoHe3Nd
wn+m1XWFvBBExwwOprrBm3kORFKCylDNburpDf32eg5KAcx4lH2zhBsNnCFY
B2i5SEI31QSehqnAJJC3gpwtRUeG9S3qAgQ3TKyc3VRwk+jVAarRt0DMV/Qw
KNd0+fDv82k5gS1nxgzLWNTXsD/jaYV6M64XSeIGpjLKabP1QXy3QqKDc0AS
vAa1YCqvZzzosJpVLUiBejHE39LuyfeGi7KBxaIQwl/B2HXeiDFwXrdX2RJU
rHHRlDB11fLh0GBWcJwz+rgKEzIegJ6Q7YxJ5IB8uwC5NmvhYMpJVp//BTa9
yTeb6nKGh1QOb5ES4En51RafKmwm3UyQhkQloKhNUN+rzpf0A/gQn3bezMsx
8LgxUBwxvXG5QJ6Hn4fDO4PZTcoL/Lg7kRy2rric1TD0GJUqvMkwJC4EBp9W
f4VnS2f1ZI5TgG5Z3+qTlpfAZMpfKjdTkHst7gA8f5fPytvMTMkKSh0YpklX
6bqaTKZllj1CDrKoJ0s6zUzIqXHrgEXbqyAbAKcB9FFPlzQlFMJ8o3JQdGtg
m6BA5ZtwOLBrcDBb0TXE/aT9g7NhsoCTgA8V2eYYjNka5NlW3sDNkW0XCqxm
4+lyIiQ4QQUZyPMOR5sJ3y2nfGPwGuBDLXKVVkYZ0K3M1dwUFjqgTYzpStWN
zGoxcIXLpingk0DQQCvFOaj/V2yA6612hK7DZroEJ9XtkMV5vWxTU1VCo2PF
YYLfW7obIIXp3CdCVLjLosYqrcOhZp1DBdX4/XsiXLh28gLzm1U3i28UnquM
PWAek10XyN48rwJeCM/D497E3yIeeXHBvyiC39xUhdkyMkGQaBa434Zl4c7W
iwqUBKRxYVxg9C9BJuMtX3zSZAckaOh2ncJccT/kR3ACmy8PTg+24CJ8A3Oh
o/duB0ObfBc88zk6PeNtQ5MD7kJbZ8I1aEqOZUSHma1kGjQqkutyMTPfKvLz
ajaRy4J74l9CutHvImed5Uvkp9M7fPrsxamTNvCcUiUuEj6UMXt3JI/fZi4/
yg/GYAYwb6pl6XTP4rOAPW4yYBD+XRoO2RzyUpQKyJka9woTut/8kwOkgWxa
o+7X99CLEzwgZKi6DzArXBx8B0QEi0FSdNquUMiDzXKHtIl8vshfgMJ6/DwH
RdYcxBbvSa20i9pHIVSWmbuA09yUXaxI4w1v9NYAB1GJRrxbKJHnMgFSaIRn
4reQoyiXTx4x8r4yOtYMNuF62S6JOYQXVU+WpzhscCnR9EXsNJm/Up+QIefu
D2xys4TBuvSabx7z7tmtG7E25iSeKLnojANSHhIjL26Kaqq2CZ0Rnz+6VFok
B9CGYI71IrDuxJoTfcdJQ7ujudvRc9AaQOjjVZp7NSd9b3SblKMEOwQ6iH6q
u1o6X9ofWEOsFdidAu7gv8CnaK7MZupugZ5Z4jKRMdDnnRhSuxrXcFu1VzE7
bK+W/IbeFnPxe1iHbkFEHaF2iBwZaE9OuL2b074adunFDR02cXXDf4Rxv/nj
MdIs/AIJcoF02uTW7+tHFK6Mc8a9ceqgo6TGuI7zk4PtwwOvQOOitvGSzzIm
LENL8P1Z3SohTnnfgPGgiHQC6/yO1kFafo1y5LwYvy1nfK9i6RYp+ThrmMgU
DHaS2Yt6eXmVqagzKnMj2ynjTZakIV9Vl1fW0WFNReIWPCuhzOhQPeeEB/lh
mJ1eEdiqWl3k9NvmGlgHGOqTcj6t7/gTKEpu6kqIYnpb3Pk9d28zHYcXsL7I
ip5rRleSxNks7x4IUidSBTwERD2dZng+2zl6MvBvuNV88WkM4SOtpT48gZEJ
GgwytnVgiM4IqF/CtaMz22JSbFpyIRXNFU46IFCUcEWaQt3E1fwc5cetZ3p0
bx2NwtaAQrtgaoOZ3IL+n18sZ2M22IUb9gl3UCKAJjJ34+U3KHIjkUQiWOTR
lhVIrDtn5QxpvrEiR2664wctMuUCB5+TGY/LxP3NDkAXv4ZLs0CdfMkfRNqt
x0CqSuhOB2/KS9wUUa75PGACztiBYYFHLVFXAv6vfkQUmuW8QOPaWda07El1
cQEHAqaRuxmzspyA4vQd/HiAZohMzlwY0GAr5BmVyADrvslQUZiByTouFos7
ZfS9O4tsT5ky8IcSNrYkxs6sJ7wKMPJkava2R6IfA+vC5dSxAzTXucFX4c7N
WM9RsumMmBk1kMxyEEv4dZhafngwuGdhnkYy2lEc5RxfECVfSIqUDDBTWD3q
XxXztCVuO91oMtiAwQD3pFuGarrlmOLxlZ26qBawDng7w5dHOcoA9AeoL6Ai
Bg48ZIl3ub0q2pWrC+w2nJahPhJvfA3UhWCZGRxN7wJLvMiL0hMl8VlchvHK
dO87sIHkkGrS3keEdjX7WfYpethABLFHi8xP60XKN8vR5Qjt2hy16DywhbPc
mZh8NWm2zQpVCcY9J3rA64hB4jWJKt903N9rUugFjJ0W7FCKbWK418sxntHF
corHhTLsAuNnNcgRcmTmm3rL6oV4lXBH5ovqBrnI2/KOnQo5iDJ8cVFfVecV
CVDny6qVP5yLXez5Jvrv0VXoaI2Ib+6Ygv44iHOI/wHZI8bpWAaNF3dz4OWL
Yn4lBr1eJ+bv+KnXs3EZugllbqqAIPWr6sI3Ww5eQvV89EJxq85Tv5o+z+AA
o8Olg0udxJZOFpQdFtOg8JGicSHuTC92cLHH6cscvB1oB4EDEAZg2yGpvMOz
zXLaeq1YrmUjr4bXnS1XUOabYB8mVpOnGc+MSdy9caLJhSY1zoQuKZ3QEOfc
yjWSj6lJnfJWjfCef09sy3OmVT4ZdfNcsE8Do7FeL/JW9H0mEYV+e2832taW
mvFuiXfOuaBxgMlyLFtqnGbkJ6Mx1IvlNhDFPzCigkKE5EyBE0fv3ij/flZ4
X851PXEzbyINhgJPAf3apYVL2SItE5XvEl0IaOuSD1/uA3zZb5B8ZY3NhzMD
42W8lJnZCEWoFXpFIRg1W3GkgQd1lB80IhLRrphJXECCBuLE5d8jVmDiXOnI
9VGIHRzlBCfisXsUXdD8xAkW+OLxejVOkPIdxMMTI/DPo6c7X6rryxrEeArN
8gL+xd4Tc1I4Cdpzp4/J+/6ObCMP+eXOO102xY8DSthh4McBxbGcTsndGZnn
MrWuF84NFjmF4EC/tkIMpgBcz3j3Sf9kRY78GBd5MwZVe1HVjVBYVkwmsGfw
UhSLkZ27gvmWFTHJWQ2KxQI9WqFSOAcjNRMOG7sMBjkLezEiKcaHoShRxgOJ
giededWFgoT1tL68Q1oYvx0hl2vQc+/XYCZKXuY5X5a2zsCUxa12USKxpIGZ
z1wYia1FeR8tPGKSi+ryknwAMMol6Lik8+tVVZJnXbSendcgzrze5tb9SeP4
JDtxq4Y0HtjtSmKhnrvwNaEgB56d81Di85eKIkg6OzfdX4f0JEo6L2C9b4ds
x+V0kp2jW6hj3xV0ohx/ZV9mPcXjqJzoKG/KmZESWVdKjLJjfGKGMKQ29NFG
kwxEnuyoh2Ck3Efi0mi2QflfVDCXRvyf7jS2WX9P3EzW1dsoKui+0vXl2wln
PGGiDXT1uMgWLw44G9miGLRCUrqsC7KNPK/TXSBykTAZOnfkuhhyUNui0WhS
k7urmZ/fobjlMZUFIRcZvp3Vt7P8+xMfYuWlhaRGNzRX0ZsK7Ln4G8l1isOw
+m455G3B6inKaqNzqbAYiD2L+gS9RdwyIPNNMKZBxsDlRSdH4O+iD/uoYq2z
BIFeTlgZb4xh485bPcSoBTGTDKJfRRxy6GNU8L46A4xSgFoAanhwSdjrWsTU
HG5YTGebEyBT5/wnzcEQ7pYLtucmMOfuvwtfdL/q3KNC7rm9iFnmLYMqcSmN
uGQlt7Gy/xrkZwVzyRLU4YLcESoBvVKDMCbMq8kCvz15UaYaE7muUfdBsgWb
CBVZIPyljaurhMJrU05EzWhRqFmFgOR2n682e5SfkXuEBAnfUkRVgPQBJrnx
8vvTs40B/zd/9Zr+fnL0r98fnxw9x7+ffnfw4oX7SyZPnH73+vsXz/3f/JuH
r1++PHr1nF+Gn+bBj7KNlwf/tsER3Y3Xb86OX786eLHR8deRCc8cg0hpDlyP
XNKZ4khI3nx9+Ob/+b93n+Tv3v0XBPft7n75/r3844vdz5/AP0CXkvgxgT74
n7Dzd7ilJSv2cGawz/Oqhes1IKK7Qo6CWhhuX4hjCYEOrd/YnnA8R8guakcX
JXJ98lAoDMExqendfpYdHuxn+0ZfCnzHAzGFHH9RXEOWndB7J8lg3YBd5sIK
2aEXGKWw1XzzC1TWQLMvL0npSiMVkI+K/GxYHUFJHVht46ty/Jbm9YIn9mJF
LDGc3skBomA5rORnSCwd9Ut0THF4f4bcGxTNijfg+Og5fgjRVtNpRRzCIPYE
AreJ6BuQJyiXEDHLVxS1yEz81zjGcwdWKswU0CsP7AiHIUhjqEP4qEVkKzoH
vjcbM7WjP8rHTDhEeXooJMRk6p1QbmMdKO+QWU4Z3kEaKZDKtF5OdEYDTy90
q4pcZdqdFTOBP4TQz168sI3pZllM4BoJZdyUZqMCNhfo3PHWseOS7Eu4Y4vl
XOx/o6U7AMjME88dm54U/zI3Ar/98E/DEx/r42vYstE0UALyL7xPf4Vji10h
gTEFAySCx3huL54f/SkKKbPSbGKn8La6MKzrqA4DchKKwMO/RI6bO+QXTl/s
+DEGzlUt9qHeXi8ie7u6C8KNBPF3Oq45KqpwKPjhI01wIR3QwfHyd49ADxjC
T94L53cQqsiSh1URysHgDIlHaaxR1IkMfXEz7zSTK9QotHrOYRAfRFULlLzI
LbkCKC7ah8Po4TvOi8wWXuy3RJ6hvryTg4iLkCap9imFkfCWn5fmW0aJHeUH
4u1zbnVWtMmxLqa8YkJU/w7vhjNFdE5Z7jaKlWJZLrMHidEyBYJ8IXGq+65h
YNSsdX87TsW+gB6NKXg3sJqqGeFzw3dJG5hRnJODTM6LqCeg++jPQM6ylwWD
DrIoi8kd+RqQQ6jyzs7jNF7QmTuk5TZXBVvvi1LRNxxlIJaYny9Ap7moyilS
LIw+nbKHDkXfsbeU2G+9guaNAecpP3NuE9k7WAeck/WW3G98nC9Z7TMuDPwg
L5ji/qGxLTY9Owmv65a4AZj3d24SHvdrZU3sVEH+Zl5CWqyXbYanoKbu/dMX
52TkAxTUng7NZPqWsAcEw2IxqO6ZesqMdEERTDqJzLig4JUa1+BNbtRChdO3
uhHed6MeE3HgCNkLgnAYe3OIHQWRSw9KVG+dBV/xWSAzbkrrEjJOl4zY7IEB
xh79UiD6ogEuCzs0LOWf77NISdZf0I5ZAtRjjkP4/nSNxab3g5kqb8NUcmCS
xlJmIZ0DJAr1SYnJryFxA/ZtJPypsAZ0MeXTEg4UqDZ3WF3SkonCEYEncfAA
hGCn5KEghbmAxCXVMhzh5j7KT2DqODlgveO3YATYfyJhL4BhLzB1YlwsCDxB
kJ0ix4yxkj1foAw39QJWQGK3xb+KcMLFIwhFwaOGa5c0G3X5mY9kbpHO5Ldu
ZNWCwnmdL6upi5Vi5DOrF+LE0ega3YymdMhPMhDv5qLULGfFLf4E0wn4+cxK
vBEnnNJVtj5lhfcgO5cLjNca9puc9OM7SjbRGIaZ8oDOEq+cMm5SchAe4QMV
ESSHf+2xGSqc8u4lTUIIGmWBPhlBjbYF/nA6ZbZpwtrCBXxobwAsY1x2liPA
mpnju1aKuROgS9qRo/3hKgrBljPeXo00Z3boTxrGHG17aGGACpjZ+Crzk0f5
145YGLxO+hyIsPPuz9H3r5qVDyepAwGRZBhdQhYBckNfFw0FJ6xw48IPTmlr
c72NfHdWXR2/r0wz9BrpUwaUNquzrogRM4y8lO7zHeSlgIeSaSwOvbbwfjkv
+hlrr9c1k6c862Hk1vOel93Z8C4NCC7D9qqkNlXFTKkyjjMGgSXxYmZuw2cm
RUvd3vjEdbQzqV3JeFc05qIOy2kBVtAct5q8+AUIkvMKVBhK9aVhF8WsUUBw
1gFnBTMOLi9eaUoAFC9c2aLG0GTC4iehTii+6Cvxp5IUY/a7bUgIdYQA41Iq
3Fc4gLuaqEYYQzEvLlEdA5pFwyEzjILn5jRqNgmUY8SLswYbX5JI28mU6zkN
qZp1SUTOkYJWDiiQrUJQoIEkE7goxohEZkjXnewUzT/z9AX8g092lB2Sh3dx
N+ggPphLN6RM+jU7slPljDXV6Z0luwnnRXWVPdLfBbFolI/kipuO8ZVSILN7
150n18088XR53rTOMrRcsfRJnE3qIXI6Ebeia4UeaidVr2qQOllgtTpkdSBH
0apb6Xdrss3jo+dbqtko1tPPaBQlcNqsCP9UZpirTlfNMe9ZoCj0Njowb4u7
7ecv/11zXwx02yVxXYDKCaaejxa8exfmBL9/74CjwBdQQ1TJ5yMCYgqSa6VY
SDzRIcPnmiPMkHJzDBZBszUK7TCHpQzxuD2HyDGMzLnufCwjqRr7qSN40ZEc
XYhxMecsgIp1Hzg4yT30QwETnQCrYsUG03QbSYHN4B+aX/3unclWDxLTKPSB
L6DIz8xk4fokpznITw+P3ohf/Ysv0bNPKcmnZ5lN97lwYc5EaAZoYMq4UFhR
fo1IF5LD7vMzx5NhGnqzNAlac48RmLa4ZJZnP2IyldZ8wxwCWcvnGATToMBF
ImBr70TnI5tHf9pyACH3RYYJC9rw+PS1S6eGswmzr9+/38qMpWe/FY3m8lfC
HzunB32NkpDhK/gfGBr0CIKZkoYxi8E6eLMpR3WAHlQCOBcUfOcMmgTeV6Ur
cVoPQs0S8yK4qwO9hOkfofCsWnSzamIispnyF1H/VuVs/Yk8Xt0v8+Uwt1cR
R3YOjL4F9nhe3iFEhQQ3ZuAJ6ytFXKmEDESJD1ifBoaridjSMUQwJDRHYZbT
GHXteOIah+/mowht+HKA6IXNVUYdDFOHhYDI3CqqWYps+Tw0OlEWMwPp7HGJ
VcijA38VReZJ3gzPKQzIeyKj+pQAdm4xLiErZ8AEm+VUPQ09X1MLV8IZTofM
LKqa4HcHvd78aweuKAuyBSu087IgjuyVU3FOkXQRKH4KwMA2gdOd40xFM3GF
pStkS1MZPWGgzWMwHsQUj0NGVjW1qHzzelqN78RzvigvUC0mb/OdIM7VYaU6
fhWPlFN9GSDjjEc1qpoUUigF1QSEhjIVBTF9dcDRdHGwuYRnTtQpGkzqcfCp
gqYz8E5jwjFTVPEXKtYwpZgMUEa9XIzJK8jOVToXVl+A9MuLJepJztybYOh4
Qeieqp6g9MzQihoQOxenFsWgya/RYvwMM6NvA6+GKpdkL2bVNYJ4K8qGEr2e
LDN3Fi8IJG+si8ZnMQc+Z0ZJkOofhBL4sq1M4IsyNsvMmPgIN61aUjBRUwwS
vTh+gd7MHNYxFW2R06iy5JwJnMarNNaLT2EjYiVbKOtooPC7ymRnsfcX/fiH
B+zqIStgUl4TYocnEW9WuDPoN5nwGEekvTg0/OHB9tcL0BxhCPj08jqHYVAz
muJIY6S3KD8wTBZTGWO2FFdFcCn/Vc5AXZ7Dxk3vPKY5LmiwKC262ScAOWYZ
JqZP6pLz7MibDLyO1GZ/Aq6EhoHcGEIJj/W2wFx+NaAvSsb5eZOl9h48ng99
FKlGkunQVTrFi5IiB4rfZY/yE5M3hFUFlpxdwAKECxYgrkajFg7j/+4R7PoQ
fv7eq2fBOZjBetJXOihXsBJLEL8RMiyAaTfrYIY127F723ifLwQz2ZPqghlK
yUAEe92inOZQeJugQtEfoTGhGXZjiwONoktqLVvLyYOWyAmuNjc+n1lLJ4bs
eonNdGrDsQHc5907jc2+dzqXC/wEFTg0gJBF7wdRh/f0dRd1IAdUSB7MjhfV
DasTaimsVdKkcO525GU2ka0f3C+5GLEi5b6bjBHAdh60WJKuacMFERYavyWC
RZVmzU+iLJH8jcsR2Se3BysFkjlivZlMOhx0z3IKu4cBeY3+EMOS3yvNV5oX
klz8wDgd0OE0kWCAwwawI09i/CbwPwqWcixazL53GyLUcMg1AhJp1IhsMWBE
9RqGkE83xyCRWj1fDnM5shj3XIq9EWNWFGesSeKlweCsap/8Dvq5Tx0n00DY
poazMXd5y2ftOgeciWrCWWfOgeVC6xec9WBeOT46+8YB2xqiisMkaQpJx6g0
F5coCLzhtLhGyz6wtefyx9rycuF1TEMceASc/uVS5iiJaQj/J4c9hMMemsQy
5I4EOiDcjWLUJ0R186JC14QLNl5Isnp65rDuPAci+uPh6aPdHXYxYJnA9+8R
XYPWOEHonZ2Pda+4SsWKYhCBRsuVWNCuwHfLWbNc2O3QzYrSt2waHcFbOsTf
Sa5hNuwvpar39LLfbn9BR7z2w5OX3/DCsRJiz8JdHb9+FnaN7n2tpGDcL8y+
uFbcQ9Y98E49LoDm2IE/cCwwhE741sXp/IeBlSjf6G5eknfFm0Rv4kbxHpFI
0+XYzDmhVX9i1yWI30njqMXRJeNS0MU2VYSrA8Y0XAaHTiVMbOxenr6Im8K7
lFf2M+O+ggCUiRlaA37jfXjIMZZgI+kae/bMjvAyKCuRENMDVg6qRjIyTQ5S
ut5LzMuRgDRDGnFoZQhz80AOB6SPqmhsmuRXg8cVN4Gaz+7o20SiYlA3pn9/
teqEUiSsTXNOGFGn90Btcr5OxoIXdpneiVUJ4GImoNAThK/bIef7ccSY9nmk
Ba7mWO8z1iz5bbCMUSukz7vDCUA2/mw2yaiRI2GsL9cD4d1hpKDzWeDhO4FY
tZQscG+U2idRYvKo3WGxpcCG49ir8iBnIWlCOYHmCPXpajt5T43b0MrnJsYz
6lOHYojZDP2QIWLuCmM/eX4wldKSYETdyS3SdWi8m6LvGMW71eJuFnJZXqO3
IVJqgrPgSoHTfTmPAe3crLzFH3FO3hZvofenaTUXm73jB085+Bmk5gMMWNuE
3SYUUgS7WOR0VOFrXxJwQVapBHdydlxPYqWrI6itziZVyOjtEy1IdXh6siUR
X8XOmHJXOHpY2oveJuSQLRvQTpshHB6Mmd8U06XDapLtIPoBfImlnMovnmH3
1YZCFZJE7SgpJyc1ujubq+JtSfmn+Ingp/iyr7eiBapc3U9v1ESmoi/OAMxP
IMJ0OO3ACNeIcSkF2lhye2XLhbl3cZIiOn3uV+MAuhVXdnNIYNEGUHYwMTkX
JVWr9EVyeo8qXrKBNPg7PC3uysWAPi1uC/dtW+HI3StyDJ2euPQzf50CjHXu
FJP8m+WU3WYnoQrViGYWR732pa5E6afC3Mhmi0muqp0A8K4FWNab86JpMO9n
KxdlrmeWce02XJVD8OB7NDGpLvyS55y/FsuXl3b48tTtDL2ySevAUtoUEAoV
HLeHXmGzU1NUumdLcFg0B/UzLyRYzyqXMKgRP+PdVc73tUAfsQuyKGO/0A+n
WLoqyy/fOF0ZY472QPxh0EAPPBCWJvlaBwI0o9sujMnquSsYXp/AMTzTVqhE
tXfkWCvVvFHdyN/PEbOfJA8Q2Zucr7dN0mVNmH0U4yvMd534W8PUwG+azEhy
NsKH3njDIvC7SFqBlX4589QRner6ZKIntVLyO3o5ZHrB0vL/afSS3GG+lvI1
uFBk48C4ctzGzYCXObi+9Op3VGyHmBis8sQfGzM5tmwUO0qRk0ZtnC6PTB6q
Vf+TqjHurjs3enmNs+u73p4lnSOiX86og3VK4ygkUyOrZ5c1LZDDWzTEweFR
/sO3uBiO73MSkMYYRSFEMaPsH17MXp8evj45wpdE1JPyQQU2w/CiYlHE4wLj
SADQJQi8e3dfbwEgTDEOwgqAauNShwlNJz1YwJXEzy0xTv/6Bp395S3pDCGK
58jFGd89KvxLJQK+e9yatiIKSXB0yko2oB3CFspl97StgVy5MuOTLsKFUCaS
JePybriYi2JFd/PNN6k62Vv7VitSN1KUjan1blGuO7yTy7aRCrrJrOVccnXs
Hkrx7pqvD77Jy+Wfa0BVzUkpBMGT1qJRdrxwnXtunWHRb1in3FdnKZLZZktE
9ySDk8IOF8aFFiizzQUXoqT1Pjjcqr1wGPJuPrjL6HRZ3U7D8DUyEtnlEzoH
7zTTk8VQBaJLfHoWhwRMUMEZaIjMKqV6JM7dOX6zwAUhKQGGlH28qsCisZxO
q1HfUfbKwWaDivNrxiPUeZvFNr1NlFigt2beclVjzMS8Xl6z2U2+SsoooiQF
YYUudTm9CqzYFNTSdMG3tcojhYliKSh8b+F5nZjwUa9WXpfIiarmuskUA5Hi
4k2r4MR37zR0+B7Lnd2UlHBBN+dQOESykv5W0DkrqJelQdF3j5bjXWCBr2dB
xTJ43K3KVi9bt/pdaNsFdT3vj0auU35KnMlxreKoEq/Yb85VFpcccbnPUmV8
SLVXcX82qV7jVtBsoZOa9oD8A8kCzIwTJMVqCAJPDpI3VEs8zOXTdJI6CLc6
APamrmaLK/Kno5Wj7GDa1IP7PXPz6vLyjj4phW5r9TAbYA/G+phNGfhRS1Dm
YixQs6g9hcx+Wl8SUMMyHC52QPMFsryoLlE+v0dB/x/wJ8vX//PZsOfPZ1n3
t88X9Tw/varm0bO//zX/E4FLwbrk66J/fsVRfv0oc1l3lF/zl7kp3uFfe9Bc
fs0Pcl8fLf/19e2sXDSw9AeOAoof6870z7MFksnig+cCyrB97bfs7mcftrvR
n//2G96l2f/pQ9918/+MfjBa9w++6ybMfxmt+VF8V9h9Yohgfz+T38Y/pCGw
TQIMwEqcHwD/8i9ghphh8b/PmXvhn6/kvLofx7+8oUJuwbtaWWSxjT8c+Re/
clfX7o3+9Pe2YWT4YvBF+uPkH/3WTSLXF8UN1H3RTlX26b+5fVp3g6Nxki+u
+mNefBhF/er+1mG3G1o7gAXPhkXFCdk/4M+vjG8AOylH9/ngoa/zf/B1dH4N
cprx2tclXKr9A4P0c2y3i+6Jm9QTNAgQDQc8/wjqd4RS/fUrfpDcrQfp9ekg
8Mhh+hGi6c9SvwoHecBykk88dGPTf/wBbzi1q0tJLOnf7eePnAbArcP+6ZMD
q+HXaukvpTq5UW79aJ+AWUDg3mExBYH1TxvT8qLdkBzvIjlerH2EDTCa4jqt
urAp5bIqbZK/V4UqTjk1JReCOVDcvb52qR86Pme7BsV0uIwF25JO0XLuzbjR
gSYdea08ja1dL2ycOWwFV+alGfjkwvBsdVZeS0U1ONoFfl5gfFvqpUM9VGs3
uE5pWtwnmbtnhqQXUhPRggAa2cFgBbngqln54C3x4ONAQw/KW8o04uJbU5Bg
phOdOEeUn6bw0oSKIklK0mifiTEqxhQp/kSW5GcReetEZ75tpaGMeOxrE6T9
QlJWleGaWko/nELQtQxjqZidOtPOaIFnKD40OanASybepND5Eg7k4B+ogbhw
4RtceJ4/d/cwhUa9Lx5vSvOJ08v206vcQQXlapQKvEHGqdjoCfapnRbTG5QL
RE/9n6Qbl2ZHMJrhJvpptHL057m4SwqM603yJJ2EteI4YpD00uy7Ip5yArbJ
xpX6vuPv9x13hGRB1Es9TxyzDsBvBeXiZWMk3iZH9worX8Bvp8CuBlo8Fc+A
mIrH9QgWLKwvrFSy0g3BMu24H1WxGlMhH06xzUH6DG3B9hXRKmGHoFlE7R+D
OfLsbezTZCEN8kR+UxeIyUswHm6Rfg6H5oJv1BMTrlB3HhyhscfJmJxUw6yI
i+cHjeAUGCmAzjGBnsSQk6ACaxh367iNXAyxcwDc00Ew1RQ5sZ67X+40lr2q
XZnKTW6AJtg7zg3z54p+PaBTnNisDhDxvtpVXDwLON5AY/paYrvr6eyFfCtA
8FbYd2UJaTmnh00xqCD/j7fsoFnPq1osNB5Xte7Oag8w4yzK63RigcNlCKfh
IxY+whmADouUrsLD4UYHjBIY1cBm+VIAGgbbIsCQrfUrTIrwRBQQhRGvS04z
DIvSJGfP327KEpMA3CgUybxfR+BsZ3Q1F0FTgWZbSxLUy7bRqkgdZks6BAqL
fSfoVysQgUjAE+7papGo5UwyycH8bGBtUwWZUh+9M8N6MBxMNg/Dq8nHMfWQ
3yD1xjmyMIqKzqj9/rak6+yz01dX7bQpIGC0P85pIC18H5tyc3HtnrxNX7x0
8wZOYKIcsbcq3KC72a5izTZVsIG3w5bn6xacA5pvxyPEnRKeitsDDTgXgP5G
PdDKm/ptp3oRo9CdvkjqoS0aE+VWqjIdubA10uZL8GzSirbsglxtUJd26o6G
kKgCUJaD8RzMpQnp8Rz2HY8pgIRsRTydbQSStOhuBytbBWdGP7ZLNpLQm3bV
C6LYtneydC6dOs6UYZUI0iAq/SStEXgzF3NhNzqdEHAjvtcVF3nMvPno0m3d
B1yEnu7NvBobynZXhbLgwJhw7XS5fswmmSJqBm/hI7EGK/25OtqfZYvRMHRS
xkiRb2nv2rhzZtD1OItRhGlRtOUqOZUobSkM5EqJMps4T/xmFZvEs6EIppRX
ohTncs4a18EF5kZgdXLgVZpD6g0kWeGTrSwOC/Ivnm6FarxoW4zwNwJwnZKt
zSj/vhGQhlSQIhTjkD+b+a54WvH7iluoUS8RDNEFDR+iUByF14Jgsy8H3wbI
Rm1itnn24nQrsJylJ+Yq/dMk/3FbmRhGmYUfIxilpjsi2h3Vr23p4FJIZnNX
Q/Ut7rqq+ggOnxb5M15ROH9J5AQlw/WtSkd4qQaAALh9LUulSPGjD43J7rtY
46sda/DdI/eAuLgm0T2tGneYGG6TIigJ+cgF/dyHhyzME1+80b/LFzuPxGbn
fR9NLHuo/qw0ZODdI/4HzOCgL2weXSctUJr5qQmEZLYO2/DpYVkqRSpIIXL4
MI1iRv740P36Wccbm3DQfhZHWdjXe1gtxsuq5Z8FAZZf5X9fq1KTiBbx3zRQ
I2P4M3Bj8FHwP9JjaKxExsg3/+XkcCuYx+ZrkL/yo4+yH3m+jeGdtf4kw3q/
Zj8qZhDOLGwS1Py05hDikuc/Okjj8NR2yr/vHyL80Y/VRZQPHddXt6XNf0oN
sWovhjo5N1uY2sOG+CpYKldhpSG+Sm0F/z6MMPTuxcc9VMM9Dlrpva75rpwi
UU7io44P1b2YOtV/lENNTPLhh2oHSR1quBdSfPfvc6jJ1N/OJV01RHCoTKIw
5j/2Te1O8qGHml7Ij6+124W9Id3mQj/1D/ERDtWRli5SKGqTNNMfeDZb+WrS
+lVffyO1h/ltNHGc3ohZfOsf6ocs5GPsxfqz+KqzZbBBH2chibF5Q4MOen+3
y07pGheVeIIT9/1hl/2QB/uwy77iT3LJDzyRHzW1xazyQ/mFX+fDhcCQHSVm
pyIhQNsJz2x7TTF4Ojmuj/GzSh6G+dMhp5WR/MiT54uNYXtgnNVY3XtBXAk9
KZl1dYAhZyZENsmnqrwo3923XQql4ZTPp8Z4LFgWE9wLlI3OmReplGKuMqi5
iwynGvvsb5I6G9owUmo75aE5hEUSqWYfvzSvQAxNhix2hvgcXFwXU5fiTJ3Y
RpgZ2EnRF8tuK9oUZgz7eOwtdR4ptAAMuj4iq831RtHe44cHNFxHY4Fd1ios
DmuLBUYRixog/6mrPDqJ1SfMkZeoiQ8xDjjTVAwJ3g0jha1r3K3dxBONOLWG
Fwa4WXe08aXC65eunWgXo+Dcpc5N2ZcsV+cIA2ip6rwZm32tkxuMl8g2uY1U
mhQSlQyozm53ji8YJVaPs3ylh9NV3dD6Lf44OzU3V3U9HBCVBOUpg2S8YK4B
oDzvMdjpouHXuWNdqkyGz4Pvbe3jDPsgsuledMVP7Pp1g+OliEC97stETDaX
7nRD15woGyLFqoNxGhA6IjBscF1OKkzfwDJ0deoksTeln77oXfupXpMXIQSA
MlXaBSZwF+TkLPLLCgucc+12bbtKSToSBacNvKjEIaepJUECf/Sctj/lNEEs
teKwUr5zRu4LHmDHACzMHoaX+7zznwbK434OP/cZm6aHbhXH9t1tQz6EsQ/J
TZFmB+Xkdy6BdNbcUj6bLEFSD7lGeh5s+oAiYSEZ+UmKlN0PdCJHTZTZpI5Z
Og1XKi7jjtlh/+SwT9WnaYm+6lv4gvXkF+fIi/GjCSTHJ2G4xY6qnVsxAgM8
0+Ugemc7xfhpO8lbjSfuvHeYGYghQ+9idc9Us8u1AgKDrOvad25EU8gJxYMz
5jLWHYwTWL2ZBz5KfMpR4iObC/HukQkAZ5kDGzkNJk6zIo7XiTynw5zcd5mC
QBNNNzQyyjUVv6dVfBa1iu8TUlTjIa6WcH6X7odj4uwtpqcpWkPRUVwKBD5O
cXJCSoQbrMHy7mY4NBNlmVFn6dRVpXhYpJ5Ytc1FZm3PCrOCpdZ45mazPqEw
qgoyYMwIs55MC6/CPznaIkPu5xvbI99CeBsmuG2LSmwwXtHF6ODvEr/nujB1
GKbD8AYdz34WjesWMNQj2JYN2fCdsxJPubDrrJuEbNhtVmAN2alJy5MZ2yIL
Zhe52Ysm+eJOZdImHOaEKFckTlUoe4tcUuPCGJgpHBMxjVqB+t60aVOBUXfQ
tYujO8lRVRCSFZWlv3NNfPe5I3Rn3/a5JASHXIXpRxTCjZWEaAk/dPjyzQDT
ybnUPAmC9K6WjEPyaJeG1FnY6X171X2Xrs2wTfWWhrss7yaYXOmqVus3JWXt
3m7VC1X5Jg9X+fztDNEYroOJ6UbVOkVJ5RSS0SgIGPtQW9jMLcs1+91+029T
0ThUUYfKCZGygitlYXLmnkvO7KQ1n0RJw4lGhG+kIwjmae6FqepSkJ5K8fom
fQqbklYigwB0qqBpzzG6yKrjuK+wi+Rh0u066K5NYy3q3m7rfbQ1SZkMiWmG
cAhDH6ve145oTJwqPLc0FKy8ksDKXAAWq11z/DOjn7gW7C7ZXoDhgvb11Q2E
FXnl29YMjKoKZdz0MFWF4zjZ/5uiymKouDIFUZQfnwELdU7H0Mk3N1B/A4OL
oVlYAzwBm04Sgef3Hk+ThVgxLsUNRFs1WjaurbuZoVaH0dzVTgqFmJWJjPQ4
L3TPe2fOLOdyKf+83savz1soxZib3RUzBx+BWxFwGNsQXnqcG3/DwLQ5CzrL
TTLbqWB1e3iL9n5ZL0qM0A8C9cyX0wzGYaIFW2+6FAzPVelEpVfQaAnu2tp5
Ca6lbzoroH9OK4dDu6wRNuhqWEdLNTCcSrl3T86+6R7ZU0GaWTp8vEt6tF+x
KuLf9GOrPMsaLOYfkOMHpBZ/lMzij5JY/FHyij9KWvFHySr+KEnFHyWn+G+R
UvwbMop/1WTUD08sxg9Teq6uJUZR4L/XTJZ0oI9fzf/q31ampSayWXvGsCcQ
5hzf6M86YzhtSsawm/1r9F/5O4wR4Gh+PSAW5udhc5dTqcu/rrEWm8OcSGEO
x+DIis9elkiLTWf22cybDDLeWn8e+CdMbI73Y70x7C8/M5eEzyVIjf5VCnOu
PNtwxPvnEXw6cVk/s4nPSVo3Iybyc91+5Cv+2DGkrRVFy4xD4UFj8J8DZV9b
/hfrjtEvEe4d46E5vCv/bDxfmde7t35eb6RdfHg+794a+by2R6Vm9DolMlbF
fHOZyqcWSXmhTh1kl7TV7TWeHJwahWF90xeujk23PnNK+5K7BipPFtTbdVh5
XtViOaMMWXJHcDsrWgVFkiQ/KQObEXR718AKdThuKTSlJhTpTztNfoHKZ0Yl
ou8a/BgooW9R4Tq+sIW6sOkt23Me2cuIdFO9LN4e6Y8iqVMNnJEE52zjFjSy
rXGp5hY3rO4U8+monhThsz3ZxFBc6Fdml1nqCEzKnY0IdpsYiTJu85NIw43a
BVCTKPou96eJy40vuKhXCH/Pvzs7e9PpMqHGbnFZqtfXY5zb+m05axxZ+Nq3
6MnH3txjWLdrHKe9GtbJpQnzmot8c7xs2vq6XGzlBkfNaTO0J0GMHcPk3nOj
pdH8xfStfLUYeZ/x1ukmwyemWSeJgtlkyHcNKNfcMO+an6ZvD7nP6CC6ffyo
nU7utzF/TXexOwfXGZznsuQSaXwmGO7sOZVcay6nas0VWm1uokFRu0uUk+es
dypIEOWNqMcTM4R9KkifDSeOQz8RdEmhQVZyymERTFS7m7XABS7JKyzvd04t
/XkZJv0St9o85ww+X9aORjpoVr3huI1zUBo/gWZOxtgEO6NBgB6gjp/U8wpf
DSPOtsUdTizl5UCacMVIPZehSWkZff6sTTIO6M9tMctZDYLiF18vJtzNLugq
SCOgBU0ZSNrQ20V3pNxxag9d621qj6mRNpnhUFyFQ1sJ1nn5MN7NjxnnetQM
ZkDt6NBFZ9t062yuO9c+dhC6fmx6y6QGrmPjcO2mb7uH2yBsBHe91F7WelyB
E8m5vVf6Z9zmhSzG3CO895HLNQY/+I3bdCnOQyo8aFKeJN7gfZ5c8ISDlp/G
XmnTwKiIPNSIFeA+hbyULA8X3s84e2tsxpTj60A0vptcDMlJlKkQLuPiiYsS
DpqucMCNBhqSmSyp0EQdFG4xfYyathi/RdkID+Jj5PKkYFCYA51ag1yzJgvO
F7OFYVZtGXNfg+RopACnL28QUT7tZ9db7kUgqj/UTJgCO8tpW2HMUfuMB9dG
MyGT1E74CZStyki0dzkeeN/CI8mtfby66fxZt1yEO5nzuxi9tfDVt+VdJwNc
ac3ezF+aqXb3lOCJKXz5IFlfNFyUZq2apzn7jDn6YN3ITuTDw1qQt6ecrIYZ
/NaYecb+WK/WrFhjn6PaxgPPKamUy3eiH15sjLQFMjBqhh3E6YDKfH0N4YQC
HerdbD5leZeLW/aIEALf3qybC8hRP/YTL6vmKhVuc/mdPYZHVKfCOf9dSuUH
lOix5EmhW1po0WrFEqf6pTUaLXEcKBvMy+AGRKdJ2CVu38ZXShCBcXGgnkpA
thLJcnoBmprCVBPrDOoArdKMBMbYYxbgup0UcHilRDWgLO8EtihpUUvdRqLH
VMFFjIAgXjUwZw5l0MOhfHV3DTlFNOSED/bOxTPl3j0pXTYiZbWJK4XLRiIi
KK4bMAH3zVrZQ5dvaTkx7/X3nKVb5QBUCVdWyfn1MymysOVKeayotkDYPwH8
ZoUKs4E/IVJmuyYzPDV+S4wn1hCd3gcnRR14czesQygiC7oUJMYv2Fr5zlwV
30PV/xouwo9YTvAIJlDDDZhPqQs2Fh1vy5/y7f/6aZa9ngPfPMYvNmFFps7S
Hz97hqnA3LuODHQY7gLZMLoHkZkiuGt5rZLAZ1tj12f0uRDs19Xoz6wvwQ2C
88VP+UZRN1VDr6qQ872Aw24AXLBBZnpeNaP8v366nWVf/ZfhMPsx/7eDV98O
wZjkAhjkR5sxfIca6roMJ/rkdU0dMbhdBTV549x2WCHOb5PGcA1xEYmKG7g1
yn7Ay8jVmAr6pAIm5VDlHlu7Nv+hdNiUasbR/5wwR9KRSHXs6OwHGVrO4jea
yc4LR0C/VslmAkGdQV+bNYw9xwojQzoQzhQvCdB65e6xN9e1WkwD24u9xRD7
ChcDThc4+S1PepBj9LalrwFdcxWLu4KxJWPCnp9TVRM/HO/EPjrNYBAeurgu
tWyEIwTjDbnt0D2ulreHSmujq8RPnMeUW6OSs5E9hRcRhwk0J6/jliFGznar
aPrG0PnIC3xAG9HsNgihRYahwO3nYLNgQJfe0VutOE4R1vRBdFBezlDeUx8N
988Jf4q1Y370oqimUbEwvXmkpRbENPWwsJP0KD94W+yjvKxaAvXisSh1IeNU
LNvympgg/ho9qa3QkaeagT/zlq7lrXSfQw2UKf2f8S7gKNOai6vgh+hGyCUE
jWWCvtlt55RlS8i1ZuaB4HzrK/rZFVbaQv4BZ+fvkUwKfZ7kSUKjd7PCh6Z3
W56IzsmGYG1RBqJK/LjVV+xbv0JGSu3j+ZR/aQ01us+gPMFzmALvGWGLPp/Q
4RiCEDXVBls2ov1hrodcQcx8KEIacreD/KMdcmQ8oKdd9/gNSsXoAgDnO6CO
jbdKNTyhv6DWLKgQJ5Wksc/Z18/z44NXBypZ7/zlFIZNGR3FjH0M80VF6NJF
cdG6wpN47CxFYbJgZT/a/SJ7IyKHC0iwyl1dF3+oyvZiVC8ukX+QCuNbhZNh
K37W26t66nQjFGg/ZcPh78Go3ziI7hyxQZh0gQF2f26oL+cb5mpmBjzZubjK
TrnkgrZJEVyee2zoRa2F2uKNclpHj9mTxUUTxXYQsDAX7UhoxkwA5NBhFYi0
DNW/ImVCeS8WtzEYVW1XX1E51oxMddU+oxECz57IcYbX08fZXNoE3XorPzrq
ZHNcEWtZlZHSn4/SRWQjWIbsPUR3Uz9a6ZTgU5BtCTfd+I1uxpiMt6EF/WXR
IYZtYKnFOooSJOG0c3I/Zb7Xe+tU5+4pUjaFeF55T7P+nQr2Ju3yxK6Ipi/h
mQ2rEbcpxpiyAFuz4tiwq5SlP86wMJRBh0poQ5cBEurpo/6iQzjxJGA0f/eI
f/5zOX/fQRJ2vXmBD4MRk5lz/JvoJTdxJazWPS53arvcXgUFshzUNHbjrnbd
WhgnQpKpv5MmFLkL6X0Mki1l3V5IlOFEkOiWgX9plD1fur4+DEJLOy3wh53u
IEnDF/mPGP0hMtH5ysGw/nk53vuZPKpnrmFsskZeciJyaM6R7aFsvlIlxzRp
TFBGysAvEWH+zxfN22oD4d5wwmWnELFBPS882jvK7qLbZBRxCtZ1v7KdpoV9
JS3v/MxydX9GSGFBIINdOrNxoXjI0eoJdClu5Ry6LtQRSrfENLoD3zMTmfe+
gE3Z4lXJBzPQ5aODVIqart4ApvK11+8+LGW9cn+bNg1T2+qfgHOs2MWvNYvD
Ayr74qYg/+at127XmurO2PkuW4yVgjTqVy2WAJbhL4qIAVxa5sRUUEL8AcGK
jOsgEkiD3IBrwVgVrJr1V8A6DgMe1sWozbbvCa4keVbgbb7qx+b7HDheVS8I
3wTePPvWQplMGZnziGqp6NBnlxIviswJHzXsL+7e62u5W1NceZVmXjsssuOR
FJNHA8hlcStYRroJtGEs3nfsEg00pDTh+0Y0TgNu/yDSWi1T9lz10nuCLS4F
VYIuxcxoNAeX7VbW42ZPh+dS8Z2MQvUoVWm7w+HZNnS6poot01w5680/SOhu
KI7wXc7nG+J9ipp/8RSjSVit7eX3p2c+Vz87XRKB/rG8O/b5xZvAK55vGc+A
ujZdEpeqw2ZuaOZd8qwuSYn213QUl9dm95P35WW2S7mpuhqr9XTT3r07Pjo6
Gn6xszfaPTgBDY+iT652Mr6C849y9qVzuSZ/t3FRBu5sRia5liqIsEQKmxqI
xUebAvtwUdwIk87sRoMCAWKWaloSJVIHbOvXhYuzZEcOCpDvtfDeC9/LOzrq
TllH5PYYdWcGQcEa67H3mYz+yn3SpDo3NxrwVwd05j+dpwjMKJERrfmIVtYh
aPTE+MgTRWE6Ln1tlDmR4FPm43rpaBSbuVgr36uvNrGXkn8pAoNFbw8aj/wl
ybUyapkSNdka/EsapUr/vjAmZUvBM/sPKnlWXf5uZpE5PIPkBusliU6XT0ln
7gN0D1iDo++O/Vg1WSBUWGX+l9enRy7Ma4GFutCQUJKIT7t6zxjn5OCGOwCW
ZjEdzpbX59j5PdhWLdHh6Qljeord8+C4oP7+xKKmdBxxlnSkMt3P6+evTnlv
CeAn8QZ7YGHJlYxRpXFQOvfwJaloEsAB0B8hGWciPLMoi2tA5S3yBv0sQmLJ
XbLDZtoe9l9PcmwqjrOS3iXAfw70lkRxPxfneDp6bCGifoM8ZsJSVQD07ILC
cD0wCBtT3U4WMkpsTIs4icGWdu8qcS9TGMaVJugk+AqqBxX3kC73KbhvEbTo
RpkXFZczkYcX6A8x3H4/qu+TVh9wgFN7PJvN1n764OA3nijhHxzK7hA4WQq2
RK0n6R7nhamOS6oU/L5TJbdPf1ewWz0r4xq2mSUZJdbMCadcQ/mVphSvnSaY
GfXrwKd4qwM9BQk8L01k318dKZLQuzz9rq0A1X+UvPNvNOD8wG2fz4u+bffQ
zXgQUIklZEJ9Uxz+B5jSkK+PJtJ5PCidy7PPnz1GRQl9Xi8R/jRGfxm8lumv
96hQhpsMO6/lKrf5//of/zNJpSOyc4digPzcjucjKjw1+l//4/+ixak7GIQE
ZZWgxsKlqa5qmMEM8RLu4jOAkH+f2Tu9mfy4U1C5GTu5UzceNs0NMvLRkU4+
/3OgWNmAfu8fMmcWA16p5cI13j4ihmfwWB6/0m+2qH+XK/WQIlpch3KB4WfK
IlXokCTqEwDemxAiT4wHMYLdmgbx7u8/S9r9VZxIHXi0e7x52vyCirDMxeXO
hGtAhsbKRInpmpJIffBFNisp5cXDEauy2TIVldQnJ05OAfcz7hyMUmohxlaM
awhm+YkDmB/WB28G+dfTZdnWGI59Ud9mR2DNXt7lm1+/ONqiOhSvymIBnA8O
6jCw5zdffXOomfdqkWRx+rx1aKR1zJQ7w4COqGG72zAQ0EtuqHOmgm+wToNp
2GR8fj9fhZH1YL1MG0/dk1bdBc/10LxzQHkG66NkARPe7I9CbIU479jowwAk
7Z4P29GlGd4TmNtgnEo1M4yw49pX41ZqGOIFjqB8Pl6DziQnAfEZ6WlnThXD
1VqMyBgGkdMhsDE7wq5Hz0GSlVt4Ubbjq37u5puUYxhJbVBXzzcLK2z0107o
Zhb1Hn/Xa+CrwGW9+r/rNlNPQBPgt/18Qp1ODIF7jogIF/iKFyvhhG8LvMrd
UJ2637SA8LQn58LkKvicNueHsscakjQ7LoCgKcbniiT2pA0Af9vwO0o0zcQ8
yiInjBBPDbdACn+ymC4qKlJ1Uy3qmau41RQXoHDADt1WE1j3Ouqb7suxw1oy
+0mTA/mliDgTBxjsTmAorPBfKYUgRgOks9ZKiKktRh3itqh/7J6ZBHbHrI3T
qrqxGvwSRT5wasvFTIOnTfSl0GVHXhGpPFnNVhw+Sk24s7q66Le6IdmH8UI8
VnIUE05CJ6JO9A0NA28gr9mAawSyDWtpOViuCZEPBBblAOg+Cq51ww2BZf1y
5TjpgurZu24t185FyWClN4nwaBLqQAeJumMS5dCZiU7fe3B6qpvI5LpsMW6v
tOqwaW8EThbCRJrlGJ0hWKD3LlqIHG0C4hIctmTp3VZN6RpK8quGDDJDBqMA
JGrUbY6IVSnsS9aXpZilAgLAdcGAsRWPXeazVPvxeu2kBCqYlt2uTjCbc3V3
+JootjFHJ2k//sFnyX9ErUqisgedWgr+3/wPKZISNRr5NXdlGrp9SvhF6VDC
/1DTMB7FEWu3U8mvuSk6wP8gFDQ++5H2xU/f/0nUB0k8cUyOXlChfs1+TDjy
ftKh0VbjGqZrD+3/IYOElb4/cJBgjFSJ9XUGWfnG/YP8GEb/U2iVbEWmoQea
/OR2Jr85kzE/fGekSxq2YfnP2hn+Dyyn/O3LkeJ7v2U5/xE+Ev3zvif+I/tR
Vc2egybguC328VN6G4XyyQxIEu46ZwHvmxPOP2wQ/9cfGZ0m/qJ//qn7xDqD
qB7PrUQ/bBD3I7nV0TJ5vz6EPn8sf2kpl4YFwfHznuO5ZxTqWYnOeDDE0LRZ
fxTftUg7GHr2t4JSgqf/HvwsJPNUEui6lD601zb/QEpPzJ/7TyQJf/1Bvhqa
ejrDdQb5yq6nmXe52d+U66iuR/5F21DBwavE9UgJtBay6AWLJaYPFrn5zSmP
/eEi96uh2cffMJPyt87kY5+OoNfi7Gn5KRV5EH3ybyscYARzTB/t3g2RBYw0
quB4YP4QlsxMrTtEPxs0f/9R/UoPZ78r/rlyG8uPvo0rB/EdbBIGmRa2eq2W
WBrP7V5ds7eNNdLyBqzHTu/t0I3uYgxZUICnrfczKfQQ1RLA4qiNIBfISdsY
45GCEREgJF3tI3aDmU95N+9HGD+R7xHtR5Z3XA1RcnCEAZF2NCchzlHhqzrp
0Kr+0I0R94w6vQU2mQep5ELUbtskkFvGc7BOo0SdgkRcgoO4K2lgMx5nKDPf
iiNkP+92iNW2W+KCSKbLUWeCgow1MUhDQBxmiELwNoU+e/euG2N+792lFLTU
CY6XXNSqU9y6PxrEMTuDQ+0Hyb9753M0EKn5BvP1ZpI8JvdOa1wJNLNU6FK6
+Er0UNxRiUif6jLAwUdOOAwYeaxbp2Cv619sIxY9pCu+NBNvcVCHfCWOw28P
/iCF5MgDjGRf0AOPnzKFKa2GEFpcvCqsqmI6JDNNjYJd/aD93Ga/tNtJGhK5
hx0NsTP+kSbfVEVQ28e/Le8GlH6UuxwcG8wzQOr0xJx/B3MG2C+2HSbxU25u
BVqyw3G+SI1EgfG+TsSpP4FLK9V6OPUn8Mml+gSnXzKevfVfMo68D1vT/R+x
3xty0sgD3+q6tXkAVLTye5xTXuv6dbhmCCN83DrT09PrPC5t41x2RurxtRcv
o5OqtmKN6jgA/bxePHiDV5QT096ius8Ja9ma+PrRzfJ67gux9i/sQ/ZhuMLb
+FH2IRx3tEJl3VWFVbUBsU5XKwH9WqsvKxfiEyTZakUYT0FyLHARwnKav3l9
eqbiWgWvc3qwRE4lvPWkom30YTLSE8K2eLiDZ3dzjafCJEGQG4j89l+aerav
tT7yIv+X09evDCqndtHv9mpRlti2rLguQUklEOaa93mf1JlnT4aUzB7mp2Kh
JzBEQ3zIyA/urvOKQYh/iqzKguZxYYbWp10+1hn1X344HTrAqgm+1x4nEOq+
MdexeAURegasoO2AkjHFRJSbm1lkYVp255tVi1ihuL6b71OZBWmlXHC4w1sp
McHgwcXXY9oV+gZDZrx9Hk/oq28lbiCmm+nlPv4P1oq+umaNiDpe2Ux1tV90
l+gA31aT/XBS0fkloQWuyFJ/pBdP+0yQKfevAovaYGGDTrJo9xXpEpJtBmV2
iuZuNo7fHmI9lffvt0TXZpYzGeIFJaCFfJ3hrrRViL90YerqGpcIv8dh9vHn
Q/j5kMoA8HHRFga6aWLkpA6bcalT5CRSs6K3ZtKAtETmwHujx6NdDiSHKrGH
Lzb3auNdCMCfn+7tMCT7FT9BqD5vMWuyTBfd7ex6USPfkYDaAFrc2M83jk73
nj7b4LKjG0Bq+DOmLyEvqrLxT/+0kb2nNzdSNDAUQd2lBRhOvuePFj+xt7O3
O9x5Mtx9drazs4//tzva2dn5d51JsBv4AhYXKcsnn+/ubsAT72U2eX56/O2r
g7PvT47gJ05kFs1EZeSRdnC76NJ2r0j8fk6lOqQFo4UU+LgUrzjIAOferZkD
ETvcV3gUPfi8kLyyoCQXmdSSWXNeSpUWElzDajYEBp4cAzPQhs9HdGJUmWT4
l9tGv+4yE0M21jPF0+8OXrwI7oznjE5Api7I5093YQW/kQX+8nS8mgXKAXQv
QYrHrT6FmDlk3kkSLNR2M03yRRdaaLI019iPOV6wQu0cHTA7rr23mtnNsEao
GQxY+OJu3taXYMFfSZEeoM8aywhj1ZFrrjY6b8rlpB7Kjxwou8M87z+GPqbG
6ohWr4lG8v1z/b7Jk3qGK3e5cs03xddhMhjduTUPU+GIFCxKl+t6rtqBfgAw
vLjpgFFF421IR1RppGuvFteRYuFUUHx1JPNmfEOBU4L0zXJbijk9vbSC+rK4
WzGHGJOYx6VZqot7P0pHH/RVlUtH9baugc6mvoxcikRcXk3D5c0QJBgWz7hX
PRFO6TMfBcbr63toUl43Z9U3ZoUFAiMzBy4LIQWUufAoENIJGb0BI8CPftx4
eXz89d5fDg9Ho9HkAMTzT6vks94Slcb3CuM9I4w3iKHgc+Xz5rPPtr9ZPv/u
2+9nJ7+8eny0++TwX+Hj/Nwqmc1PuCuNv43Be/LIepezV02xo4R6yHrPrx79
ftVjfrNIqB5pkbMykLSOhVtFGsMqaQ/3K7KDdWh47DO0ie13tQ+9BxjDt1LW
NSeXmCqeKDIdw6QUdtah9Yr6ahba8TWRc4/BoWKWZ6Z/eViflpE1lIqEWSaF
E8Xd4RlTzwIygNl265B1Sv2GYROu5vAas2NSTvcrKjyASmMQEOnwo0oyuYTZ
hU4XQa6VXPayp4Q+pYe7HrQUGOkrKs427ps/Hp4+2t0ZmLKkqAUwF5N9kIRs
cgAo8Fmy3Kd2/KK6bmxnhcIV0bAFEMB+Dx31Lbdqll7cjusHSQKj9bxRiX3p
eqJ+qyOq+5F7fFGJWSUuTJZ2R2WZtJbPyYdJ+urIOmNY1PiFSfkCqgtrXzKV
Io0nK4uaTkha9uHpiT2YOkjDlqbwfsPzDC/yvqMJKhQry6aoVAhSjsiyspcr
K5oEaY2SlpfZ17TRJZYJ21ymYkDqRIp7Cino/cJzpt2RuiwYE8WiHVTNjjj6
qmp2UQ1AoXH/Faq6O8Ynw2heWBbMnJn3m3mVg+/rwE/JFWwwxQlG2XclpdkF
bi4srlNSPwTWA8L+DGQrBW23UqoW7U6ftTkrW4w9Dpu/tvPhuGFj875yzUG1
5pPSlO5oludDrIXG+p0Oug//z91CqRJzpg1iKHWy1Z4SvPMoiDEPjdYgxZOf
xw2vx8W8kD7hUS+YqrWpwXg4CYaLRuGUa5UTtw0TmVwwW8oduQqAFb025nOX
V3Es/WsmwVxKpPQ5UD4lNdkdne730enZQLuTnw6oDhZ2KAeiCwu6N47OXeFe
KfLix85c629NpZhSP5VLWWFYTd6VulSfnWY39MkpUQMEFlK02UpqEg3B80CX
d4bpU1buJFtswJYg9zp8eThKKT2hA2clM5FDynQR4cZS4RaVvbhtZLPhZcZ/
BLKY+T/m23VNCOqEfFXBdvu6o+6yA5OeOTGaGfrx3Pa8hH0CRSg7MEk19iio
MhRnp3PLL5LoPiIdlAuCjbNlWSotKXwrAAVTIt106HEHcbFctKigZd2xG2p3
4Eqg0Lmivac1Lu7jIZ/mAQsJ7zeBgTKTLjgIOzbgluBGE/glj6ugcuUxhr1s
oLawQVPzRC+dvQS7I2U9aGPYXRuSZZNxQy3t6OWXSI3ACjmMge8BA+zWgWpU
R5xkRsQrhbg3go0t/KAaGjByN2cHI5dEpnrtekoBLghdBNpPPQtMcml03aed
idhBItVs8MzzL1zaKEeOvPrO47WElS48a8RODfRpvNA4PbjRuNQUAxAPWYRe
uZVCA6ZeUSVtYkJCDDg7tZJpTU0+Gb3JWK1ysznV9u5R9Es/GzkSqwUhWVZM
P62Brqd6srKYKVpK19JVSOumTIa4Otj1/43dwyvI2EsJWi1YVyAA/Co3cdKy
uVt2zcTPOgpMaLh3yZ77LO7urF6hHmYn5nN2VcaqX4/zKlVxTXh5ZmNXqs0a
IqXjMJmKvR6tdNhpPZ+W3TUfVprv7vwWb025wlvTpYBeh80PilL1nbbuifVI
ReR+5YIfTOegNyDNRA9NlilOVAF6kPKd4v6eHbqIPqkCQJ1/4kL8jBZsi7cw
Epf+8HFJl3WuClOebxKvTIc/qY8qbcAruFVUySR0pbdYVQ6ReBmp8it9Mv5M
VkR/0LV/32E0agjMSJWME39Jv27K2SSIaDiAcF/HSnJJcQ8ZlOdUO+YBJUgH
1OdPAUCo/sqHRde9ZkUEQZIz76dGo0PMpQHr0VxyDXvJZZ3mT51OdJ53UO2f
bj58stVufzdBVx4swp0n4ExhjlQX26z1f8JFJOvArFvPCxWn8tpBXJI47vQx
mTFMa+OwNoIUkqwlzYAuMXdx1aJkTQ8y+YPQx2tAj4mGOqjjNke9V0tM31ej
TNs3xM0AszyoQTbIuRM7Yr634f9Pnydr1+I9xo+OqVJRL3NdXcPeYfU3m62H
4oydVBAwL84mxPM2BovcCQP+p4ORfQHvB4ORQ3hZAo48fHiNgQ+vK/DhtQR+
c/2AB6+zBwiaSFWyNQI6rMpwlp+yH+ObgW7vUf7TAz7m/2HBtg/LjvuwL31I
fvUH5VN/UP70inzpaIN4k1a8lMivvu+l7o/6kqvXfTudVJ3Kf743ifrh+c6e
ZXDwLhLsERUDXSsHSiZB4zmEWc8fSKPBOaaSnNOZ0b11EvpfWpGN6++dzXwe
rpP5/BEzH/diGLlp5KKsJ6UhhecT6VnahXJlaLvjvnAtjtBLFRZy81BJW17V
O6ypc1EHj0k6ybKhsqg43u7oMTU2nJW32AWTwELjeone68kol0f2cn0CHzg5
+tfvj0+OnmsZy44NVk1K92owuvgHzk1Z384gHKbT7748+DdXd3P1kJmvFCxD
opzqH63TeMiWv03WTadoAPsSJ65zM6nzkc4obsSOORM2uD0Oug8HKYLsvo9q
Roal1yMZGOvKxmgLk3UprJZO4w1NNmnn1a3rFZa2w+3t6Xo2Ckma3N6CAugE
H4KwjbTv7kMHjvJTrV2OBbCibRKPPX/GVjT3lrevypel9OSElbsZnZ0bMjHE
5uHLUwHYEA51q3dQdYX1+C69wdxfASags1wj5SbfRE5rZVxfxlMo1Gh9mI0p
MJ8mtxCIcw/s9n4gTr7ZlCXmpt7g4xJK4xYWqPDhh8gO7NvSDnanzDcOSHXa
WAXbyV0BOw+uCfYhgvAMPcbmLPHTLHh3Y9WCNx6EZLIwgXm3vm+6CJ4nH/JV
Z9rAmNZDteCC7tTdtoMJLzZWwDNV5/HVsD9Qb2nRvLnCwgMmvyWBMua7nPWv
7APQrBbYnCdN1bC8ZzlD3EM0eQIhmz7NKwrFGkdYH441ZJ80S7cvEqWR9EvX
pm91FdWgY4g0uZ1wmghdBcxysC5qAzfV+G1YmRHeDQqD6khxTpJvMRS1OO+S
JIYese+jLyQaxFjx3HOK2M3rBn22dx8Hfht0noS1+iW1954CI59n7Ek1W6wB
Xgpr62lRJ8gb0P2w0i+6LVzoyyECCLfO7rJCYRoGNZMojHAr6B3s18DfJHD2
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
4t0VnmbcAQA=

-->

</rfc>

