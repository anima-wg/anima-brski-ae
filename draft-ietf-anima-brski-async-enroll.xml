<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-03" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request:agent-signed-data element
(defined in <xref target="yang-module"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-trigger:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="yang-module"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json</t>

<t>The pledge SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher response. The media type
“application/voucher-jose+json” is defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>[RFC Editor: please delete] /*
error in v03: HTTP POST allows for an empty body but also to provide additional data, 
like CSR attributes or information about enroll type: initial or 
re-enroll. */</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it MAY construct the
enrollment request as plain PKCS#10.
Note that the focus here is placed on PKCS#10 as PKCS#10 can be
transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certificate request objects from CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object and sign it additionally with its IDevID credential. The
pledge-enrollment-request should be encoded as JOSE object.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Depending on target environment, it may be useful to
assume that the pledge may already “know” its functional scope and
therefore the number of certificates needed during operation. As a
result, multiple CSRs may be generated to provide achieve multiple
certificates as a result of the enrollment. This would need further
description and potential enhancements also in the enrollment-request
object to transport different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certificate request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-sztp-csr:csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-sztp-csr:csr": {
    "p10": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: further description necessary at least for */</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field received
during the communication with the pledge, indicating the pledge
acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jose+json” is defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The ietf-voucher-request:voucher can be optionally enhanced with the
following additional parameter:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jose+json” is defined in <xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jose+json” as defined
in <xref target="I-D.richardson-anima-jose-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar. Now the registrar-agent can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jose+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="yang-module" title="YANG Extensions to Voucher Request">

<t>The following modules extends the <xref target="RFC8995"/> Voucher
Request to include a signed artifact from the registrar-agent as well
as the registrar-proximity-certificate and the agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
module ietf-async-voucher-request {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-async-voucher-request";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix ivr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>";
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision "YYYY-MM-DD" {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses ivr:voucher-request-grouping {
      augment "voucher-request" {
        description "Base the constrained voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}
]]></artwork></figure>

</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses" title="Misuse of acquired voucher and enrollment responses">

<t>Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2: can be detected in Voucher Request processing
on domain registrar side. Requires domain registrar to verify the
proximity-registrar-cert leaf in the pledge-voucher-request against
his own as well as the association of the pledge to his domain based
on the product-serial-number contained in the voucher.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

<t>Misuse of registrar-agent LDevID may be addressed by utilizing
short-lived certificates to be used for authenticating the
registrar-agent against the registrar. The LDevID certificate for
the registrar-agent may be provided by a prior BRSKI execution based
on an existing IDevID. Alternatively, the LDevID may be acquired  by
a service technician after authentication against the issuing CA.</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>We would like to thank the various reviewers for their input, in
particular Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.richardson-anima-jose-voucher'>
   <front>
      <title>JOSE signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='23' month='June' year='2021'/>
      <abstract>
	 <t>   This document describes a serialiation of the RFC8366 voucher format
   to a JSON format is then signed using the JSON Object Signing and
   Encryption mechanism described in RFC7515.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-anima-jose-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-richardson-anima-jose-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='7' month='July' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-05'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-05.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='22' month='February' year='2021'/>
      <abstract>
	 <t>   The goal of this document is to facilitate interoperability and
   automation by profiling the Certificate Management Protocol (CMP)
   version 2, the related Certificate Request Message Format (CRMF)
   version 2, and the HTTP Transfer for the Certificate Management
   Protocol.  It specifies a subset of CMP and CRMF focusing on typical
   use cases relevant for managing certificates of devices in many
   industrial and IoT scenarios.  To limit the overhead of certificate
   management for more constrained devices only the most crucial types
   of operations are specified as mandatory.  To foster interoperability
   in more complex scenarios, other types of operations are specified as
   recommended or optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-05'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-05.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='30' month='June' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-11'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-11.txt' type='TXT'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIALUb6GAAA+y963YcR5Im+D+eIgb8IaCUmSBAUheUuqYhEJLQRYpsgCpV
t0ajE8gMAFFMZORGRAJCUewzD7J7zj7LPso8ydrV3dzDI5GgVNW1s8PTXSKB
CA+/mNv1M7PxeJy1XbGY/VTM60V5kHfNqsyqZUN/a7v9x48/f7yfzerporiG
X8+a4qIbV2V3MS4W1XUxPm/at9W4aO8W03G5aOr5fPz4STYtuoO87WbZsjrI
8ryrpwf5R3dl+xH8Y1pfL4tp53/Q3l035UVrflA3XfgTmNCi7qqLqpzBDxc1
PdU1lR+mq7o5zO9stVzC23l9kdOcrpp6Ua/a/Jimdl0uurxa5F+env3xJN+m
/4wPj3ey4vy8KW8Ocv1JVjRlcZC/WpZN0VX1os1hi/KXxaK4LHGQ7PbyID/8
9uTlYf7919ms6ODT+4/397Ji1V3VzUE2hs/A/M8m+VdNVbYwXd6/s668uCgX
7qd1AwOdVThomx9+DT/RqcgPeaFlCQt91XX1+JviajE+rRaX+Se4l1V3d5C/
XC2q6RX8sykvYbKwjOKmaKqCNnsGX/3os71Pn3zOm79adA2883XZXBeLO/hR
eV1UczwtmtnkAmf2zy1/fQKHBY+smuogv+q6ZXuwu3t7ezsxv97VtX4zyb9s
6unbq2Ll1/tNuZg11dvgN/84a77i2U3OdXYfsu7jSf6iLBq35ON5VXf6I1rr
UdVO6/zsDrb42i7uFFbQVfCvom3L/FO3tu+L+bxqy/m8XLjlHH0z/uzJ46d2
OWe3VffXspkDacKPl1d0f7c+frqXP32af/bpZ/nncHu3/GrnMKV/nuJcaHky
/TeT/PuyWZR+AW+u6uui9T/9xzmvjmY2vqWZPeisFjUM1VU3JbKj06+OPvn0
k33/1yfy108fP3msf32290z++tmTTz7Rv37+Of30ZPx8Atznqmhmbb0QVviX
ui3HN/VqelU2+hBxykXZTevFxbj9a7ccT1v4ZbW4iCa0//ln+pGn+3uP/V/3
5K/P9j/dd3/9TB949smz/eBb8+J62Y7n1eVVd1vi/46n18vxsqkvqnmZeBJ/
u1oiB2t1jZ99/lQfBCIE6iqbcTEtx9O6WI7LthvXQEIND3Z8NP5k/8mzvfHn
+E/g9MyGP4Jf5PSLfJy/ruHAgMsT+efXjokSTwXSr6cVfH6Wu02pF3n5M2zu
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
7alezQEA

-->

</rfc>

