<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.6 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-04" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. There is currently 
ongoing work for a RFC8366bis. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request-async:agent-signed-data element
(defined in <xref target="async-voucher-request-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-async:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request-async:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request-async:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="async-voucher-request-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-async:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include this Content-Type header field indicating the
included media type for the voucher response. Note that this is also an 
indication regarding the acceptable fromat of the voucher response. 
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Note that using HTTP POST allows for an empty body, but also to provide 
additional data, like CSR attributes or information about the enroll 
type: initial or re-enroll. In the following the enrollment is described 
as initial enrollment.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module ietf-ztp-types with the grouping for csr-grouping for 
the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it constructs the
enrollment request as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 
can be transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certification request objects such as CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object. In this case it MUST sign it additionally with its IDevID 
credential to achieve proof-of-identity bound to the PKCS#10 as 
described below.</t>

<t>A successful enrollment will result in a generic LDevID certificate for 
the pledge in the new domain, which can be used to request further 
LDevID certificates if necessary for its operation.</t>

<t>[RFC Editor: please delete] /* Open Issues: Depending on target
environment, it may be useful to assume that the pledge may already
“know” its functional scope and therefore the number of certificates
needed during operation.  As a result, multiple CSRs may be generated
to provide achieve multiple certificates as a result of the
enrollment.  This would need further description and potential
enhancements also in the enrollment-request object to transport
different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certification request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-ztp-types": {
    "p10-csr": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*
Open Issues: further description necessary at least for</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)
*/</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field indicating the 
pledge acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The voucher can be optionally enhanced with the following additional 
parameter as defined in <xref target="async-voucher-request-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request-async:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jws+json” as defined
in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.
*/</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar and can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jws+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="async-voucher-request-yang" title="Async Voucher Request artifact">
<t>The following enhancement extends the voucher-request as defined in 
<xref target="RFC8995"/> to include additional fields necessary for handling 
bootstrapping in the pledge-responder-mode.</t>

<section anchor="async-voucher-request-yang-tree" title="Tree Diagram">
<t>The following tree diagram is mostly a duplicate of the contents of
<xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the 
registrar-proximity-certificate, and agent-signing certificate. 
The tree diagram is described in <xref target="RFC8340"/>. The enhanced fields are 
described in Section Each node in the diagram is fully described 
by the YANG module in Section <xref target="async-voucher-request-yang-module"/>.
Please review the YANG module for a detailed description of the 
voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-async

 grouping voucher-request-async-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
                  
]]></artwork></figure>

</section>
<section anchor="async-voucher-request-yang-module" title="YANG Module">
<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to 
include a signed artifact from the registrar-agent (agent-signed-data) 
as well as the registrar-proximity-certificate and the 
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-async@2021-08-19.yang"

module ietf-voucher-request-async {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher-request-async";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision 2021-08-19 {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
        
      augment voucher {
        description "Base the async-voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in 
<xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses-by-registrar-agent" title="Misuse of acquired voucher and enrollment responses by Registrar-agent">
<t>A Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2 can be detected by the pledge-voucher-request 
processing on the domain registrar side. This requires the domain 
registrar to verify the proximity-registrar-cert leaf in the 
pledge-voucher-request against his own LDevID. In addition, the domain 
registrar has to verify the association of the pledge to his domain based
on the product-serial-number contained in the pledge-voucher-request.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

</section>
<section anchor="misuse-of-registrar-agent-credentials" title="Misuse of registrar-agent credentials">
<t>Concerns have been raised, that there may be opportunities to misuse 
the registrar-agent with a valid LDevID. This may be addressed by 
utilizing short-lived certificates (e.g., valid for a day) to 
authenticate the registrar-agent against the domain registrar. 
The LDevID certificate for the registrar-agent may be provided by a 
prior BRSKI execution based on an existing IDevID. Alternatively, 
the LDevID may be acquired by a service technician after authentication 
against the issuing CA.</t>

</section>
<section anchor="yang-module-security-considerations" title="YANG Module Security Considerations">
<t>The enhanced voucher-request described in section 
<xref target="async-voucher-request-yang"/> bases on <xref target="RFC8995"/>, but uses a different 
encoding, based on <xref target="I-D.ietf-anima-jws-voucher"/>.  Therefore, similar 
considerations as described in Section 11.7 (Security Considerations) 
of <xref target="RFC8995"/> apply. 
The YANG module specified in this document defines the schema for data 
that is subsequently encapsulated by a JOSE signed-data content type, 
as described <xref target="I-D.ietf-anima-jws-voucher"/>. As such, all of the 
YANG-modeled data is protected from modification. The use of YANG to 
define data structures, via the “yang-data” statement, is relatively 
new and distinct from the traditional use of YANG to define an 
API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> 
and RESTCONF <xref target="RFC8040"/>. For this reason, these guidelines do not 
follow the template described by Section 3.7 of <xref target="RFC8407"/>].</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>We would like to thank the various reviewers, in particular 
Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='25' month='July' year='2021'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='24' month='August' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-08'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-08.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document aims at simple, interoperable, and automated PKI
   management operations covering typical use cases of industrial and
   IoT scenarios.  This is achieved by profiling the Certificate
   Management Protocol (CMP), the related Certificate Request Message
   Format (CRMF), and HTTP-based or CoAP-based transport in a succinct
   but sufficiently detailed and self-contained way.  To make secure
   certificate management for simple scenarios and constrained devices
   as lightweight as possible, only the most crucial types of operations
   and options are specified as mandatory.  More special and complex use
   cases are supported as well, by features specified as recommended or
   optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-12'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-12.txt' type='TXT'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>Addressed feedback for voucher-request enhancements from YANG doctor 
early review in <xref target="async-voucher-request-yang"/> as well as in the 
security considerations.</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-async to 
to allow better listing of voucher related extensions; aligned with 
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the 
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAWbJ2EAA+y963Ykx5Em+D+eIhr1g4CYmbjUhSTEVgtEgSRadWugKKqb
w9EJZAaAUGVm5GREAoSK1WceZPecfZZ9lHmStau7uYdHIlGk1NrdqdMtVgER
Hn4xt+tnZsPhMGvaYj75czGt5+Vh3i5XZVYtlvS3pj3Y2/ti7yCb1ON5MYNf
T5bFZTusyvZyWMyrWTG8WDbvqmHR3M3Hw3K+rKfT4d6TbFy0h3nTTrJFdZjl
eVuPD/NP7srmE/jHuJ4tinHrf9DczZblZWN+UC/b8CcwoXndVpdVOYEfzmt6
ql1Wfpi2aqcwv/PVYgFv5/VlTnO6XtbzetXkJzS1WTlv82qef3V2/ofTfJv+
Mzw62cmKi4tleXOY60+yYlkWh/nrRbks2qqeNzlsUf6ymBdXJQ6S3V4d5kev
Tl8e5d9/k02KFj59sHewnxWr9rpeHmZD+AzM/3yUf72sygamy/t33paXl+Xc
/bRewkDnFQ7a5EffwE90KvJDXmhZwkJft209/La4ng/PqvlV/gz3smrvDvOX
q3k1voZ/LssrmCwso7gpllVBmz2Br37y+f5nj7/gzV/N2yW88025nBXzO/hR
OSuqKZ4WzWx0iTP7fcNfH8FhwSOrZXWYX7ftojnc3b29vR2ZX+/qWr8d5V8t
6/G762Ll1/ttOZ8sq3fBb/5x1nzNsxtd6Ow+Zt0no/xFWSzdkk+mVd3qj2it
x1UzrvPzO9jimV3cGaygreBfRdOU+Wdubd8X02nVlNNpOXfLOf52+PljuFlm
Oee3VfvXcjkF0oQfL67p/m59+mQ/f/Ik//yzz/Mv4PZu+dVOYUq/H+NcaHky
/bej/PtyOS/9At5e17Oi8T/9xzmvlmY2vKWZPeis5jUM1VY3JbKjs6+Pnx08
2T/Mc/nHZ88ODt1fH8tfP9t7vKd/fbr/VP76+d4T/ennj589078+2ftM//rF
F/Ts6fD5yPDJv9w2w5t6Nb4ul8Fv52U7rueXw+av7WI4buCX1fwymuzBF5/r
h54c7O/5v+7LX58efHbg/vq5PvD02dOD4FvTYrZohtPq6rq9LfF/h+PZYrhY
1pfVtEw8ib9dLZC7NW7JfvWff/FE3wFaBSIsl8NiXA7HdbEYlk07rIHSljzu
yfHw2cHjp/vDL/CfIBCYW38Cv8jpF/kwf1PDuYIwoFuSzxyvJdYLN6QeVzCT
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
J4UdLowLLVBmmwsuREnrfXC4dXvhMOTdfHCX0emyup2G4WtkJLLLJ3QO3mmm
J4uhCkSX+PQsDgmYoIIz0BCZVUr1SJy7c/xmgQtCUgIMKft4VYFFYzmdVqO+
o+yVg80GFec3jEeo8zaLbXqbKLFEb82i5arGmIk5W83Y7CZfJWUUUZKCsEKX
upxeBVZsCmppuuDbRuWRwkSxFBS+t/C8Tkz4qFcrZyVyoqqZNZliIFJcvGkV
nPj+vYYOP2C5s5uSEi7o5hwLh0hW0t8JOmcF9bI0KPr+0Wq8Dyzw9TyoWAaP
u1XZ6mWbVr8Lbbugruf90chNyk+JMzmuVRxV4hX7zbnK4pIjLvdZqowPqfYq
7s821WvcCZotdFLTHpB/IFmAmXGCpFgNQeDJQfKGaomHuXyaTlIH4VYHwN7W
1exwRf50tHKUHU2benC/Z25RXV3d0Sel0G2tHmYD7MFYH7MpAz9qCcpcjAVq
FrWnkNlP6ysCaliGw8UOaL5AlpfVFcrnDyjo/xP+ZPnmfz4d9vz5NOv+9vmy
XuTn19UievZ3P+d/JHApWJd8XfTPzzjKz7/KXDYd5ef8ZW6Kd/jXHjSXn/Oj
3NdHy39+fTsvlw0s/YGjgOLHujP98+0SyWT50XMBZdi+9kt299OP293oz3//
Be/S7P/4se+6+X9KPxht+gffdRPmv4w2/Ci+K+w+MUSwv5/Kb+Mf0hDYJgEG
YCXOD4B/+VcwQ8yw+N/nzL3wz5dyXt2P41/eUCG34F2tLLLcxR+O/Itfuqtr
90Z/+jvbMDJ8Mfgi/XHyj37rJpHri+IG6r5opyr79N/dPm26wdE4yRfX/TEv
PoyifnZ/67DbLa0dwIJny6LihOwf8OdnxjeAnZSj+3zw0Nf5P/g6Or8GOc14
4+sSLtX+gUH6ObbbRffETeoJGgSIhgOefwD1O0Kp/vwlP0ju1qP0+nQQeOQ4
/QjR9KepX4WDPGA5ySceurHpP/6At5za1aUklvTvD/NHTgPg1mH//MmR1fBr
tfRXUp3cKLd+tE/ALCBw77CYgsD6561pedluSY53kRwv1j7CBhhNMUurLmxK
uaxKm+TvVaGKU05NyYVgDhR3r2cu9UPH52zXoJgOl7FgW9IpWs69GTc60KQj
r5WnsbWbhY0zh63gyrw0A59cGJ6tzsprqagGR7vAzwuMb0e9dKiHau0G1ylN
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
9LHufe2IxsSpwnNHQ8HKKwmszAVgsdo1xz8z+olrwe6S7QUYLmhfX91AWJFX
vm3NwKiqUMZND1NVOE6T/b8pqiyGiitTEEX58RmwUBd0DJ18cwP1NzC4GJqF
NcATsOkkEXh+7/E0WYgV41LcQLRVo2Xj2rqbGWp1GM1d7aRQiFmZyEiP80IP
vHfmreVcLuWf19v49XkLpRhzs7ti7uAjcCsCDmMbwkuPc+NvGJg2Z0FnuUlm
OxWsbw9v0d4v62WJEfpBoJ75cprBOEy0YOtNV4LhuS6dqPQKGi3BXVs7L8G1
9E1nDfTPaeVwaFc1wgZdDetoqQaGUyn37snZN90jeypIM0uHj3dJj/YrVkX8
m35slWdZg8X8A3L8iNTiXyWz+FdJLP5V8op/lbTiXyWr+FdJKv5Vcor/FinF
vyCj+GdNRv34xGL8MKXn6lpiFAX+e8NkSQf6+Nn8r/5tbVpqIpu1Zwx7AmHO
8Y3+rDOG06ZkDLvZP0f/lb/DGAGO5ucjYmF+HjZ3OZW6/PMGa7E5zIkU5nAM
jqz47GWJtNh0Zp/NvM0g453N54F/wsTmeD82G8P+8lNzSfhcgtTon6Uw59qz
DUe8fx7BpxOX9VOb+JykdTNiIj/X7Ue+5o8dQ9paUbTMOBQeNAb/OVL2teN/
sekY/RLh3jEemsO79s/W87V5vQeb5/VG2sXH5/MebJDPa3tUakavUyJjVcw3
l6l8apGUF+rUQXZJW91e48nBqVEY1jd94erYdOszp7QvuWug8mRBvV2HledV
LVdzypAldwS3s6JVUCRJ8pMysBlBt3cNrFCH45ZCU2pCkf600+SXqHxmVCL6
rsGPgRL6DhWu00tbqAub3rI955G9jEg31cvi7ZH+KJI61cAZSXDONm5BI9sa
l2puccPqTjGfjupJET7bk00MxaV+ZX6VpY7ApNzZiGC3iZEo4zY/iTTcqF0A
NYmi73J/mrjc+JKLeoXw9/zbt2/fdLpMqLFbXJXq9fUY57Z+V84bRxa+9i16
8rE39xjW7RrHaa+GTXJpwrzmIt8er5q2npXLndzgqDlthvYkiLFjmNx7brQ0
mr+YvpWvFiPvM9463WT4xDTrJFEwmwz5rgHlmhvmXfPT9O0h9xkdRLePH7XT
yf025q/pLnbn4DqD81xWXCKNzwTDnT2nkmvN5VStuUKrzU00KGp3iXLynPVO
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
Z4BfR0AdE8fgZfgwm8XsN8JGIBPs3QEA

-->

</rfc>

