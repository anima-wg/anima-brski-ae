<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.6 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-04" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request:agent-signed-data element
(defined in <xref target="async-voucher-request-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-trigger:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="async-voucher-request-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include this Content-Type header field indicating the
included media type for the voucher response. Note that this is also an 
indication regarding the acceptable fromat of the voucher response. 
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>[RFC Editor: please delete] /*
error in v03: HTTP POST allows for an empty body but also to provide additional data, 
like CSR attributes or information about enroll type: initial or 
re-enroll. */</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it MAY construct the
enrollment request as plain PKCS#10.
Note that the focus here is placed on PKCS#10 as PKCS#10 can be
transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certificate request objects from CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object and sign it additionally with its IDevID credential. The
pledge-enrollment-request should be encoded as JOSE object.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Depending on target environment, it may be useful to
assume that the pledge may already “know” its functional scope and
therefore the number of certificates needed during operation. As a
result, multiple CSRs may be generated to provide achieve multiple
certificates as a result of the enrollment. This would need further
description and potential enhancements also in the enrollment-request
object to transport different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certificate request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-sztp-csr:csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-sztp-csr:csr": {
    "p10": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: further description necessary at least for */</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field indicating the 
pledge acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The ietf-voucher-request:voucher can be optionally enhanced with the
following additional parameter:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jws+json” as defined
in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar. Now the registrar-agent can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jws+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="async-voucher-request-yang" title="Async Voucher Request artifact">
<t>The following enhancement extends the voucher-request as defined in 
<xref target="RFC8995"/> to include additional fields necessary for handling 
bootstrapping in the pledge-responder-mode.</t>

<section anchor="async-voucher-request-yang-tree" title="Tree Diagram">
<t>The following tree diagram is mostly a duplicate of the contents of
<xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the 
registrar-proximity-certificate, and agent-signing certificate. 
The tree diagram is described in <xref target="RFC8340"/>. The enhanced fields are 
described in Section Each node in the diagram is fully described 
by the YANG module in Section <xref target="async-voucher-request-yang-module"/>.
Please review the YANG module for a detailed description of the 
voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request

 grouping async-voucher-request-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
         +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
                  
]]></artwork></figure>

</section>
<section anchor="async-voucher-request-yang-module" title="YANG Module">
<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to 
include a signed artifact from the registrar-agent (agent-signed-data) 
as well as the registrar-proximity-certificate and the 
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-async-voucher-request@2021-08-18.yang"

module ietf-async-voucher-request {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-async-voucher-request";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>"
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision 2021-08-18 {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      augment "voucher-request" {
        description "Base the async-voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in 
<xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses" title="Misuse of acquired voucher and enrollment responses">

<t>Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2: can be detected in Voucher Request processing
on domain registrar side. Requires domain registrar to verify the
proximity-registrar-cert leaf in the pledge-voucher-request against
his own as well as the association of the pledge to his domain based
on the product-serial-number contained in the voucher.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

<t>Misuse of registrar-agent LDevID may be addressed by utilizing
short-lived certificates to be used for authenticating the
registrar-agent against the registrar. The LDevID certificate for
the registrar-agent may be provided by a prior BRSKI execution based
on an existing IDevID. Alternatively, the LDevID may be acquired  by
a service technician after authentication against the issuing CA.</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>We would like to thank the various reviewers for their input, in
particular Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='25' month='July' year='2021'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='15' month='August' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-07'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-07.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document aims at simple, interoperable, and automated PKI
   management operations covering typical use cases of industrial and
   IoT scenarios.  This is achieved by profiling the Certificate
   Management Protocol (CMP), the related Certificate Request Message
   Format (CRMF), and HTTP-based or CoAP-based transport in a succinct
   but sufficiently detailed and self-contained way.  To make secure
   certificate management for simple scenarios and constrained devices
   as lightweight as possible, only the most crucial types of operations
   and options are specified as mandatory.  More special and complex use
   cases are supported as well, by features specified as recommended or
   optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-12'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-12.txt' type='TXT'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>Addressed feedback for voucher-request enhancements from YANG doctor early 
review in <xref target="async-voucher-request-yang"/>.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAL7QHGEAA+y963Ycx5Uu+D+fIhv8IcCqKhAgqQusdhsCIQltUmQDlOVu
HR2vRFUCSLOQWVOZBQim2Os8yMxa8yzzKOdJZl8jdkRGFgqU7PacOVzdFglk
RsZlx75+e+/xeJy1XVHP/lzMm7o8yLvlqsyqxZL+1nb7jx9//ng/mzXTuriG
X8+WxUU3rsruYlzU1XUxPl+2b6tx0d7V03FZL5v5fPz4aTYtuoO87WbZojrI
8rxrpgf5R3dl+xH8Y9pcL4pp53/Q3l0vy4vW/KBZduFPYEJ101UXVTmDH9YN
PdUtKz9MV3VzmN/ZarGAt/PmIqc5XS2bulm1+TFN7bqsu7yq8y9Pz/5wkm/T
f8aHxztZcX6+LG8Ocv1JVizL4iB/tSiXRVc1dZvDFuUvi7q4LHGQ7PbyID/8
9uTlYf7919ms6ODT+4/397Ji1V01y4NsDJ+B+Z9N8q+WVdnCdHn/zrry4qKs
3U+bJQx0VuGgbX74NfxEpyI/5IWWJSz0Vdc142+Kq3p8WtWX+Se4l1V3d5C/
XNXV9Ar+uSwvYbKwjOKmWFYFbfYMvvrRZ3ufPvmcN39Vd0t45+tyeV3Ud/Cj
8rqo5nhaNLPJBc7s9y1/fQKHBY+sltVBftV1i/Zgd/f29nZifr2ra/1mkn+5
bKZvr4qVX+83ZT1bVm+D3/zjrPmKZzc519l9yLqPJ/mLsli6JR/Pq6bTH9Fa
j6p22uRnd7DF13Zxp7CCroJ/FW1b5p+6tX1fzOdVW87nZe2Wc/TN+LMncLPM
cs5uq+6v5XIOpAk/XlzR/d36+Ole/vRp/tmnn+Wfw+3d8qudw5R+P8W50PJk
+m8m+fflsi79At5cNddF63/6j3NeHc1sfEsze9BZ1Q0M1VU3JbKj06+OPvn0
k33/1yfy108fP3msf32290z++tmTTz7Rv37+Of30ZPx8YpjgX27b8U2zml6V
y+C3ddlNm/pi3P61W4ynLfyyqi+imex//pmO/nR/77H/65789dn+p/vur5/p
A88+ebYffGteXC/a8by6vOpuS/zf8fR6MV4sm4tqXiaexN+uFsi6WrfOpzr6
Z599/lTfAUIECiuX42JajqdNsRiXbTdugIyWPO7x0fiT/SfP9saf4z+B2zMr
/gh+kdMv8nH+uoFDA05PVyC/doyU+CqQfzOtYCaz3O1PU+flT9Oror4sadAc
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
hcOQ9/PBXUany+p2GoavkZHILp/ROXinmZ4shioQXeLTszgkYIIKzkBDZFYp
1SNx7s7xmwUuCEkJMKTs41UFFo3ldFqN+k6ybx1sNqg4v2E8Qp23WWzT20SJ
JXprFh1XNcZMzOvVNZvd5KukjCJKUhBW6FKX06vAik1BLU0XfNuoPFKYKJaC
wg8WnteJCR/1auV1iZyoaq/bTDEQKS7edgpOfPdOQ4fvsdzZTUkJF3RzjoRD
JCvp7wRtsYJ6WRoUffdoNd0DFviqDiqWweNuVbZ62abV70LbLqjreX80cpPy
U+JMjmsVR5V4xX5zrrK45IjLfZYq42OqvYr7s031GneCZgu91LQH5B9IFmBm
nCApVkMQeHKQvKZa4mEun6aTNEG41QGwt3U1O1yRPx2tnGSH87YZ3e+ZW1SX
l3f0SSl026iH2QB7MNbHbMrAjzqCMhdTgZpF7Slk9vPmkoAaluFwsQOaL5Dl
RXWJ8vk9Cvr/hD9Zvvmfj8cDfz7O+r99vmwW+dlVtYie/d3P+R8JXArWJV8X
/fMzjvLzrzKXTUf5OX+Zm+Id/rUHzeXn/DD39dHyn1/d1uWyhaU/cBRQ/Fh3
pn++WSKZLD94LqAM29d+ye5+/GG7G/3577/gXZr9Hz/0XTf/j+kHk03/4Ltu
wvyXyYYfxXeF3SeGCPb3Y/lt/EMaAtskwACsxPkB8C//CmaIGRb/+5y5F/75
Qs6r/3H8y2sq5Ba8q5VFlrv4w4l/8Qt3de3e6E9/Z7tBhi8GX6Q/Tv7Rb90k
cn1R3ED9F+1UZZ/+u9unTTc4Gif54ro/5sWHUdTP7m89drultQNY8GxZVJyQ
/QP+/Mz4BrCTcnSfjx76Ov8HX0fn1yinGW98XcKl2j8wyDDHdrvonrhJPUGD
ANFwwPMPoH5HKNWfv+AHyd16mF6fDgKPHKUfIZr+OPWrcJAHLCf5xEM3Nv3H
H/CWU7v6lMSS/t1B/shpANw67J8/OrQafqOW/kqqkxvl1o/2EZgFBO4dF3MQ
WP+8NS8vui3J8S6S48XaR9gAoy2u06oLm1Iuq9Im+XtVqOKUU1NyIZgDxd2b
a5f6oeNztmtQTIfLWLAt6RQt596MGx1o0pHXytPY2s3CxpnDVnBlXpqBTy4M
z1Zn5bVUVIOjXeDnBca3o1461EO1doPrlKbFfZK5e2ZIeiE1ES0IoJEdDFaQ
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
zeILBO5/5TvWAQA=

-->

</rfc>

