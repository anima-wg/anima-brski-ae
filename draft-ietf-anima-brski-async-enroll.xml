<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-03" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request:agent-signed-data element
(defined in <xref target="yang-module"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-trigger:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="yang-module"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json</t>

<t>The pledge SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher response. The media type
“application/voucher-jose+json” is defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTPS GET on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it MAY construct the
enrollment request as plain PKCS#10.
Note that the focus here is placed on PKCS#10 as PKCS#10 can be
transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certificate request objects from CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object and sign it additionally with its IDevID credential. The
pledge-enrollment-request should be encoded as JOSE object.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Depending on target environment, it may be useful to
assume that the pledge may already “know” its functional scope and
therefore the number of certificates needed during operation. As a
result, multiple CSRs may be generated to provide achieve multiple
certificates as a result of the enrollment. This would need further
description and potential enhancements also in the enrollment-request
object to transport different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certificate request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-sztp-csr:csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-sztp-csr:csr": {
    "p10": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: further description necessary at least for */</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field received
during the communication with the pledge, indicating the pledge
acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jose+json” is defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The ietf-voucher-request:voucher can be optionally enhanced with the
following additional parameter:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jose+json” is defined in <xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jose+json” as defined
in <xref target="I-D.richardson-anima-jose-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar. Now the registrar-agent can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jose+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="yang-module" title="YANG Extensions to Voucher Request">

<t>The following modules extends the <xref target="RFC8995"/> Voucher
Request to include a signed artifact from the registrar-agent as well
as the registrar-proximity-certificate and the agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
module ietf-async-voucher-request {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-async-voucher-request";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix ivr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>";
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision "YYYY-MM-DD" {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses ivr:voucher-request-grouping {
      augment "voucher-request" {
        description "Base the constrained voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}
]]></artwork></figure>

</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses" title="Misuse of acquired voucher and enrollment responses">

<t>Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2: can be detected in Voucher Request processing
on domain registrar side. Requires domain registrar to verify the
proximity-registrar-cert leaf in the pledge-voucher-request against
his own as well as the association of the pledge to his domain based
on the product-serial-number contained in the voucher.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

<t>Misuse of registrar-agent LDevID may be addressed by utilizing
short-lived certificates to be used for authenticating the
registrar-agent against the registrar. The LDevID certificate for
the registrar-agent may be provided by a prior BRSKI execution based
on an existing IDevID. Alternatively, the LDevID may be acquired  by
a service technician after authentication against the issuing CA.</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>We would like to thank the various reviewers for their input, in
particular Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.richardson-anima-jose-voucher'>
   <front>
      <title>JOSE signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='23' month='June' year='2021'/>
      <abstract>
	 <t>   This document describes a serialiation of the RFC8366 voucher format
   to a JSON format is then signed using the JSON Object Signing and
   Encryption mechanism described in RFC7515.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-anima-jose-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-richardson-anima-jose-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='29' month='June' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-04.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='22' month='February' year='2021'/>
      <abstract>
	 <t>   The goal of this document is to facilitate interoperability and
   automation by profiling the Certificate Management Protocol (CMP)
   version 2, the related Certificate Request Message Format (CRMF)
   version 2, and the HTTP Transfer for the Certificate Management
   Protocol.  It specifies a subset of CMP and CRMF focusing on typical
   use cases relevant for managing certificates of devices in many
   industrial and IoT scenarios.  To limit the overhead of certificate
   management for more constrained devices only the most crucial types
   of operations are specified as mandatory.  To foster interoperability
   in more complex scenarios, other types of operations are specified as
   recommended or optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-05'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-05.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='30' month='June' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-11'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-11.txt' type='TXT'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAOlV5WAAA+y963YcR5Im+D+eIhr8IUDKTBDgRRJKXVMQCEno4q0BqlTd
Go1OIDMARDEzIzcjEhCKYp95kJ1z5ln2UeZJ1q7u5h4eiQTFqq6dHZ7uEglE
ePjF3K6fmQ2Hw6xpi/nk52Jaz8uDvF2uyqxaLOlvTbv/8OGXD/ezST2eFzP4
9WRZXLTDqmwvhsW8mhXD82XzthoWze18PCzny3o6HT58lI2L9iBv2km2qA6y
PG/r8UH+yW3ZfAL/GNezRTFu/Q+a29myvGjMD+plG/4EJjSv2+qiKifww3lN
T7XLyg/TVu0U5ne2Wizg7by+yGlOV8t6Xq+a/JimNivnbV7N869Pz/54km/T
f4aHxztZcX6+LK8Pcv1JVizL4iB/tSiXRVvV8yaHLcpfFPPissRBspvLg/zw
5cmLw/yHb7NJ0cKn9x/u72XFqr2qlwfZED4D8z8b5d8sq7KB6fL+nbXlxUU5
dz+tlzDQWYWDNvnht/ATnYr8kBdalrDQV21bD78rrubD02p+mT/Fvaza24P8
xWpeja/gn8vyEiYLyyiui2VV0GZP4KuffLH3+aMvefNX83YJ73xbLmfF/BZ+
VM6KaoqnRTMbXeDM/tDw10dwWPDIalkd5Fdtu2gOdndvbm5G5te7utbvRvnX
y3r89qpY+fV+V84ny+pt8Jt/nDVf8exG5zq7D1n38Sh/XhZLt+TjaVW3+iNa
61HVjOv87Ba2eGYXdworaCv4V9E0Zf65W9sPxXRaNeV0Ws7dco6+G37x6OFj
u5yzm6r9a7mcAmnCjxdXdH+3Pnu8lz9+nH/x+Rf5l3B7t/xqpzClP4xxLrQ8
mf6bUf5DuZyXfgFvrupZ0fif/uOcV0szG97QzO51VvMahmqr6xLZ0ek3R08/
f7rv//pI/vr5w0cP9a9P9p7IX7949PSp/vXLL+mnJ8NnI+A+V8Vy0tRzYYV/
qZtyeF2vxlflUh8iTjkv23E9vxg2f20Xw3EDv6zmF9GE9r/8Qj/yeH/vof/r
nvz1yf7n++6vX+gDT54+2Q++NS1mi2Y4rS6v2psS/3c4ni2Gi2V9UU3LxJP4
29UCOVija/ziy8f6IBAhUFe5HBbjcjiui8WwbNphDSS05MGOj4ZP9x892Rt+
if8ETs9s+BP4RU6/yIf56xoODLg8kX8+c0yUeCqQfj2u4POT3G1KPc/LX2Bz
55clDZrDIM+KtqAX4DhnSEvCl5tyDCff3uJ3CmD8X8JVuT3H7+kv3pa39qPw
DRl0YeaVl//XqlrgA5/Qb5WP88fpBpzMW6A7+mwxhVtejttl3ZbjK5zMND+C
eVVNA7+ll1Qm7H0+fPiEftKUyFlxkQcyAdgk2CrZvxw//PL49Gh4dPJ6+PDh
k+GTYEt5VWd+uTID+Lr/6Wv4xqxsy2XfIl6CcLzKD2fw3LiY56fltCrOqym+
ewTXblxNw9k/Gu7t98wepnmQ0zyJEI6Ph1883B/tHZ4G08Zf5PILnmeZPyuv
q3GZn0xgu1Gm9872ZN7AMKu2RHnO66W9Rjrwy0fpflnNy3LZhJP/Yvjwae/W
Hx8jz5GJ4d6fnL0aIj3vPdmDN/cjej57tYs0Lb/MT+tikl+XV9V4WjYw3T/x
X4fA/b5dVhOiBkelTDoXcIccOROt7sN5lO1NvXzLV2GxmOobcGFBaaqnwC6B
MJdEus2GpHmG+hxwpuqvPNar5SUwKPnH7h10LDPMe+n58ZCkUHJTeZNgu3Sb
cMavjl6/DjYTtKp5fgS887IE3lDBnXytq90fPRzt5dvPUMvc6Vutff8QJGUx
l411c/wSqTYbDocgqVC8jtsse3NVNTnosSviApOyGS+rczi7cn6FA9AGI5md
13WL7ywWKMAKOIAZ7A6zkzJDZgJLBokN6vG4RWpmNXKQv3snAuL9+3wHVN68
mDZ1XpMKCSr1HD4OUgxY1kVZwIs4+hx+v8zr+fQW9mZWwn+m1axCXgjyYg4H
U13jzTwHIilBF6jm1/X0mn47W4C0hxmPsm9WcKOBMwTrAPUVSei6msDTMBWY
BPJWEKClKL+wvmVdgESGiZXz6wpuEr06QP34Boj5ih4GrZkuH/59MS0nsOXM
mGEZy3oG+zOeVqgQ43qRJK5hKqOcNlsfxHcrJDo4ByTBGcj7qbye8aDDal61
IAXq5RB/S7sn3xsuywYWi0IIfwVj13kjWv553V5lK9CdxkVTwtRVfYdDg1nB
cc7p4ypMyCoAekK2MyaRA/LtAuTavIWDKSdZff4X2PQm326qyzkeUjm8QUqA
J+VXO3yqsJl0M0EaEpWABjZBRa46X9EP4EN82nmzKMfA48ZAccT0xuUSeR5+
Hg7vDcxuUl7gx92J5LB1xeW8hqHHqC3hTYYhcSEw+LT6KzxbOnMmc5wClMb6
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
P3l+OJXSkmBE3cot0nVovJui7xjFu9HibhZyWc7Q2xApNcFZcKXA6YGcx4B2
bl7e4I84J2+Ht9D707Sai83e8YOnHPwMUvMBBqxtwm4TCimCXSxyOqrwdSAJ
uCCrVII7OTuuJ7HS1RHUVmeTKmT09qkWpDo6O92RiK9iZ0y5Kxw9LO1FbxNy
yJYNaKfNEA4Pxsyvi+nKYTXJdhD9AL7EUk7lF8+w+2pDoQpJonaUlJOTGt2d
zVXxtqT8U/xE8FN82ddb0QJVru6nN2oiU9EXZwDmJxBhOpx2YIRrxLiUAm0s
ub2y5cLcuzhJEZ0+96txAN2KK7s5JLBoAyg7mJici5KqVfoiOb1HFS/ZQBr8
HZ4Wt+VyQJ8Wt4X7tq1w5O4VOYbOTl36mb9OAcY6d4pJ/s1qym6z01CFakQz
i6NeB1JXovRTYW5ks8UkV9VOAHjXEizr7UXRNJj3s5OLMtczy7h2G67KIXjw
PZqYVBd+wXPOX4nly0s7enHmdoZe2aZ1YP1sCgiFCo7bQ6+w2akpKt2zJTgs
moP6mZcSrGeVSxjUiJ/x7irn+1qij9gFWZSxX+iHUyxdleUXr52ujDFHeyD+
MGigex4IS5N8owMBmtFtF8Zk9dw1DK9P4BieaStUoto7cqyVat6obuTv54jZ
T5IHiOxNztfbJumyJsw+ivEV5rtO/K1hauA3TWYkORvhQ6+9YRH4XSStwEq/
nHnqiE51czLRk1or+R29HDG9YD35/zR6Se4wX0v5GlwosnFgXDlu42bAyxxc
X3r1Oyq2Q0wMVnnqj42ZHFs2ih2lyEmjNk6XRyYP1ar/SdUYd9edG728wdn1
XW/Pks4R0S9n1ME6pXEUkqmR1fPLmhbI4S0a4vDoOP/hW1wMx/c5CUhjjKIQ
ophR9g8vZq/Ojl6dHuNLIupJ+aACm2F4UbEo4nGBcSQA6BIE3r27q7cAEKYY
B2EFQLVxqXWEppMeLuFK4udWGKd/dY3O/vKGdIYQxXPs4ozvHhT+pRIB3z1u
TVsRhSQ4OmUlG9AOYQvlsnva1kCuXJnxSRfhQigTyZJxeTdczEWxonv59utU
neydA6sVqRspysbUerco1x3eyWXbSAXdZNZyLrk6dg+leHfN1wff5OXyzzWg
quakFILgSWvRKDteuM59t86w6DesU+6rsxTJbLMlonuSwUlhhwvjQguU2eaC
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
FKy8ksDKXAAWq11z/DOjn7gW7C7ZXoDhgvb11Q2EFXnl29YMjKoKZdz0MFWF
4yTZ/5uiymKouDIFUZQfnwELdUHH0Mk3N1B/A4OLoVlYAzwBm04Sgef3Hk+T
hVgxLsUNRFs1WjaurbuZoVaH0dzVTgqFmJWJjPQ4L3Tfe2feWM7lUv55vY1f
n7dQijE3uyvmDj4CtyLgMLYhvPQ4N/6GgWlzFnSWm2S2U8H69vAW7f2iXpYY
oR8E6pkvpxmMw0QLtt50JRieq9KJSq+g0RLctbXzElxL33TWQP+cVg6Hdlkj
bNDVsI6WamA4lXLvnpx90z2yp4I0s3T4eJf0aL9iVcS/6cdWeZY1WMw/IMcP
SC3+KJnFHyWx+KPkFX+UtOKPklX8UZKKP0pO8d8ipfg3ZBT/qsmoH55YjB+m
9FxdS4yiwH9vmCzpQB+/mv/Vv61NS01ks/aMYU8gzDm+1p91xnDalIxhN/vX
6L/ydxgjwNH8ekgszM/D5i6nUpd/3WAtNoc5kcIcjsGRFZ+9LJEWm87ss5m3
GWS8s/k88E+Y2Bzvx2Zj2F9+Zi4Jn0uQGv2rFOZce7bhiHfPI/h04rJ+ZhOf
k7RuRkzk57r9yNf8sWNIWyuKlhmHwr3G4D+Hyr52/C82HaNfItw5xn1zeNf+
2Xq2Nq93f/O83ki7+PB83v0N8nltj0rN6HVKZKyK+eYylU8tkvJCnTrILmmr
22s8OTg1CsP6ps9dHZtufeaU9iV3DVSeLKi367DyvKrlak4ZsuSO4HZWtAqK
JEl+UgY2I+j2roEV6nDcUmhKTSjSn3aa/BKVz4xKRN82+DFQQt+iwnVyYQt1
YdNbtuc8spcR6aZ6Wbw90h9FUqcaOCMJztnGLWhkW+NSzS1uWN0p5tNRPSnC
Z3uyiaG41K/ML7PUEZiUOxsR7DYxEmXc5ieRhhu1C6AmUfRd7k8TlxtfclGv
EP6ef/fmzetOlwk1dovLUr2+HuPc1m/LeePIwte+RU8+9uYew7pd4zjt1bBJ
Lk2Y11zk2+NV09azcrmTGxw1p83QngQxdgyTe8+NlkbzF9O38tVi5H3GW6eb
DJ+YZp0kCmaTId81oFxzw7xrfpq+PeQ+o4Po9vGjdjq538b8Fd3F7hxcZ3Ce
y4pLpPGZYLiz51RyrbmcqjVXaLW5iQZF7S5RTp6z3qkgQZQ3oh5PzBD2qSB9
Npw4Dv1E0CWFBlnJKYdFMFHtbtYCF7gkr7C83zm19OdlmPRL3GrznDP4fFk7
GumwWfeG4zbOQWn8BJo5GWMT7IwGAXqAOn5Szyt8NYw42xZ3OLGUlwNpwhUj
9VyGJqVl9PmzNsk4oD+3xSxnNQiKX3y1nHA3u6CrII2AFjRlIGlDbxfdkXLH
qT10rbepPaZG2mSGQ3EVDm0lWOflw3g3P2ac61EzmAG1o0MXnW3TrbOZda59
7CB0/dj0lkkNXMfG4dpN33YPt0HYCO56qb2s9bgCJ5Jze6/1z7jNC1mMuUd4
7yOXawx+8Bu37VKch1R40KQ8SbzB+zy54AkHLT+NvdKmgVEReagRK8B9Cnkp
WR4uvJ9x9tbYjCnH14FofDe5GJKTKFMhXMbFE5clHDRd4YAbDTQkM1lRoYk6
KNxi+hg1bTF+i7IRHsTHyOVJwaAwBzq1BrlmTRacL2YLw6zaMua+BsnRSAFO
X94gonzaz6633ItAVH+omTAFdlbTtsKYo/YZD66NZkImqZ3wEyhblZFo73I8
8L6FR5Jb+3h10/mzbrkIdzLntzF6a+mrb8u7Tga40pq9mb80U+3uKcETU/jy
XrK+aLgozUY1T3P2GXP0wbqRnciHh7Ugb085WQ0z+K0x84z9sV6tWbPGPke1
jQeeU1Ipl+9EP7zYGGkLZGDUDDuI0wGV+foawgkFOtS72XzK8i4Xt+wRIQS+
vVk3F5CjfuwnXlXNVSrc5vI7ewyPqE6Fc/67lMoPKNFjyZNCt7TQotWKJU71
S2s0WuI4UDaYl8ENiE6TsEvcvo2vlCAC4+JAPZWAbCWS1fQCNDWFqSbWGdQB
WqcZCYyxxyzAdTsp4PBKiWpAWd4JbFHSopa6jUSPqYKLGAFBvGpgzhzKoIdD
+eruGnKKaMgJH+ydi2fKvXtSumxEymoTVwqXjUREUFw3YALum7Wyhy7f0nJi
3uvvOUu3ygGoEq6skvPrZ1JkYceV8lhTbYGwfwL4zQoVZgN/QqTMdk1meGr8
lhhPrCE6vQ9Oijrw5m5Yh1BEFnQpSIxfsLXyrbkqvoeq/zVchB+xnOAxTKCG
G7CYUhdsLDrelj/lu//10yx7tQC+eYJfbMKKTJ2lP3r6FFOBuXcdGegw3AWy
YXQPIjNFcNdqppLAZ1tj12f0uRDs19Xoz6wvwQ2C88VP+UZR1xWifPP/+ulu
ln31T8Nh9mP+b4cvvx2CZcjVLMgpNmcsDnXHdelK9P6spvYW3HuCOrZxojpM
Fz+2TWO47rYIK8Xd2BllP+DN4tJKBX1S0Y9yQnIprZGa/1A6oEk151B+TgAi
aS+kCnN0kIMMzWBxAs1lG+V6o5OqZJ2fcMugfM0bBpJjuZAh7S6nfZeETr1y
l9Lb3lr6pclvqFEYAlmByuGogC3f8KQHOYZiW/oaECmXpLgtGCgyJiD5OZUo
8cPxThygBwwG4aGLWak1INypGtfGTYeIcbW8PVQnG/0efuI8plwBFYON7Cm8
iKBKICB5HbcMAW+29UTTN4bOR17gA9qKZrdFcCuy8gQ7vwADBKOz9I5eUQVl
iuSlD6K38XKOwpuaYrh/TvhTrOryoxdFNY0qf+k1IpWzIA6oh4VtoUf54dvi
AIVf1RJCF49FqQu5oALTVjPiaPhrdIu2Qkeeagb+zFtSJG+klRyqk0zp/wXv
Ao4yrblSCn6IboRcQlA/Juho3XUeVjZrXJ9lHgjOt76in11h2SxkBnB2/h7J
pNCBSW4htGC3K3xoervjieicDAJW/WQgKquPW33FjvIr5IrUC55P+ZfWUKP7
DAoHPIdpPb8cYb89n53hGIIQNRX6WjWiymHihlxBTGMoQhpyt4OcnR1yZHCf
p133+DWKuOgCNHDQ1H7xRqmGJ/QXVIEF4uFEjHTpefP1s/zk8OWhislbfzmF
+1J6RjFnh8FiWRFUdFlctK6KJB47i0SYLJjMD/a+yF6L/OBqEKw/V7PiD1XZ
Xozq5SXyD9JHfN9vslLFaXpzVU+dooPS6adsOPw9WOhbh9GdIzYIky4wWu7P
DZXffMtczcwgITsXV9kp10/QnicCsnOPDb3ctLhZvFFOheixYbK4AqIYAoL8
5QocCTWXCYC8M6zPkMqgylSkGSjvxUo1BnCqvecrqq2akd2tqmQ0QuCmE6HM
WHn6ONs+26Ao7+THx53UjCtiLevSS/qTS7rwakS+kPGGUG1qLittD3w+sa3H
phu/1U3/kvG2tDq/LDoEpA0stVivT4IknKpNvqTMN25vnR7cPUVKjRA3Ku9p
1r9Twd6k/ZfY4tA0GXxjY2TEbYox5h/A1qw5NmwRZemP0yUMZdChEnTQpXOE
Sveov4IQTjyJ/szfPeCf/1wu3ndggV3XXOCQYPhj5rz4JhTJHVkJeHWH/5x6
KLdXQbUrhxuNfbLr/bAWk4n4YmrWpNlB7kJ6h4GkPlkfFhJlOBEkulXgLBpl
z1auSQ8jytIeCPxhp9VH0opF/iMWfAgzdI5vsJJ/Xo33fyb36BvX/TVZ8C45
ETk055X2uDRfdpIDlDQmKCNl4GSIAPzny+ZttYXYbTjhslNV2ECYlx66HaVq
0W0yijhF3rpf2U3TwoGSlvdkZrn6MiPYr8CJwcic2yBPPORo/QS6FLd2Dl1/
6AilW2Ia3YHvmInM+0CQo2y+quSDGejy0dspFUrXbwBT+cbrdx+WGl25v03b
hqnt9E/AeUns4jeaxdEh1XBxU5B/89Zr62rNW2cgfJctxkpBGsKrFkuAsfAX
RcQALi1zYiqoB36PyEPGRQ0JcUE+vY0wqYo8zfrLWZ2E0QvrL9TO2XdESpI8
K3AdX/UD7X1CG6+qF1FvomiefWvVS6aMzLk3te5z6IBLiReF2YSPGvYXt+L1
hdmtKa68StOoHbDY8UgKsKMB5FKyFfkirQHaMLDu22+JBhpSmvB9IxqnAbe/
F2mtlyn7rhTpHZETl08qEZRibjSaw8t2J+vxmadjbalgTUZxd5SqtN3h8Gwb
Ol1TxZbplJz1JhMkdDcUR/guJ+cN8T5Fnbx4itEkrNb24vuzNz7xPjtbEYH+
sbw98cnC28Arnu0Yz4D6KV1GlqrDZm5o5l3yrC5JifbXdBTXymb3k3fMZbbl
uCmhGqv1dNPevTs5Pj4efvFwf7R3eAoaHoWSXCFkfAXnHyXgSxtyzeRu4woL
3KaMTHKtOxABgxQDNRCLjzYF9uGiuBYmndmNBgUCxCwVqCRKpHbW1kkLF2fF
jhwUIN9rFb3nvjF3dNSdGo3I7TGEzgyCIi/W/e7TEv2V+6RJtWFuNHqv3uTM
fzpPEZhRIiNa8+GprEPQ6InxYSQKqXT889r1ciKRpMwH6dKhJTZzsfC9V19t
li5l8lI4BSvYHjYexkuSa20IMiVqsg34l3Q9lWZ8YYDJ1nVn9h+U5ay6/N3M
InPgBEn01UsSnS6fks7cR9vusQZH3x37sWqyQKiwyvwvr86OXczWogR1oSGh
JOGbdvWeMS7IwQ13ACzNYjqcr2bn2MY92Fatt+HpCQN0CsTzSLegmP7EQqB0
HHGWdKQy3c/Zs5dnvLeE1pPggT2wsH5KxhDROMKceyySlCcJYvvoj5D0MRGe
WZSSNaBaFXmDfhYhseQu2WEz7fX6r6c5dgjHWUkjEuA/h3pLoiCei3M8GT2y
eE+/QR4AYakqQG12EV64HhiEjaluWwoZJTamRZzEyEm7d5W4lykM4+oMdLJ1
BaKDintIlwcUqbdwWHSjLIqKa5PIw0v0hxhufxAV60mrDzjAmT2e7WbnIH1w
8BtPlPAPjkt3CJwsBVtv1pN0j/PClLolVQp+3yl526e/K3KtnpdxQdrMkowS
a+aEU65x+UrzgzfO+cuM+nXo87XVgZ7C952XJkzvr45UPOhdnn7XlnPqP0re
+dcaPb7nti8WRd+2exxmPAioxBIyoSYoDswDTGnI10ez4jy4k87l6edPH6Gi
hD6vF4hlGqO/DF7L9Nf7VPXCTYad13KV2/x//ff/O0mlI7Jzh2KA/NyOFyOq
IjX6X//9f9Di1B0MQoJSRFBj4TpTVzXMYI7gB3fxGQ3Iv8/snd5OftwpqNxZ
ndypW/eb5hYZ+ehIJ5//OVCsbEC/9w+ZM4sBr9RyFRpvHxHDM+AqD0bpN1vU
v8tld0gRLWahXGAsmbJIFTokifoEgPcmhDAS40GMMLSm27v7+8+SQ38VZ0UH
Hu0eb552sqCKKgtxuTPhGsSgsTJRYroOI1Lse5nNS8pf8djCqmx2THkk9cmJ
k1OQ+gwiB6OU+oGxFeO6e1l+4tDiR/Xh60H+9XRVtjWGY5/XN9kxWLOXt/n2
18+Pd6ioxMuyWALng4M6Cuz57ZffHGkavVokWZwLbx0aaR0z5c4wCCLqvu42
DAT0irvjvFHBN9ikWzRsMj5/kK8DvHrkXaZdpO7Ike4i4Xpo3jmgPIP1UbKA
CW/3RyF2QtB2bPRhAJJ2z4ft6NIM7wjMbTHopJobRthx7atxKwUJ8QJHuDwf
r0FnkpOA+Iw0qDOniuFqrSxkDIPI6RDYmB1h16PnIMnKLbwo2/FVP3fzHccx
jKQ2qCvOm4XlMvoLIXTThHqPv+s18CXdsl7937WOqSegCfDbfj6hTieGwB1H
RIQLfMWLlXDCNwVe5W6oTt1vWg142pNAYRIPfIKa80PZYw1Jmh0XQNAU43MV
D3tyAIC/bfkdJZpmYh5lkRNGiKeGWyBVPFlMFxVVnLqulvXclc9qigtQOGCH
bqoJrHsT9U335cQBJ5n9pMmB/FJEnIkDDHYnMBTW+K+UQhCjAdJZCx/E1BZD
CHFb1D92x0wCu2PexjlS3VgNfokiHzi11XKuwdMm+lLosiOviJSRrOZrDh+l
JtxZXV30W92Q7MN4IR4rOYoJJ6ETUSf6loaBt5DXbME1AtmGhbEcxtaEyAcC
i3Joch8F1yLghsCyfrlyknRB9exdtzBr56JksNLrRHg0CXWgg0TdMYly6MxE
p+89OD2lSmRyXbYY90pad9i0NwInC2EizWqMzhCstnsbLUSONgFxCQ5bUu5u
qqZ03SH5VUMGmSGDUYD4NOo2R8SqFPYl60s5zFIBAeC6YMDY8sUujVlK93i9
dlICFUzLbosmmM25ujt8gRPbZaOTgR//4LPkP6K+I1ENg05hBP9v/odUPIm6
hvyau5oL3aYj/KK0G+F/qGkYj+KItdt25NfcVBDgfxCkGZ/9SPvip+//JIp9
JJ44IUcvqFC/Zj8mHHk/6dBoq3FB0o2H9v+QQcKy3R84SDBGql76JoOsfePu
QX4Mo/8ptEq2Jm3QA01+cjuTX7+RMT98Z6TlGfZU+c/aGf4PLKf87cuRSnq/
ZTn/ET4S/fOuJ/4j+1FVzZ6DJuC4rdzxU3obhfLJDEgS7iZnAe+bE84/bBD/
1x8ZnSb+ov/yU/eJTQZRPZ77gn7YIO5HcqujZfJ+fQh9/lj+0lJiDAuCk2c9
x3PHKNSAEp3xYIihabP5KL4FkbYj9OxvDaUET/89+FlI5qmMzk0pfWivbf6B
lJ6YPzeTSBL+5oN8NTTFcYabDPKVXU+z6HKzvynXUV2P/Iu2O4KDV4nrkbJh
LWTRCxZLTB8scvPrMx77w0XuV0Ozj79hJuVvncnHPh1Br8Wp0PJTqtgg+uTf
VjjACOaYPtq9GyILGGlUwfHA/D4smZlad4h+Nmj+/qP6le7Pftf8c+02lh99
G9cO4tvRJAwyrVL1Si2xNJ7bvbphoxprpOUNWI+dRtqhG93FGLKgmk5bH2RS
tSEqDICVThtBLpCTtjHGIwUjIkBIunRH7AYzn/Ju3o8wfiLfI9qPLO+4GqJM
3wgDIr1lTkOco8JXddKhVf2hGyPuGXV6C2wyD/LChajdtkkgt4znYJ1GiaID
ibgEB3HX0sB2PM5QZr4TR8h+3usQq+2dxNWNTMuizgQFGWtikIaAOMwQheBt
Pnz27l03xvzeu0spaKkTHK+4QlWnUnV/NIhjdgaH2g+Sf/fO52ggUvM15uvN
JXlM7p0WrBJoZqnQpXQlleihuD0SkT4VWYCDj5xwGDDyWLdO9V3XjNhGLHpI
V3xpJt7ioA75WhyH3x78QQrJkQcYyb6gBx4/ZQpTWg0htLgSVVgixbQ7Zpoa
Bbv6Qfu5y35pt5M0JHIPOxpiZ/wjTb6tiqD2gn9b3g4o/Sh3OTg2mGeA1OmJ
Of8O5gywX2w3zMin3NwKtGSH43yeGokC431thVN/ApdWqo9w6k/gk0s1/U2/
ZDx7m79kHHkftqa7P2K/N+SkkXu+1XVr8wCoaOV3OKe81vXrcMMQRvi4daan
p9d5XHrAueyM1OMbL15GJ1VtzRrVcQD6eb289wavqQ2mjUJ1nxPWsjXx9aPb
5Wzhq6r2L+xD9mG4xtv4UfYhHHe0RmXdU4VVtQGxTtcrAf1aq68RF+ITJNlq
TRhPQXIscBHCcpa/fnX2RsW1Cl7n9GCJnEp460lF2+rDZKQnhD3ucAff3C40
ngqTBEFuIPK7f2nq+YEW7siL/F/OXr00qJzaRb/bq2VZYg+yYlaCkkogzA3v
8wGpM08fDymZPcxPxapNYIiG+JCRH9xd5zWDEP8UWZUFneDCDK1Pu3ysM+q/
/HA2dIBVE3yvPU4g1H1jrmPxCiL0DFhBe/skY4qJKDd3psjCtOzON6sWsUJx
sTbfdDIL0kq5enCHt1JigsGDi6/H9B703YLMeAc8ntBX30rcQEw308sD/B8s
/Hw1Y42I2lfZTHW1X3SX6ADfVpODcFLR+SWhBa5iUn+kF0/7jSBT7l4FVqjB
wgadZNHuK9LyI9sOauZg5RS0pFfT8v37HVGumcdMhngjCVkhn2N8K+0NAi5d
XLqa4Zrg9zjaAf58CD8fUt4/nw/tWaCMJkZOKq0ZFypF1iFFKnorHg1ILWSW
uz96NNrjyHGoA3u8YnOn+t2N+f/5yf5DxmC/5CcIxudNZM2O6cK5nSEveuM7
kkhbQHxbB/nW8dn+k6dbXDR0C2gLf8YEJfREZTX++Z+3svf05lbq0IcimbuH
D8PJ9/zR4if2H+7vDR8+Hu49ffPw4QH+397o4cOH/64zCXYDX8BqImX5+PO9
vS144r3MJs/PTr59efjm+9Nj+ImTkUUzUaF4rP3XLrrE3CsDv19QbQ5poGgx
BD4QxSsOUr6582rmUMMO6BUeRQ8gLySvLCioRTa0pNKcl1KWhSTVsJoPgWMn
x8CUs+Gz0bICjWE5ATE3pIIkw7/UjZuEy0gM2VfPTM++O3z+PLg6niM6wZi6
J58/2YOF/EbW98uT8XrWJ+fQvQsp3rb+MGIekXnnSLBQ25I0yQ9dSKHJ0szj
IGZ8wQq1/XPA87iA3nqeN8dCn2YwYN3L20VbX4LlfiXFeYBMa6wFjNVGZlwy
dNGUq0k9lB85MHaHh959DH28jdUQrVoTjeSb4Pp9kyf1DNfucuU6aIqPw2Qu
unNr7qe6ESlYdC4X51y3A/3AX3hx2wGiisbbjo6o0gjXXu2tI8zCqaAU60jk
7fiGAsMEIZzltp5yenppxfRFcbtmDjEWMY9LslQXd36Ujj5ojiqXjupssR7h
nGQpEnH5NA2XNUNwYFg0o6uWCGv0KY6C1/WFPDT7rpuc6tupwoqAc5kTlpmT
pslsdxQI54Rs3oIR4Ec/br04Ofl6/y9HR6PRaHIIYvmndXJZr4VK4TuF8L4R
wlvEQfC58lnz2We736yeffft9/PTX14+Ot57fPSv8HF+bp2s5ifcHcbfxig9
eWSz29irnthRQv1js+fXj363yrG4XiZUjrSMWRsx2sSUrSJNYQMpD/cqsnv1
C/jcZ2gE2+9rF3mXcT/Ptw4JvrKlmgLnkZjqmyglGeJCOUGUr876s95LX7pC
e7XiF/2D2dbaCW59yMLhar3CBJaUX/yKagOgmhfELDqso5JkK+FLoV9EwGUl
V6bsKVlPGdyu5yvFLvqKeLMZ+vqPR2cP9h4OTBlQFNjMf0RESM402eiKTZZE
9Kkdv6hmje1kULg6F7ZGAZjYoS+95dbI0vvaMegAxz/azGGU2JeUs+jb49/i
K+p+5A53UWJWCY9RlvYYZZm0cs/JzUiq5ShpOpjPpK0G0anZaDA57qkJFnek
/iu54bKPzk5dJRGM4mGZCaq/RqxpXf21qGqdHLn/CtWJHeOTYfwpLGRldC/v
6fGyk8l34KfkSgyYdPpR9l1JiWGBYwbLwZRUjp8FWtgegLT8oOtTSkmg3UmY
SyRI52WL0bJh89d2MRw3zEfuqhYcFAs+LU2xiWZ1PsTqXayZ6KAH8P/crJIK
AWfan4SS/VptacA7jxIFM6doDVLu91ncb3lcLAppUx21IoHhXhz+Wx6YplmC
BaFFM+Vq2cR/wuwbjcBqCgQ8Oubjlsfxff0rBx0zSvjzuTrrm8NzeYDjszcD
bYl9NqB6TdgWG0gtrCLeOOp2BWalGIkfO3P9phXyP6UmHpeyqLCEuSvJqK4m
ReH3MWvJphX4QtFma2mIn5NSI0F+FKb5pHrWB30dYEswS+XoxdEoJatDv8Na
FiJnlBk/J95Q3KJA3hCLw6yvjn7LPVr7P+JzvtUIgM+aK3zf6xTSOichmmSv
QVg8/2I1xTJlDF3I4xqWXDeKKWcLBckWrdGTgjRZkhRWKcqAA4h3LjysRnob
aXMlV4RhhC2GiozzvAe+GwdwHoeIUO1hYiMNxfiqAip1b2TB1wrunYaDurRc
dwDiK+JytlRr+2K1xEVkAaYDzTzX2Dowq6TjcI/YVopBieAyef2dxpUJc1rP
TYlYYalLzy+waD59HMkcJwh0jmtNXQvxc0TYgxtJEzfVZirp2OErqeC1C1gc
dfVoTUU1Gb3JiBn52Zy5Tuxh7EI/G7mDqiXhENZMP62cbKaV0DqKTLEuupau
rgLKcDJA0UEe/2/s5OvXyw3vpNWC4g1s0a9yGyctm7tj10zcuyPMnVHSQ/bc
8m7v4foV6mF2HPhvrspYDerxSKTqZUmCcGYDEarZGSKl4zB5Zr1uinQMYTNH
hd01HyNY7D38LSZ4ucYE71JArxX+g2IMfdOjOxz3Us+2Xxryg+kM4gakGcMS
s2SR2UQNl/u1rRABEID6PD90AVmkaOLcSKN/4mLqjPhqi7cwHJdv8KEmlzms
ykSebxPHTEe0qLElbcNLuFtUjSJ0i7ZYGQzRVNkdFrs/ljVufJTdd51HQ1qD
ZO82eZy5SYpnU84ngWvaITz7+gdS6i539MC4NxX/uEcNyQF1XVMEB+qF8mFR
AmesiyDKbe79j6iMi/UwYAWTa2ZhZ6+s04qn0xfMsw8q3tJNaE42Pu3v7ebq
O0XA4QQeJUxy6YJTtYBLuIhkIY9NCzKh8lTOHEYhCcRNH5MZwzSaDZPbpRJg
LThxusfcU1OrSjU90NIPgo9ugB0lGurARtscVV+tEXxXkSmtvx+3ZsvyoIjU
IOe+2Aja3YX/P3uWLD6K9xg/OqZSM738dX0Rcge23m527gsUdYJB0Jg4mxCQ
2RgwaSee85+OJvUVmO+NJg3xQQk86fD+SeIfnhj+4cngvzkB/N7r7EHyJXJN
bJJ3h1UZzvJT9mN8M9ApOsp/usfH/D8sWvJ+6U0f9qUPSZD9oITYD0qAXZPw
Gm0Qb9KalxIJsne91P1RX3bspm+ns2JTCax3ZsHeP2HVswzuWxMJ9oiKga6V
AyWzWPEcwrTVD6TR4BxTWarp1NbeRPf+l9akU/p7Z1NXh5ukrn7E1LX9GAds
OnEo60lpSOH5RHqW9gRcG7LseDBcjxr0VIWVuDz0zdbH9J5caj3TwdeRTrJq
qK4ljrc3ekSd6eblDfYkJNTHuF6hW3cyyuWR/VyfwAdOj//1+5PT42dah7Bj
hlWT0r0ajC4ugnNTl7UzCHfk0u+iq10LJ64fMvOlXmVIlFP9o3U6x9j6pcnC
19wInvyJE9dHl9T5SGcUiGjHnAnbjZ4EvWCDHC/2a0dF/8La2ZEMjHVlY7SF
2ZYUZUrnYYYmm/Rj6hZmCmuT4fb2tK0ahSRNYQyJEXe88kE8Q5op98G8RvmZ
Fp/GCkbRNlExfv2MLUntzW5fVi1L6ckJK3c7Ojs3ZGKI7aMXZwKcIFzhTu+g
6g3rcV96g7m/hEdAZ7nGUU3CgJzW2qivjKcQl9Hm8AlTITxNbiHOYDMY5QYA
i3y7KUtMMrzG5yXWxL0IUPHDD5I92Le1ESYDdygNylBMQyYRCQkhxs2PgwBh
gONQCJ+BcwQ7GAE6hiGgI/5pFrz7t8F4uLj7olviNV0HzRMgObwzbUhL66Jy
YEG34W7nuYQrHIugmcLj+GrYIqa3umTeXGHuuUlxSABOmRtk/Sv7AGCjxbjm
SWM3rPBYzhFIEE2e8Kim7+6aWqHGldYHaQwZMM3S7YuEeiQDz3VqW19IM2ga
IX1OJ5w4QJcIce/Wz22QhxpzDovzwbtBbUgdKU5L8V1mopbVXZLE+CW2/vO1
JIOuHHjuOcX9FnWDjt/bj4PEDJoPwlr9kto7T4FBsHP2xZot1qYcFFLW06Jm
gNegPWKxV3R8uPiZC7YThJkdboXiHgwMJZEbfyNwGCzZz98knO51Pb32LD4P
dVr0eMBCaSpS5h9UsLi8qvBa+bonLCrM/Pjh46xcLtGFTSpIuuRfCFdIZcth
wGmereYk1iQqSHxhrvIQPvU0N5/CVPqaixtrZ9JRvByqlFhOmpjDkI4hJrdR
KNSdBqv4S63FktldE8b41jC2qNZvG3QPWmcFSB2HsCKAfil7MnocfQmj+vW5
hOrUrRYm8sfCMwZYeYjQXfUys56kCsPQ31yZfrb8IVPmIMgl+yCx1o3b9s72
Hz1u6w/k+Uah2/6F/m+QotGt55DIfA4YY5jUsaj4YGZrOMx9szbSyRr5JuK4
L4GuIyDvSlPLYW+wI7LUhQhDiIo4XrNmnG+gZFWty9+AJ4qpMuvEyKn5Wu1E
St73obrX5rV0sllMpovRt/N8O4LH78R1nk35edJDbDFn7BJEOE9TLbejy3K1
XquuBZWpuym4m+TdSIURkyMcpuGE1zOVlHOQVGeOflNSCQmX5PqHVlklxUIi
UUG+d2nOq5O3oPuyBosRs7ztqBbJIGPQ6sdCZPxnJI7sHzz6/ODRl6P9R0/+
UxJH1lWT/rtlfyyT2R+9vH0zb2qAPeiTheJNIUpPOFKEP3+AI6X/k3+3VJSO
Nv43yUYZfpxslI2TbR22hc5MXDV3HXPVbuil8BLMlI2LK255Tf5Jt4tt7KJI
s20fWwi1XvQtmi93BOq663o/78Ub3UL0j0t3+Tz3fSKYIgIp3NOpgCy1pkam
YNQFQqg25Jpz1orlyrGVG5inSd0g7emI1mAnz/YsBRzyAB88XyuYZDmK7Oik
f25W/4BRBkY165xlXLKg6+tIHLYv90eGXt8IWVzJLN7RVMNYORJ41yVlWWEe
wIIrLY7h0qnIDYSzXpOoqfqZ2c4dNfSpYETvqeTSWol0vsFdBJOofhG5QhKI
n6DFR8ofpQjQvNNdQbZArXEsnOJ/SpgwV2NR6mJE1ykqX6O+j06dFnWd6QU3
rRzwDjgKz4HnwHZjssbUbyvqK9Kcgfp1+LYNSZ+OGTzlzxFRuc6Vw2TmH+Bc
uLfoQgkNes9Sn3acI1/903CY//nPf8Ywd8Y1ZWZwNRr1okq5Sh7/8cNHA3Qw
4f88HdBtebz3RIRynECp1mTVcIMwcW26C7o658ybjKVlICypvWeg+uNGfdJI
A6UVRkOattBesJhIs2Bni7dfKQeIQ4A2uuViG/0hu7tka+hT30yvwF3gvhzs
mGluCSlSjaV3BqHb5HFN/TZeJ37I19549PQpnt67d7gvQ4rZYHNvatNRei1P
pa4mpTu/1H3R0m//enR0+Gatfh7r5ZtoyBvo2Rur7L2GwOepDHJQzqs5sUnu
kqZKNi528QwWC2u9WadfewVbjiChZHNfIuZXsjtr1Wt63mvWrnAEXwF/hVjL
imKVo/zwoqX7l6gNE5l8mOBTogmB8Gb7GF0OSp4psCm5a+B1SZ6r1XJRN5zl
U6/a6Qb8JdKVYXjfCl6/ifwOhtNm952FuS41a9bXA1/Xrcxc5kEiatzlq88Y
DQuf8EjaKNfOuspRZhT5srhx2RFOEWAcdhe40MSRAIf05ZX4nBlTrMGa2L5R
XqQ7aNZpN+siEweXUdYovXUI/+fSW8OjxYCwmAY/XFF1VByUciDX7nciKbHT
fOj+JiGMsttQOiUPr+bgXVlJycSjWCgLt3QJU35TjbiOrb6sNwZj5PIoV42j
G2bJKMyS/+YwyyHi2VamL/BYUxxhhkxnUnLGttLOJZ9ju4F5YS0QtKIIm88A
xt0At+vxvlQHZUUOQnRg3+4IDki3o/RKDKgMvAqzH1kmzTy1xyx80Lc1dqAS
BR+gvds4YARHBR4+evj+PekrdpSkDVhw2nq3NXGDhKwg56LxxmSUu2fgICat
t7gplia/L4Smoe7BxjBzyKIHICQ1AXEAk5G9tj0ePYERq7BtpKsArq3e+yJ7
8yjT9VMkTpt+YGz+xMVyhC43DH3weMfi6+W92wY2kMi0D8O8XTUx9Cd+Svyu
c5Sm5Z8cR0/FOh9X76SimUl0jEkzCbYwOMGfXThsaUfhybDaQOANyfL1CBA9
E+o0J/HSmPtoAYFAVpjgTHIBFMDCXpav9x5uBZZkOvWNlAFN0DIXqpPXKz7q
gDxs2fv75YT1njIpLRXNRhz4PcuHafvCJ7mHj/oeqGz/+SIi5Mwg4pAyWmJd
HnEdf5ZrdCDb+ON6WYFCBGzGp5dZuBvvjs9bdg11/aagYsCP+ELj0ULQAGiX
9W1YOiVRI8MTVFgZw9TMGOhqTO41+SIk5H4KCqya25rShQd3aIM16zIAcWiG
CVLqd3DJpINjZIZrS1jG48xVNSy7bXR7FEKj4VhJEVpvi7fj5vPhrJqVffVW
GJV5kyPAjdpoW2XMVMPsJJKBkLhJakHov9C+DglXbrZNEo7jP1Xhk0p2DPEY
vivW9LbbxSxIyAlL3mjv9fG0FhM+AjfIXnaloS+uRq8pHjMYHpOZ6G7Khmcu
HB50tWis91mTs6zGb2xY14vbMmD6/ZP9Lx6S5qn5esnOGfdoJfHot7WSwLQw
hnc4AFK0aqe5dGnlpKX7ATQ8pJxaudOJC+Vgy7Vri+x/PMiklITwQU1vs67Q
zVpYoBelweqx9ZIec4HazK3iolo2bX9v5jBN0OpfjP2OUyXf351JaN2waSDG
pu0F7ttZ4L5NBe7bT+C+rQQ+rItAmGQ11Dui22rG3Ly8fFBZHgeNOl2ZfCO4
e/crK4/PaKpgMKpfh64hMCjl3v22dfCInWX8xnUEo67JiHnkM2JkNaRoRF15
Eml5EVu6V/KLwWeEnbYp3+BG0yHGrelIEyYnBGZSj9/XVMgSM5AtQLLwveLv
StGAKgoPUUCbmlrfWXG/T5THkranxv4dsdNuZXUPkPHmlQlKgDLnna7VRX4J
9tOcTVXnnQ2LIgUtys3oKaAhetVGe51QqDjD+rA05sjICFuWCy2ZVGhDqJaK
n7fL23yG9RZUdCQwlZ93wgaHjfOjc30aV7WA5J8M4uEnEUFYWz2LrUI0VljN
kBWoMh/sl1wxaQeQGf2FC5TNQxmtS+xtgf3GPn0lUaT+5AAkl61BAKshNSaV
g4T7it55IYprnDmeoSvSUCDZCUqgcUAlTclw275D4l9Srmpft2xcsO9AiOG3
VUKRl4CaGvbc76mnnvZ76wDMqVJ+xDPfOtg6UV5yDXu3mlFaUjERcANt/Fbw
ChUFLH9Bj/s7mKCjha0cJoopPlt3oVpoE3tLqsRCypH6WnaZkjF/O2bmv9bH
z0SWrGVnN84tm6E3y3jHkOoSdewGTk3tGFSttrkLki473lNvUx2g61ucYECZ
VM0qAWoIPFghIHrgywhaB8wVloG4l9/goOt2Du0FLqzWMGph3nEH62PKIuPu
H906IrZ3HDknRScPyo8ZlyQnGqjNe16v5hP1iYuui2WbXKU4LUImIOdUM9HM
5bsULeP11ctaNHEWDBOxM5hNdRsJt3vMgRRJ+3sKmC87YPq/rYhRn9gaMdPZ
8H8YEfP8bhFTbihiXPHNpEDJUgKlK04CYfLk6eqvoTCJRUlHkNxbjNxfiCRF
SLlehIT2wd0S5B51oYzqzWWegCGJj6ZDPbnjzQFciGel1ETcIHjN+U3euEsY
GxcJ10nM5bpOlMe/3YkS7oXMqiel2HlO7Oqz6J3OlvU4rgndpRUqbJckg73Q
88YhSLn/G/o5us2ivfkb7EfcJuf/a+VwnOvjH7sczuYv+X/8/cvaaLkX7uD7
oV+6swv32q7bv6kG0FCrlcgK/nabdd+X+t01j1VOfB2WIAlZ6r2cMaQ2WZ4e
l3SMfWIp/B9mdvAcNHJq6xsICkBYILFOV+7L6XWgtmHxj7rlZM3emIFFbqBE
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
/WIKlcwBAA==

-->

</rfc>

