<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-03" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request:agent-signed-data element
(defined in <xref target="yang-module"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-trigger:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="yang-module"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json</t>

<t>The pledge SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher response. The media type
“application/voucher-jose+json” is defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTPS GET on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it MAY construct the
enrollment request as plain PKCS#10.
Note that the focus here is placed on PKCS#10 as PKCS#10 can be
transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certificate request objects from CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object and sign it additionally with its IDevID credential. The
pledge-enrollment-request should be encoded as JOSE object.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Depending on target environment, it may be useful to
assume that the pledge may already “know” its functional scope and
therefore the number of certificates needed during operation. As a
result, multiple CSRs may be generated to provide achieve multiple
certificates as a result of the enrollment. This would need further
description and potential enhancements also in the enrollment-request
object to transport different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certificate request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-sztp-csr:csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-sztp-csr:csr": {
    "p10": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: further description necessary at least for */</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field received
during the communication with the pledge, indicating the pledge
acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jose+json” is defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The ietf-voucher-request:voucher can be optionally enhanced with the
following additional parameter:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jose+json” is defined in <xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jose+json” as defined
in <xref target="I-D.richardson-anima-jose-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar. Now the registrar-agent can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jose+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="yang-module" title="YANG Extensions to Voucher Request">

<t>The following modules extends the <xref target="RFC8995"/> Voucher
Request to include a signed artifact from the registrar-agent as well
as the registrar-proximity-certificate and the agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
module ietf-async-voucher-request {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-async-voucher-request";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix ivr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>";
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision "YYYY-MM-DD" {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses ivr:voucher-request-grouping {
      augment "voucher-request" {
        description "Base the constrained voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}
]]></artwork></figure>

</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses" title="Misuse of acquired voucher and enrollment responses">

<t>Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2: can be detected in Voucher Request processing
on domain registrar side. Requires domain registrar to verify the
proximity-registrar-cert leaf in the pledge-voucher-request against
his own as well as the association of the pledge to his domain based
on the product-serial-number contained in the voucher.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

<t>Misuse of registrar-agent LDevID may be addressed by utilizing
short-lived certificates to be used for authenticating the
registrar-agent against the registrar. The LDevID certificate for
the registrar-agent may be provided by a prior BRSKI execution based
on an existing IDevID. Alternatively, the LDevID may be acquired  by
a service technician after authentication against the issuing CA.</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>We would like to thank the various reviewers for their input, in
particular Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.richardson-anima-jose-voucher'>
   <front>
      <title>JOSE signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='23' month='June' year='2021'/>
      <abstract>
	 <t>   This document describes a serialiation of the RFC8366 voucher format
   to a JSON format is then signed using the JSON Object Signing and
   Encryption mechanism described in RFC7515.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-anima-jose-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-richardson-anima-jose-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='29' month='June' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-04.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='22' month='February' year='2021'/>
      <abstract>
	 <t>   The goal of this document is to facilitate interoperability and
   automation by profiling the Certificate Management Protocol (CMP)
   version 2, the related Certificate Request Message Format (CRMF)
   version 2, and the HTTP Transfer for the Certificate Management
   Protocol.  It specifies a subset of CMP and CRMF focusing on typical
   use cases relevant for managing certificates of devices in many
   industrial and IoT scenarios.  To limit the overhead of certificate
   management for more constrained devices only the most crucial types
   of operations are specified as mandatory.  To foster interoperability
   in more complex scenarios, other types of operations are specified as
   recommended or optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-05'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-05.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='30' month='June' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-11'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-11.txt' type='TXT'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAC9T5WAAA+y963YcR5Im+D+eIhr8IUDKTBDgRRJKXVMQCEno4q0BqlTd
Go1OIDMARDEzIzcjEhCKYp95kJ1z5ln2UeZJ1q7u5h4eiQTFqq6dHZ7uEglE
ePjF3K6fmQ2Hw6xpi/nk52Jaz8uDvF2uyqxaLOlvTbv/8OGXD/ezST2eFzP4
9WRZXLTDqmwvhsW8mhXD82XzthoWze18PCzny3o6HT58lI2L9iBv2km2qA6y
PG/r8UH+yW3ZfAL/GNezRTFu/Q+a29myvGjMD+plG/4EJjSv2+qiKifww3lN
T7XLyg/TVu0U5ne2Wizg7by+yGlOV8t6Xq+a/JimNivnbV7N869Pz/54km/T
f4aHxztZcX6+LK8Pcv1JVizL4iB/tSiXRVvV8yaHLcpfFPPissRBspvLg/zw
5cmLw/yHb7NJ0cKn9x/u72XFqr2qlwfZED4D8z8b5d8sq7KB6fL+nbXlxUU5
dz+tlzDQWYWDNvnht/ATnYr8kBdalrDQV21bD78rrubD02p+mT/Fvaza24P8
xWpeja/gn8vyEiYLyyiui2VV0GZP4KuffLH3+aMvefNX83YJ73xbLmfF/BZ+
VM6KaoqnRTMbXeDM/tDw10dwWPDIalkd5Fdtu2gOdndvbm5G5te7utbvRvnX
y3r89qpY+fV+V84ny+pt8Jt/nDVf8exG5zq7D1n38Sh/XhZLt+TjaVW3+iNa
61HVjOv87Ba2eGYXdworaCv4V9E0Zf65W9sPxXRaNeV0Ws7dco6+G37x6OFj
u5yzm6r9a7mcAmnCjxdXdH+3Pnu8lz9+nH/x+Rf5l3B7t/xqpzClP4xxLrQ8
mf6bUf5DuZyXfgFvrupZ0fif/uOcV0szG97QzO51VvMahmqr6xLZ0ek3R08/
f7rv//pI/vr5w0cP9a9P9p7IX7949PSp/vXLL+mnJ8NnI+A+V8Vy0tRzYYV/
qZtyeF2vxlflUh8iTjkv23E9vxg2f20Xw3EDv6zmF9GE9r/8Qj/yeH/vof/r
nvz1yf7n++6vX+gDT54+2Q++NS1mi2Y4rS6v2psS/3c4ni2Gi2V9UU3LxJP4
29UCOVija/ziy8f6IBAhUFe5HBbjcjiui8WwbNphDSS05MGOj4ZP9x892Rt+
if8ETs9s+BP4RU6/yIf56xoODLg8kX8+c0yUeCqQfj2u4POT3G1KPc/LX2Bz
55clDZrDIM+KtqAX4DhnSEvCl5tyDCff3uJ3CmD8X8JVuT3H7+kv3pa39qPw
DRl0YeaVl//XqlrgA5/Qb5WP88fpBpzMW6A7+mwxhVtejttl3ZbjK5zMND+C
eVVNA7+ll1Qm7H0+fPiEftKUyFlxkQcyAdgk2CrZvxw//PL49Gh4dPJ6+PDh
k+GTYEt5VWd+uTID+Lr/6Wv4xqxsy2XfIl6CcLzKD2fw3LiY56fltCrOqym+
ewTXblxNw9k/Gu7t98wepnmQ0zyJEI6Ph1883B/tHZ4G08Zf5PILnmeZPyuv
q3GZn0xgu1Gm9872ZN7AMKu2RHnO66W9Rjrwy0fpflnNy3LZhJP/Yvjwae/W
Hx8jz5GJ4d6fnL0aIj3vPdmDN/cjej57tYs0Lb/MT+tikl+XV9V4WjYw3T/x
X4fA/b5dVhOiBkelTDoXcIccOROt7sN5lO1NvXzLV2GxmOobcGFBaaqnwC6B
MJdEus2GpHmG+hxwpuqvPNar5SUwKPnH7h10LDPMe+n58ZCkUHJTeZNgu3Sb
cMavjl6/DjYTtKp5fgS887IE3lDBnXytq90fPRzt5dvPUMvc6Vutff8QJGUx
l411c/wSqTYbDocgqVC8jtsse3NVNTnosSviApOyGS+rczi7cn6FA9AGI5md
13WL7ywWKMAKOIAZ7A6zkzJDZgJLBokN6vG4RWpmNXKQv3snAuL9+3wHVN68
mDZ1XpMKCSr1HD4OUgxY1kVZwIs4+hx+v8zr+fQW9mZWwn+m1axCXgjyYg4H
U13jzTwHIilBF6jm1/X0mn47W4C0hxmPsm9WcKOBMwTrAPUVSei6msDTMBWY
BPJWEKClKL+wvmVdgESGiZXz6wpuEr06QP34Boj5ih4GrZkuH/59MS0nsOXM
mGEZy3oG+zOeVqgQ43qRJK5hKqOcNlsfxHcrJDo4ByTBGcj7qbye8aDDal61
IAXq5RB/S7sn3xsuywYWi0IIfwVj13kjWv553V5lK9CdxkVTwtRVfYdDg1nB
cc7p4ypMyCoAekK2MyaRA/LtAuTavIWDKSdZff4X2PQm326qyzkeUjm8QUqA
J+VXO3yqsJl0M0EaEpWABjZBRa46X9EP4EN82nmzKMfA48ZAccT0xuUSeR5+
Hg7vDcxuUl7gx92J5LB1xeW8hqHHqC3hTYYhcSEw+LT6KzxbOnMmc5wClMb6
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
DQUrrySwMheAxWrXHP/M6CeuBbtLthdguKB9fXUDYUVe+bY1A6OqQhk3PUxV
4ThJ9v+mqLIYKq5MQRTlx2fAQl3QMXTyzQ3U38DgYmgW1gBPwKaTROD5vcfT
ZCFWjEtxA9FWjZaNa+tuZqjVYTR3tZNCIWZlIiM9zgvd996ZN5ZzuZR/Xm/j
1+ctlGLMze6KuYOPwK0IOIxtCC89zo2/YWDanAWd5SaZ7VSwvj28RXu/qJcl
RugHgXrmy2kG4zDRgq03XQmG56p0otIraLQEd23tvATX0jedNdA/p5XDoV3W
CBt0NayjpRoYTqXcuydn33SP7KkgzSwdPt4lPdqvWBXxb/qxVZ5lDRbzD8jx
A1KLP0pm8UdJLP4oecUfJa34o2QVf5Sk4o+SU/y3SCn+DRnFv2oy6ocnFuOH
KT1X1xKjKPDfGyZLOtDHr+Z/9W9r01IT2aw9Y9gTCHOOr/VnnTGcNiVj2M3+
Nfqv/B3GCHA0vx4SC/PzsLnLqdTlXzdYi81hTqQwh2NwZMVnL0ukxaYz+2zm
bQYZ72w+D/wTJjbH+7HZGPaXn5lLwucSpEb/KoU5155tOOLd8wg+nbisn9nE
5yStmxET+bluP/I1f+wY0taKomXGoXCvMfjPobKvHf+LTcfolwh3jnHfHN61
f7aerc3r3d88rzfSLj48n3d/g3xe26NSM3qdEhmrYr65TOVTi6S8UKcOskva
6vYaTw5OjcKwvulzV8emW585pX3JXQOVJwvq7TqsPK9quZpThiy5I7idFa2C
IkmSn5SBzQi6vWtghToctxSaUhOK9KedJr9E5TOjEtG3DX4MlNC3qHCdXNhC
Xdj0lu05j+xlRLqpXhZvj/RHkdSpBs5IgnO2cQsa2da4VHOLG1Z3ivl0VE+K
8NmebGIoLvUr88ssdQQm5c5GBLtNjEQZt/lJpOFG7QKoSRR9l/vTxOXGl1zU
K4S/59+9efO602VCjd3islSvr8c4t/Xbct44svC1b9GTj725x7Bu1zhOezVs
kksT5jUX+fZ41bT1rFzu5AZHzWkztCdBjB3D5N5zo6XR/MX0rXy1GHmf8dbp
JsMnplkniYLZZMh3DSjX3DDvmp+mbw+5z+ggun38qJ1O7rcxf0V3sTsH1xmc
57LiEml8Jhju7DmVXGsup2rNFVptbqJBUbtLlJPnrHcqSBDljajHEzOEfSpI
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
6YiolswBAA==

-->

</rfc>

