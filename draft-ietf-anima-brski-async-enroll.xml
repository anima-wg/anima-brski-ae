<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-03" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>only a test for the CI/CD</t>

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request:agent-signed-data element
(defined in <xref target="yang-module"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-trigger:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="yang-module"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json</t>

<t>The pledge SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher response. The media type
“application/voucher-jose+json” is defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTPS GET on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it MAY construct the
enrollment request as plain PKCS#10.
Note that the focus here is placed on PKCS#10 as PKCS#10 can be
transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certificate request objects from CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object and sign it additionally with its IDevID credential. The
pledge-enrollment-request should be encoded as JOSE object.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Depending on target environment, it may be useful to
assume that the pledge may already “know” its functional scope and
therefore the number of certificates needed during operation. As a
result, multiple CSRs may be generated to provide achieve multiple
certificates as a result of the enrollment. This would need further
description and potential enhancements also in the enrollment-request
object to transport different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certificate request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-sztp-csr:csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-sztp-csr:csr": {
    "p10": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: further description necessary at least for */</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field received
during the communication with the pledge, indicating the pledge
acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jose+json” is defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The ietf-voucher-request:voucher can be optionally enhanced with the
following additional parameter:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jose+json” is defined in <xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jose+json” as defined
in <xref target="I-D.richardson-anima-jose-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar. Now the registrar-agent can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jose+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="yang-module" title="YANG Extensions to Voucher Request">

<t>The following modules extends the <xref target="RFC8995"/> Voucher
Request to include a signed artifact from the registrar-agent as well
as the registrar-proximity-certificate and the agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
module ietf-async-voucher-request {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-async-voucher-request";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix ivr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>";
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision "YYYY-MM-DD" {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses ivr:voucher-request-grouping {
      augment "voucher-request" {
        description "Base the constrained voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}
]]></artwork></figure>

</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses" title="Misuse of acquired voucher and enrollment responses">

<t>Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2: can be detected in Voucher Request processing
on domain registrar side. Requires domain registrar to verify the
proximity-registrar-cert leaf in the pledge-voucher-request against
his own as well as the association of the pledge to his domain based
on the product-serial-number contained in the voucher.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

<t>Misuse of registrar-agent LDevID may be addressed by utilizing
short-lived certificates to be used for authenticating the
registrar-agent against the registrar. The LDevID certificate for
the registrar-agent may be provided by a prior BRSKI execution based
on an existing IDevID. Alternatively, the LDevID may be acquired  by
a service technician after authentication against the issuing CA.</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>We would like to thank the various reviewers for their input, in
particular Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.richardson-anima-jose-voucher'>
   <front>
      <title>JOSE signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='23' month='June' year='2021'/>
      <abstract>
	 <t>   This document describes a serialiation of the RFC8366 voucher format
   to a JSON format is then signed using the JSON Object Signing and
   Encryption mechanism described in RFC7515.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-anima-jose-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-richardson-anima-jose-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='29' month='June' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-04.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='22' month='February' year='2021'/>
      <abstract>
	 <t>   The goal of this document is to facilitate interoperability and
   automation by profiling the Certificate Management Protocol (CMP)
   version 2, the related Certificate Request Message Format (CRMF)
   version 2, and the HTTP Transfer for the Certificate Management
   Protocol.  It specifies a subset of CMP and CRMF focusing on typical
   use cases relevant for managing certificates of devices in many
   industrial and IoT scenarios.  To limit the overhead of certificate
   management for more constrained devices only the most crucial types
   of operations are specified as mandatory.  To foster interoperability
   in more complex scenarios, other types of operations are specified as
   recommended or optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-05'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-05.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='30' month='June' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-11'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-11.txt' type='TXT'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAL5U5WAAA+y963YcR5Im+D+eIhr8IUDKTBDgRRJKXVMQCEno4q0BqlTd
Go1OIDMARDEzIzcjEhCKYp95kJ1z5ln2UeZJ1q7u5h4eiQTFqq6dHZ7uEglE
ePjF3K6fmQ2Hw6xpi/nk52Jaz8uDvF2uyqxaLOlvTbv/8OGXD/ezST2eFzP4
9WRZXLTDqmwvhsW8mhXD82XzthoWze18PCzny3o6HT58lI2L9iBv2km2qA6y
PG/r8UH+yW3ZfAL/GNezRTFu/Q+a29myvGjMD+plG/4EJjSv2+qiKifww3lN
T7XLyg/TVu0U5ne2Wizg7by+yGlOV8t6Xq+a/JimNivnbV7N869Pz/54km/T
f4aHxztZcX6+LK8Pcv1JVizL4iB/tSiXRVvV8yaHLcpfFPPissRBspvLg/zw
5cmLw/yHb7NJ0cKn9x/u72XFqr2qlwfZED4D8z8b5d8sq7KB6fL+nbXlxUU5
dz+tlzDQWYWDNvnht/ATnYr8kBdalrDQV21bD78rrubD02p+mT/Fvaza24P8
xWpeja/gn8vyEiYLyyiui2VV0GZP4KuffLH3+aMvefNX83YJ73xbLmfF/BZ+
VM6KaoqnRTMbXeDM/tDw10dwWPDIalkd5Fdtu2gOdndvbm5G5te7utbvRvnX
y3r89qpY+fV+V84ny+pt8Jt/nDVf8exG5zq7D1n38Sh/XhZLt+TjaVW3+iNa
61HVjOv87Ba2eGYXdworaCv4V9E0Zf65W9sPxXRaNeV0Ws7dco6+G37x6OFj
u5yzm6r9a7mcAmnCjxdXdH+3Pnu8lz9+nH/x+Rf5l3B7t/xqpzClP4xxLrQ8
mf6bUf5DuZyXfgFvrupZ0fif/uOcV0szG97QzO51VvMahmqr6xLZ0ek3R08/
f7rv//pI/vr5w0cP9a9P9p7IX7949PSp/vXLL+mnJ8NnI+A+V8Vy0tRzYYV/
qZtyeF2vxlflUh8iTjkv23E9vxg2f20Xw3EDv6zmF9GE9r/8Qj/yeH/vof/r
nvz1yf7n++6vX+gDT54+2Q++NS1mi2Y4rS6v2psS/3c4ni2Gi2V9UU3LxJP4
29UCOVija/ziy8f6IBAhUFe5HBbjcjiui8WwbNphDSS05MGOj4ZP9x892Rt+
if8ETs9s+BP4RU6/yIf56xoODLg8kX8+c0yUeCqQfj2u4POT3G1KPc/LX2Bz
55clDZrDIM+KtqAX4DhnSEvCl5tyDCff3uJ3CmD8X8JVuT3H7+kv3pa39qPw
DRl0YeaVl//XqlrgA5/Qb5WP88fpBpzMW6A7+mwxhVtejttl3ZbjK5zMND+C
eVVNA7+ll1Qm7H0+fPiEftKUyFlxkQcyAdgk2CrZvxw//PL49Gh4dPJ6+PDh
k+GTYEt5VWd+uTID+Lr/6Wv4xqxsy2XfIl6CcLzKD2fw3LiY56fltCrOqym+
ewTXblxNw9k/Gu7t98wepnmQ0zyJEI6Ph1883B/tHZ4G08Zf5PILnmeZPyuv
q3GZn0xgu1Gm9872ZN7AMKu2RHnO66W9Rjrwy0fpflnNy3LZhJP/Yvjwae/W
Hx8jz5GJ4d6fnL0aIj3vPdmDN/cjej57tYs0Lb/MT+tikl+XV9V4WjYw3T/x
X4fA/b5dVhOiBkelTDoXcIccOROt7sN5lO1NvXzLV2GxmOobcGFBaaqnwC6B
MJdEus2GpHmG+hxwpuqvPNar5SUwKPnH7h10LDPMe+n58ZCkUHJTeZNgu3Sb
cMavjl6/DjYTtKp5fgS887IE3lDBnXytq90fPRzt5dvPUMvc6Vutff8QJGUx
l411c/wSqTYbDocgqVC8jtsse3NVNTnosSviApOyGS+rczi7cn6FA9AGI5md
13WL7ywWKMAKOIAZ7A6zkzJDZgJLBokN6vG4RWpmNXKQv3snAuL9+3wHVN68
mDZ1XpMKCSr1HD4OUgxY1kVZwIs4+hx+v8zr+fQW9mZWwn+m1axCXgjyYg4H
U13jzTwHIilBF6jm1/X0mn47W4C0hxmPsm9WcKOBMwTrAPUVSei6msDTMBWY
BPJWEKClKL+wvmVdgESGiZXz6wpuEr06QP34Boj5ih4GrZkuH/59MS0nsOXM
mGEZy3oG+zOeVqgQ43qRJK5hKqOcNlsfxHcrJDo4ByTBGcj7qbye8aDDal61
IAXq5RB/S7sn3xsuywYWi0IIfwVj13kjWv553V5lK9CdxkVTwtRVfYdDg1nB
cc7p4ypMyCoAekK2MyaRA/LtAuTavIWDKSdZff4X2PQm326qyzkeUjm8QUqA
J+VXO3yqsJl0M0EaEpWABjZBRa46X9EP4EN82nmzKMfA48ZAccT0xuUSeR5+
Hg7vDcxuUl7gx92J5LB1xeW8hqHHqC3hTYYhcSEw+LT6KzxbOnMmc5wClMb6
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
dTRkB8tIvX675gWu4ugZsMwBAA==

-->

</rfc>

