<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.6 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-04" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request:agent-signed-data element
(defined in <xref target="async-voucher-request-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-trigger:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="async-voucher-request-yang"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include this Content-Type header field indicating the
included media type for the voucher response. Note that this is also an 
indication regarding the acceptable fromat of the voucher response. 
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>[RFC Editor: please delete] /*
error in v03: HTTP POST allows for an empty body but also to provide additional data, 
like CSR attributes or information about enroll type: initial or 
re-enroll. */</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it MAY construct the
enrollment request as plain PKCS#10.
Note that the focus here is placed on PKCS#10 as PKCS#10 can be
transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certificate request objects from CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object and sign it additionally with its IDevID credential. The
pledge-enrollment-request should be encoded as JOSE object.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Depending on target environment, it may be useful to
assume that the pledge may already “know” its functional scope and
therefore the number of certificates needed during operation. As a
result, multiple CSRs may be generated to provide achieve multiple
certificates as a result of the enrollment. This would need further
description and potential enhancements also in the enrollment-request
object to transport different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certificate request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-sztp-csr:csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-sztp-csr:csr": {
    "p10": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: further description necessary at least for */</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field indicating the 
pledge acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The ietf-voucher-request:voucher can be optionally enhanced with the
following additional parameter:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jws+json” as defined
in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar. Now the registrar-agent can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jws+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="async-voucher-request-yang" title="Async Voucher Request artifact">
<t>The following enhancement extends the voucher-request as defined in 
<xref target="RFC8995"/> to include additional fields necessary for handling 
bootstrapping in the pledge-responder-mode.</t>

<section anchor="async-voucher-request-yang-tree" title="Tree Diagram">
<t>The following tree diagram is mostly a duplicate of the contents of
<xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the 
registrar-proximity-certificate, and agent-signing certificate. 
The tree diagram is described in <xref target="RFC8340"/>. The enhanced fields are 
described in Section Each node in the diagram is fully described 
by the YANG module in Section <xref target="async-voucher-request-yang-module"/>.
Please review the YANG module for a detailed description of the 
voucher-request format.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request

 grouping async-voucher-request-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
         +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
                  
]]></artwork></figure>

</section>
<section anchor="async-voucher-request-yang-module" title="YANG Module">
<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to 
include a signed artifact from the registrar-agent (agent-signed-data) 
as well as the registrar-proximity-certificate and the 
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-async-voucher-request@2021-08-18.yang"

module ietf-async-voucher-request {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-async-voucher-request";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>"
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision 2021-08-18 {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {
      augment "voucher-request" {
        description "Base the async-voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the pledge-voucher-request are provided in 
<xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses" title="Misuse of acquired voucher and enrollment responses">

<t>Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2: can be detected in Voucher Request processing
on domain registrar side. Requires domain registrar to verify the
proximity-registrar-cert leaf in the pledge-voucher-request against
his own as well as the association of the pledge to his domain based
on the product-serial-number contained in the voucher.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

<t>Misuse of registrar-agent LDevID may be addressed by utilizing
short-lived certificates to be used for authenticating the
registrar-agent against the registrar. The LDevID certificate for
the registrar-agent may be provided by a prior BRSKI execution based
on an existing IDevID. Alternatively, the LDevID may be acquired  by
a service technician after authentication against the issuing CA.</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>We would like to thank the various reviewers for their input, in
particular Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='25' month='July' year='2021'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='15' month='August' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-07'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-07.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document aims at simple, interoperable, and automated PKI
   management operations covering typical use cases of industrial and
   IoT scenarios.  This is achieved by profiling the Certificate
   Management Protocol (CMP), the related Certificate Request Message
   Format (CRMF), and HTTP-based or CoAP-based transport in a succinct
   but sufficiently detailed and self-contained way.  To make secure
   certificate management for simple scenarios and constrained devices
   as lightweight as possible, only the most crucial types of operations
   and options are specified as mandatory.  More special and complex use
   cases are supported as well, by features specified as recommended or
   optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-12'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-12.txt' type='TXT'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>Addressed feedback for voucher-request enhancements from YANG doctor early 
review in <xref target="async-voucher-request-yang"/>.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAJ/NHGEAA+y963Ycx5Uu+D+fIhv8IcCqKhAgqQusdhsCIQltUmQDlOVu
HR2vRFUCSLOQWVOZBQim2Os8yMxa8yzzKOdJZl8jdkRGFgqU7PacOVzdFglk
RsZlx75+e+/xeJy1XVHP/lzMm7o8yLvlqsyqxZL+1nb7jx9//ng/mzXTuriG
X8+WxUU3rsruYlzU1XUxPl+2b6tx0d7V03FZL5v5fPz4aTYtuoO87WbZojrI
8rxrpgf5R3dl+xH8Y9pcL4pp53/Q3l0vy4vW/KBZduFPYEJ101UXVTmDH9YN
PdUtKz9MV3VzmN/ZarGAt/PmIqc5XS2bulm1+TFN7bqsu7yq8y9Pz/5wkm/T
f8aHxztZcX6+LG8Ocv1JVizL4iB/tSiXRVc1dZvDFuUvi7q4LHGQ7PbyID/8
9uTlYf7919ms6ODT+4/397Ji1V01y4NsDJ+B+Z9N8q+WVdnCdHn/zrry4qKs
3U+bJQx0VuGgbX74NfxEpyI/5IWWJSz0Vdc142+Kq3p8WtWX+Se4l1V3d5C/
XNXV9Ar+uSwvYbKwjOKmWFYFbfYMvvrRZ3ufPvmcN39Vd0t45+tyeV3Ud/Cj
8rqo5nhaNLPJBc7s9y1/fQKHBY+sltVBftV1i/Zgd/f29nZifr2ra/1mkn+5
bKZvr4qVX+83ZT1bVm+D3/zjrPmKZzc519l9yLqPJ/mLsli6JR/Pq6bTH9Fa
j6p22uRnd7DF13Zxp7CCroJ/FW1b5p+6tX1fzOdVW87nZe2Wc/TN+LMncLPM
cs5uq+6v5XIOpAk/XlzR/d36+Ole/vRp/tmnn+Wfw+3d8qudw5R+P8W50PJk
+m8m+fflsi79At5cNddF63/6j3NeHc1sfEsze9BZ1Q0M1VU3JbKj06+OPvn0
k33/1yfy108fP3msf32290z++tmTTz7Rv37+Of30ZPx8YpjgX27b8U2zml6V
y+C3ddlNm/pi3P61W4ynLfyyqi+imex//pmO/nR/77H/65789dn+p/vur5/p
A88+ebYffGteXC/a8by6vOpuS/zf8fR6MV4sm4tqXiaexN+uFsi6Wl3cZ58/
1QeB+oCsyuW4mJbjaVMsxmXbjRugnSUPdnw0/mT/ybO98ef4T2DxzH8/gl/k
9It8nL9u4KSAvRPd59eOexIzBZpvphV8fpa7TWnqvPxpelXUlyUNmsMgz4uu
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
CZ0YVSYZ/+W21a+7zMSQjQ1M8eybwxcvgjvjOaMTkKkL8umzPVjBL2SBPz2b
rmeBcgD9S5DicetPIWYOmXeSBAu1rUmTfNGFFtoszTUOYo4XrFDbQAfMjgvp
rWd2NRb8NIMBC1/eLbrmEiz4KynSA/TZYE1grDpyzaVDF225mjVj+ZEDZfeY
5/3HMMTUWB3R6jXRSL4Zrt83eVLPcO0uV66Tpvg6TAajO7f2YSockYJF6XKR
znU7MAwAhhe3HTCqaL0N6YgqjXQd1OJ6UiycCoqvnmTejm8ocEqQvllu6yqn
p5dWUF8Wd2vmEGMS87g0S3Vx70fp6IMmqXLpqN7WNdDZ3JeRS5GIy6tpubwZ
ggTD4hn3qifCKX3mo8B4fX0PTcrr56z6LquwQGBk5sBlIaSAMheeBEI6IaO3
YAT40Q9bL09Ovtz/y9HRZDKZHYJ4/nGdfNZbotL4XmG8b4TxFjEUfK583n78
8e5Xq+fffP1dffrTt0+O954e/Rt8nJ9bJ7P5CXel8bcxeE8e2exyDqopdpRQ
D9ns+fWj3696LG6WCdUjLXLWBpI2sXCrSGNYJ+3hfkV2sA4Nj32MNrH9rjaV
9wBj+FbKuubkElOSE0WmY5iUws46tF5RX81C27cmcu4xOFTUeWaakYfFZhlZ
Q6lImGVSOFHcH54x9SwgA5htvw5Zr25vGDbhag6vMDsm5XS/osIDqDQGAZEe
P6okk0uYXeh0EeRayWUvB+rhU3q4ayhLgZGhCuFs477+w9HZo73HI1NjFLUA
5mKyD5KQTQ4ABT5Llvvcjl9U161tk1C4Ihq2AALY76GjvuO+y9JY23H9IElg
spk3KrEvfU/UL3VE9T9yjy8qMavEhcnS7qgskz7xOfkwSV/doFxtuVxS0kV+
8/jJQe6XLcUN8M4FQ/oyksbNFXWXGOUZ5WwfnZ3aU2uCHG1p/85rpgt+4GgF
nsyWuh9SqDZhUZn9ShtTYnGwLWUqAaR2urinQILeGzw/WpjUW8FYJxbjoCp1
xKnXVamLavsJ7fqvUDXdKT4ZRunCcl9mv70/zKsSfA9HfkquEIMpOjDJvikp
fS5wX2HRnJKaFrB8D5soEAEEvbFSKhTtzpAVWZcdxhTH7V+7xXjashF5H5EG
JZVPS1OSo12dj7HGGettOugB/D+39KRyyZl2caGUyE4bP/DOo4DF/DJag9Da
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
8N1MMNYBAA==

-->

</rfc>

