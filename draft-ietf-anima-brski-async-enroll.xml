<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.5 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-04" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request:agent-signed-data element
(defined in <xref target="yang-module"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-trigger:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="yang-module"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The pledge SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher response. The media type
“application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTP POST on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>[RFC Editor: please delete] /*
error in v03: HTTP POST allows for an empty body but also to provide additional data, 
like CSR attributes or information about enroll type: initial or 
re-enroll. */</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it MAY construct the
enrollment request as plain PKCS#10.
Note that the focus here is placed on PKCS#10 as PKCS#10 can be
transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certificate request objects from CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object and sign it additionally with its IDevID credential. The
pledge-enrollment-request should be encoded as JOSE object.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Depending on target environment, it may be useful to
assume that the pledge may already “know” its functional scope and
therefore the number of certificates needed during operation. As a
result, multiple CSRs may be generated to provide achieve multiple
certificates as a result of the enrollment. This would need further
description and potential enhancements also in the enrollment-request
object to transport different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certificate request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-sztp-csr:csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-sztp-csr:csr": {
    "p10": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: further description necessary at least for */</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field received
during the communication with the pledge, indicating the pledge
acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jws+json” is defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The ietf-voucher-request:voucher can be optionally enhanced with the
following additional parameter:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.ietf-anima-jws-voucher"/> as:</t>

<t>application/voucher-jws+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jws+json” is defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jws+json” as defined
in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar. Now the registrar-agent can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jws+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="yang-module" title="YANG Extensions to Voucher Request">

<t>The following modules extends the <xref target="RFC8995"/> Voucher
Request to include a signed artifact from the registrar-agent as well
as the registrar-proximity-certificate and the agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
module ietf-async-voucher-request {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-async-voucher-request";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix ivr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>";
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision "YYYY-MM-DD" {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses ivr:voucher-request-grouping {
      augment "voucher-request" {
        description "Base the constrained voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}
]]></artwork></figure>

</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses" title="Misuse of acquired voucher and enrollment responses">

<t>Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2: can be detected in Voucher Request processing
on domain registrar side. Requires domain registrar to verify the
proximity-registrar-cert leaf in the pledge-voucher-request against
his own as well as the association of the pledge to his domain based
on the product-serial-number contained in the voucher.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

<t>Misuse of registrar-agent LDevID may be addressed by utilizing
short-lived certificates to be used for authenticating the
registrar-agent against the registrar. The LDevID certificate for
the registrar-agent may be provided by a prior BRSKI execution based
on an existing IDevID. Alternatively, the LDevID may be acquired  by
a service technician after authentication against the issuing CA.</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>We would like to thank the various reviewers for their input, in
particular Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='25' month='July' year='2021'/>
      <abstract>
	 <t>   RFC8366 defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='7' month='July' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-05'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-05.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document aims at simple, interoperable, and automated PKI
   management operations covering typical use cases of industrial and
   IoT scenarios.  This is achieved by profiling the Certificate
   Management Protocol (CMP), the related Certificate Request Message
   Format (CRMF), and HTTP-based or CoAP-based transport in a succinct
   but sufficiently detailed and self-contained way.  To make secure
   certificate management for simple scenarios and constrained devices
   as lightweight as possible, only the most crucial types of operations
   and options are specified as mandatory.  More special and complex use
   cases are supported as well, by features specified as recommended or
   optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-06'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-06.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='9' month='July' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-12'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-12.txt' type='TXT'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAHsl/2AAA+y963YcR5Im+D+eIgb8IaCUmSBAUheUuqYhECqhixTZAFVV
3RqNTiAzAEQxkZEbEQkIRbHPPMjuOfss+yjzJGtXd3MPj0SCYlXXzg5Pd4kE
Ijz8Ym7Xz8zG43HWdsVi9lMxrxflQd41qzKrlg39re32Hz/+8vF+Nquni+Ia
fj1riotuXJXdxbhYVNfF+Lxp31bjor1bTMfloqnn8/Hjp9m06A7ytptly+og
y/Ounh7kn9yV7Sfwj2l9vSymnf9Be3fdlBet+UHddOFPYEKLuqsuqnIGP1zU
9FTXVH6YrurmML+z1XIJb+f1RU5zumrqRb1q82Oa2nW56PJqkX99evaHk3yb
/jM+PN7JivPzprw5yPUnWdGUxUH+alk2RVfVizaHLcpfFovissRBstvLg/zw
u5OXh/mffp/Nig4+vf94fy8rVt1V3RxkY/gMzP9skn/TVGUL0+X9O+vKi4ty
4X5aNzDQWYWDtvnh7+EnOhX5IS+0LGGhr7quHn9bXC3Gp9XiMv8M97Lq7g7y
l6tFNb2CfzblJUwWllHcFE1V0GbP4KuffLH3+ZMvefNXi66Bd35fNtfF4g5+
VF4X1RxPi2Y2ucCZ/XPLX5/AYcEjq6Y6yK+6btke7O7e3t5OzK93da3fTvKv
m3r69qpY+fV+Wy5mTfU2+M0/zpqveHaTc53dh6z7eJK/KIvGLfl4XtWd/ojW
elS10zo/u4MtvraLO4UVdBX8q2jbMv/cre1PxXxeteV8Xi7cco6+HX/xBG6W
Wc7ZbdX9tWzmQJrw4+UV3d+tT5/u5U+f5l98/kX+JdzeLb/aOUzpn6c4F1qe
TP/NJP9T2SxKv4A3V/V10fqf/uOcV0czG9/SzB50VosahuqqmxLZ0ek3R599
/tm+/+sT+evnj5881r8+23smf/3iyWef6V+//JJ+ejJ+PjFM8C+37fimXk2v
yib47aLspvXiYtz+tVuOpy38slpcRDPZ//ILHf3p/t5j/9c9+euz/c/33V+/
0AeeffZsP/jWvLhetuN5dXnV3Zb4v+Pp9XK8bOqLal4mnsTfrpbIulpd3Bdf
PtUHgfqArMpmXEzL8bQuluOy7cY10E7Dgx0fjT/bf/Jsb/wl/hNYPPPfT+AX
Of0iH+evazgpYO9E9/m1457ETIHm62kFn5/lblPqRV7+PL0qFpclDZrDIM+L
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

-->

</rfc>

