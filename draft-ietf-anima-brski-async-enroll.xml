<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.19 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc compact="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-async-enroll-03" category="std">

  <front>
    <title abbrev="BRSKI-AE">Support of asynchronous Enrollment in BRSKI (BRSKI-AE)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="H." surname="Brockhaus" fullname="Hendrik Brockhaus">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>hendrik.brockhaus@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <region>Bavaria</region>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>

    <date year="2021"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t><spanx style="strong">TODO: remove me -CI test only</spanx><vspace />
<spanx style="strong">TODO: remove me -CI test only</spanx><vspace />
<spanx style="strong">TODO: remove me -CI test only</spanx></t>

<t>This document describes enhancements of bootstrapping a remote secure
key infrastructure (BRSKI, <xref target="RFC8995"/> ) to also operate
in domains featuring no or only timely limited connectivity between
involved components.
Further enhancements are provided to perform the BRSKI approach
in environments, in which the role of the pledge changes from a client
to a server . This changes the interaction model from a
pledge-initiator-mode to a pledge-responder-mode. To support both
use cases, BRSKI-AE relies on the exchange of authenticated self-contained
objects (signature-wrapped objects) also for requesting and
distributing of domain specific device certificates.
The defined approach is agnostic regarding the utilized enrollment
protocol allowing the application of existing and potentially new
certificate management protocols.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for
secure zero-touch (automated) bootstrapping of devices (pledges) in a
(customer) site domain. This includes the discovery of network elements
in the target domain, time synchronization, and the exchange of security
information necessary to establish trust between a pledge and the
domain. Security information about the target domain, specifically the
target domain certificate, is exchanged utilizing voucher objects as
defined in <xref target="RFC8366"/>.
These vouchers are authenticated self-contained (signed) objects, which
may be provided online (synchronous) or offline (asynchronous) via the
domain registrar to the pledge and originate from a Manufacturer’s
Authorized Signing Authority (MASA).</t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to
request and distribute target domain
specific device certificates. EST in turn relies on a binding of the
certification request to an underlying TLS connection between the EST
client and the EST server. According to BRSKI the domain registrar acts
as EST server and is also acting as registration authority (RA) or
local registration authority (LRA).
The binding to TLS is used to protect the exchange of a certification
request (for a LDevID EE certificate) and to provide data origin
authentication (client identity information), to support the authorization
decision for processing the certification request. The TLS connection
is mutually authenticated and the client-side authentication utilizes
the pledge’s manufacturer issued device certificate (IDevID certificate).
This approach requires an on-site availability of a local asset or
inventory management system performing the authorization decision based
on tuple of the certification request and the pledge authentication
using the IDevID certificate, to issue a domain specific certificate to
the pledge. The EST server (the domain registrar) terminates the security
association with the pledge and thus the binding between the
certification request and the authentication of the pledge via TLS.
This type of enrollment utilizing an online connection to the PKI
is considered as synchronous enrollment.</t>

<t>For certain use cases on-site support of a RA/CA component and/or an
asset management is not available and rather provided by an operator’s
backend and may be provided timely limited or completely through
offline interactions.
This may be due to higher security requirements for operating the
certification authority or for optimization of operation for smaller
deployments to avoid the always on-site operation. The authorization of
a certification request based on an asset management in this case will
not / can not be performed on-site at enrollment time. Enrollment,
which cannot be performed in a (timely) consistent fashion is considered
as asynchronous enrollment in this document. It requires the support of
a store and forward functionality of certification request together
with the requester authentication (and identity) information. This
enables processing of the request at a later point in time.
A similar situation may occur through network segmentation, which is
utilized in industrial systems to separate domains with different
security needs. Here, a similar requirement arises if the communication
channel carrying the requester authentication is terminated before
the RA/CA authorization handling of the certification request. If a
second communication channel is opened to forward the certification
request to the issuing RA/ CA, the requester authentication information
needs to be retained and ideally bound to the certification request.
This uses case is independent from timely limitations of the first use
case. For both cases, it is assumed that the requester authentication
information is utilized in the process of authorization of a
certification request.
There are different options to perform store and forward of
certification requests including the requester authentication
information:</t>

<t><list style="symbols">
  <t>Providing a trusted component (e.g., an LRA) in the target
domain, which stores the certification request combined with
the requester authentication information (based on the IDevID)
and potentially the information about a successful proof of
possession (of the corresponding private key) in a way
prohibiting changes to the combined information.
Note that the assumption is that the information elements may
not be cryptographically bound together.
Once connectivity to the backend is available, the trusted
component forwards the certification request together with
the requester information (authentication and proof of
possession) to the off-site PKI for further processing.
It is assumed that the off-site PKI in this case relies on the
local pledge authentication result and thus performs the
authorization and issues the requested certificate.
In BRSKI the trusted component may be the EST server residing
co-located with the registrar in the target domain.</t>
  <t>Utilization of authenticated self-contained objects for the
enrollment, binding the certification request and the
requester authentication in a cryptographic way. This approach
reduces the necessary trust in a domain component to storage
and delivery. Unauthorized modifications of the requester
information (request and authentication) can be detected during
the verification of the authenticated self-contained object.</t>
</list></t>

<t>Focus of this document the support of handling authenticated
self-contained objects for bootstrapping. As it is intended to enhance
BRSKI it is named BRSKI-AE, where AE stands for asynchronous enrollment.
As BRSKI, BRSKI-AE results in the pledge storing an X.509 domain
certificate and sufficient information for verifying the domain
registrar / proxy identity (LDevID CA Certificate) as well as
domain specific X.509 device certificates (LDevID EE certificate).</t>

<t>Based on the proposed approach, a second set of scenarios can be
addressed, in which the pledge has either no direct communication path
to the domain registrar, e.g., due to missing network connectivity or a
different technology stack. In such scenarios the pledge is expected to
act as a server rather than a client. The pledge will be triggered to
generate request objects to be onboarded in the registrar’s domain.
For this, an additional component is introduced acting as an agent for
the domain registrar (registrar-agent) towards the pledge. This could
be a functionality of a commissioning tool or it may be even co-located
with the registrar.
In contrast to BRSKI the registrar-agent performs the object exchange
with the pledge and provides/retrieves data objects to/from the domain
registrar. For the interaction with the domain registrar the registrar
agent will use existing BRSKI endpoints.</t>

<t>The goal is to enhance BRSKI to be applicable to the additional use
cases. This is addressed by</t>

<t><list style="symbols">
  <t>enhancing the well-known URI approach with an additional path
for the utilized enrollment protocol.</t>
  <t>defining a certificate waiting indication and handling, if the
certifying component is (temporarily) not available.</t>
  <t>allowing to utilize credentials different from the pledge’s
IDevID to establish a TLS connection to the domain registrar,
which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (dta exchange and data objects) between
a pledge acting as server an a registrar-agent and the domain
registrar.</t>
</list></t>

<t>Note that in contrast to BRSKI, BRSKI-AE assumes support of multiple
enrollment protocols on the infrastructure side, allowing the pledge
manufacturer to select the most appropriate. Thus, BRSKI-AE can be
applied for both, asynchronous and synchronous enrollment.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”,
“MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>.
The following terms are defined additionally:</t>

<t><list style="hanging">
  <t hangText="CA:">
  Certification authority, issues
certificates.</t>
  <t hangText="RA:">
  Registration authority, an optional system
component to which a CA delegates certificate management
functions such as authorization checks.</t>
  <t hangText="LRA:">
  Local registration authority, an optional RA
system component with proximity to end entities.</t>
  <t hangText="IED:">
  Intelligent Electronic Device (in essence a
pledge).</t>
  <t hangText="on-site:">
  Describes a component or service or
functionality available in the target deployment domain.</t>
  <t hangText="off-site:">
  Describes a component or service or
functionality available in an operator domain different from
the target deployment domain. This may be a central site or a
cloud service, to which only a temporary connection is available,
or which is in a different administrative domain.</t>
  <t hangText="asynchronous communication:">
  Describes a timely
interrupted communication between an end entity and a PKI
component.</t>
  <t hangText="synchronous communication:">
  Describes a timely
uninterrupted communication between an end entity and a PKI
component.</t>
  <t hangText="authenticated self-contained object:">
  Describes an
object, which is cryptographically bound to the EE certificate
(IDevID certificate or LDEVID certificate) of a pledge. The
binding is assumed to be provided through a digital signature
of the actual object using the corresponding private key of
the EE certificate.</t>
</list></t>

</section>
<section anchor="scope-of-solution" title="Scope of solution">

<section anchor="sup-env" title="Supported environment">

<t>This solution is intended to be used in domains with limited support
of on-site PKI services and comprises use cases in which:</t>

<t><list style="symbols">
  <t>there is no registration authority available in the target
domain. The connectivity to an off-site RA in an operator’s
network may only be available temporarily. A local store and
forward device is used for the communication with the off-site
services.</t>
  <t>authoritative actions of a LRA are limited and may not comprise
authorization of certification requests of pledges. Final
authorization is done at the RA residing in the operator
domain.</t>
  <t>the target deployment domain already has an established
certificate management approach that shall be reused to (e.g.,
in brownfield installations).</t>
</list></t>

<t>In addition, the solution is intended to be applicable in domains
in which pledges have no direct connection to the domain registrar,
but are expected to be managed by the registrar. This can be motivated
by pledges featuring a different technology stack or by pledges without
an existing connection to the domain registrar during bootstrapping.
These pledges are likely to act in a server role. Therefore, the
pledge has to offer endpoints on which it can be triggered for
the generation of voucher-request objects and certification
objects as well as to provide the response objects to the pledge.</t>

</section>
<section anchor="app-examples" title="Application Examples">

<t>The following examples are intended to motivate the support of
different enrollment approaches in general and asynchronous enrollment
specifically, by introducing industrial applications cases,
which could leverage BRSKI as such but also require support of
asynchronous operation as intended with BRSKI-AE.</t>

<section anchor="rolling-stock" title="Rolling stock">

<t>Rolling stock or railroad cars contain a variety of sensors,
actuators, and controllers, which communicate within the railroad car
but also exchange information between railroad cars building a train,
or with a backend. These devices are typically unaware of backend
connectivity. Managing certificates may be done during maintenance
cycles of the railroad car, but can already be prepared during
operation. The preparation may comprise the generation of certification
requests by the components which are collected and forwarded for
processing, once the railroad car is connected to the operator backend.
The authorization of the certification request is then done based on
the operator’s asset/inventory information in the backend.</t>

</section>
<section anchor="building-automation" title="Building automation">

<t>In building automation, a use case can be described by a detached
building or the basement of a building equipped with sensor,
actuators, and controllers connected, but with only limited or no
connection to the centralized building management system. This
limited connectivity may be during the installation time but also
during operation time. During the installation in the basement, a
service technician collects the necessary information from the
basement network and provides them to the central building management
system, e.g., using a laptop or even a mobile phone to transport the
information. This information may comprise parameters and settings
required in the operational phase of the sensors/actuators, like a
certificate issued by the operator to authenticate against other
components and services.</t>

<t>The collected information may be provided by a domain registrar
already existing in the installation network. In this case
connectivity to the backend PKI may be facilitated by the service
technician’s laptop.
Contrary, the information can also be collected from the
pledges directly and provided to a domain registrar deployed in a
different network. In this cases connectivity to the domain registrar
may be facilitated by the service technician’s laptop.</t>

</section>
<section anchor="substation-automation" title="Substation automation">

<t>In electrical substation automation a control center typically hosts
PKI services to issue certificates for Intelligent Electronic Devices
(IED)s operated in a substation. Communication between the substation
and control center is done through a proxy/gateway/DMZ, which
terminates protocol flows. Note that <xref target="NERC-CIP-005-5"/> requires
inspection of protocols at the boundary of a security
perimeter (the substation in this case).
In addition, security management in substation automation assumes
central support of different enrollment protocols to facilitate the
capabilities of IEDs from different vendors. The IEC standard
IEC62351-9 <xref target="IEC-62351-9"/> specifies the mandatory
support of two enrollment protocols, SCEP <xref target="RFC8894"/> and EST
<xref target="RFC7030"/> for the infrastructure side, while
the IED must only support one of the two.</t>

</section>
<section anchor="electric-vehicle-charging-infrastructure" title="Electric vehicle charging infrastructure">

<t>For the electric vehicle charging infrastructure protocols have been
defined for the interaction between the electric vehicle (EV) and the
charging point (e.g., ISO 15118-2 <xref target="ISO-IEC-15118-2"/>)
as well as between the charging point and the charging point operator
(e.g. OCPP <xref target="OCPP"/>). Depending on the authentication
model, unilateral or mutual authentication is required. In both cases
the charging point uses an X.509 certificate to authenticate itself
in the context of a TLS connection between the EV and
the charging point. The management of this certificate depends
(beyond others) on the selected backend connectivity protocol.
Specifically, in case of OCPP it is intended as single communication
protocol between the charging point and the backend carrying all
information to control the charging operations and maintain the
charging point itself. This means that the certificate management is
intended to be handled in-band of OCPP. This requires to be able to
encapsulate the certificate management exchanges in a transport
independent way. Authenticated self-containment will ease this by
allowing the transport without a separate enrollment protocol. This
provides a binding of the exchanges to the identity of the
communicating endpoints.</t>

</section>
<section anchor="infrastructure-isolation-policy" title="Infrastructure isolation policy">

<t>This refers to any case in which network infrastructure is normally
isolated from the Internet as a matter of policy, most likely for
security reasons. In such a case, limited access to external PKI
resources will be allowed in carefully controlled short periods of
time, for example when a batch of new devices are deployed, but
impossible at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain" title="Less operational security in the target domain">

<t>The registration point performing the authorization of a certificate
request is a critical PKI component and therefore implicates higher
operational security than other components utilizing the issued
certificates for their security features. CAs may also demand higher
security in the registration procedures. Especially the CA/Browser
forum currently increases the security requirements in the certificate
issuance procedures for publicly trusted certificates.
There may be the situation that the target domain does not offer
enough security to operate a registration point and therefore wants
to transfer this service to a backend that offers a higher level of
operational security.</t>

</section>
</section>
</section>
<section anchor="req-sol" title="Requirement discussion and mapping to solution elements">

<t>For the requirements discussion it is assumed that the domain
registrar receiving a certification request as authenticated
self-contained object is not the authorization point for this
certification request. If the domain registrar is the authorization
point and the pledge has a direct connection to the registrar,
BRSKI can be used directly. Note that BRSKI-AE could also be used
in this case.</t>

<t>Based on the intended target environment described in <xref target="sup-env"/> and
the motivated application examples
described in <xref target="app-examples"/> the following
base requirements are derived to support authenticated self-contained
objects as container carrying the certification request and further
information to support asynchronous operation.</t>

<t>At least the following properties are required:</t>

<t><list style="symbols">
  <t>Proof of Possession: proves to possess and control the private
key corresponding to the public key contained in the
certification request, typically by adding a signature using
the private key.</t>
  <t>Proof of Identity: provides data-origin authentication of a
data object, e.g., a certificate request, utilizing an existing
IDevID. Certificate updates may utilize the certificate that
is to be updated.</t>
</list></t>

<t>Solution examples (not complete) based on existing technology are
provided with the focus on existing IETF documents:</t>

<t><list style="symbols">
  <t>Certification request objects: Certification requests are
structures protecting only the integrity of the contained data
providing a proof-of-private-key-possession for locally
generated key pairs. Examples for certification requests are:  <list style="symbols">
      <t>PKCS#10 <xref target="RFC2986"/>: Defines a structure
for a certification request. The structure is signed to
ensure integrity protection and proof of possession of
the private key of the requester that corresponds to the
contained public key.</t>
      <t>CRMF <xref target="RFC4211"/>: Defines a structure for
the certification request message. The structure supports
integrity protection and proof of possession, through a
signature generated over parts of the structure by using
the private key corresponding to the contained public
key. CRMF also supports further proof-of-possession methods
for key pairs not capable to be used for signing.</t>
    </list>
Note that the integrity of the certification request is bound to
the public key contained in the certification request by
performing the signature operation with the corresponding
private key. In the considered application examples, this is
not sufficient to provide data origin authentication and needs to
be bound to the existing credential of the pledge (IDevID)
additionally. This binding supports the
authorization decision for the certification request through
the provisioning of a proof of identity. The binding of data
origin authentication to the certification request may be
delegated to the protocol used for certificate management.</t>
  <t>Proof of Identity options: The certification request should be
bound to an existing credential (here IDevID) to enable a proof
of identity and based on it an authorization of the certification
request.
The binding may be realized through security options in an
underlying transport protocol if the authorization of the
certification request is done at the next communication hop.
Alternatively, this binding can be done by a wrapping signature
employing an existing credential (initial: IDevID,
renewal: LDevID).
This requirement is addressed by existing enrollment protocols
in different ways, for instance:  <list style="symbols">
      <t>EST <xref target="RFC7030"/>: Utilizes PKCS#10 to
encode the certification request. The Certificate Signing
Request (CSR) may contain a binding to the underlying TLS
by including the tls-unique value in the self-signed CSR
structure. The tls-unique value is one result of the
TLS handshake. As the TLS handshake is performed mutually
authenticated and the pledge utilized its IDevID for it,
the proof of identity can be provided by the binding to
the TLS session. This is supported in EST using the
simpleenroll endpoint. To avoid the binding to the underlying
authentication in the transport layer, EST offers the
support of a wrapping the CSR with an existing certificate
by using Full PKI Request messages.</t>
      <t>SCEP <xref target="RFC8894"/>: Provides the
option to utilize either an existing secret (password) or
an existing certificate to protect the CSR based on
SCEP Secure Message Objects using CMS wrapping
(<xref target="RFC5652"/>). Note that the wrapping using
an existing IDevID credential in SCEP is referred to as
renewal. SCEP therefore does not rely on the security of
an underlying transport.</t>
      <t>CMP <xref target="RFC4210"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the PKIMessage containing
the certification request. The certification request is
encoded utilizing CRMF. PKCS#10 is optionally supported.
The proof of identity of the PKIMessage containing the
certification request can be achieved by using IDevID
credentials to a PKIProtection carrying the actual signature
value. CMP therefore does not rely on the security of an
underlying transport protocol.</t>
      <t>CMC <xref target="RFC5272"/> Provides the option to
utilize either an existing secret (password) or an
existing certificate to protect the certification request
(either in CRMF or PKCS#10) based on CMS <xref target="RFC5652"/>).
Here a FullCMCRequest can
be used, which allows signing with an existing IDevID
credential to provide a proof of identity. CMC therefore
does not rely on the security of an underlying transport.</t>
    </list></t>
</list></t>

<t>Note that besides the already existing enrollment protocols there is
ongoing work in the ACE WG to define an encapsulation of EST messages in
OSCORE to result in a TLS independent way of protecting EST. This
approach <xref target="I-D.selander-ace-coap-est-oscore"/> may be
considered as further variant.</t>

</section>
<section anchor="architecture" title="Architectural Overview and Communication Exchanges">

<t>To support asynchronous enrollment, the base system architecture
defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the two target
use cases.</t>

<t><list style="symbols">
  <t>Use case 1 (Pledge-initiator-mode): the pledge requests
certificates from a PKI operated off-site via the domain
registrar.
The communication model follows the BRSKI model in which
the pledge initiates the communication.</t>
  <t>Use case 2 (Pledge-responder-mode): allows delegated
bootstrapping using a registrar-agent instead a direct
connection from the pledge to the domain registrar.
The communication model between registrar-agent and
pledge assumes that the pledge is acting as server and
responds to requests.</t>
</list></t>

<t>Both use cases are described in the next subsections. They utilize
the existing BRSKI architecture elements as much as possible.
Necessary enhancements to support authenticated self-contained objects
for certificate enrollment are kept on a minimum to ensure reuse of
already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification
request, BRSKI-AE relies on the defined message wrapping mechanisms
of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<section anchor="uc1" title="Use Case 1 (pledge-initiator-mode): Support of off-site PKI service">

<t>One assumption of BRSKI-AE is that the authorization of a
certification request is performed based on an authenticated
self-contained object, binding the certification request to the
authentication using the IDevID. This supports interaction with
off-site or off-line PKI (RA/CA) components.
In addition, the authorization of the certification request may not
be done by the domain registrar but by a PKI residing in the backend
of the domain operator (off-site) as described in <xref target="sup-env"/>.
Also, the certification request may be
piggybacked by another protocol. This leads to changes in the
placement or enhancements of the logical elements as shown in <xref target="uc1figure"/>.</t>

<figure title="Architecture overview using off-site PKI components" anchor="uc1figure"><artwork align="left"><![CDATA[
                                           +------------------------+
   +--------------Drop Ship--------------->| Vendor Service         |
   |                                       +------------------------+
   |                                       | M anufacturer|         |
   |                                       | A uthorized  |Ownership|
   |                                       | S igning     |Tracker  |
   |                                       | A uthority   |         |
   |                                       +--------------+---------+
   |                                                      ^
   |                                                      |
   V                                                      |
+--------+     .........................................  |
|        |     .                                       .  | BRSKI-
|        |     .  +------------+       +------------+  .  | MASA
| Pledge |     .  |   Join     |       | Domain     <-----+
|        |     .  |   Proxy    |       | Registrar/ |  .
|        <-------->............<-------> Enrollment |  .
|        |     .  |        BRSKI-AE    | Proxy      |  .
| IDevID |     .  |            |       +------^-----+  .
|        |     .  +------------+              |        .
|        |     .                              |        .
+--------+     ...............................|.........
                "on-site domain" components   |
                                              |e.g., RFC 7030,
                                              |      RFC 4210, ...
 .............................................|.....................
 . +---------------------------+     +--------v------------------+ .
 . | Public Key Infrastructure |<----+ PKI RA                    | .
 . | PKI CA                    |---->+                           | .
 . +---------------------------+     +---------------------------+ .
 ...................................................................
         "off-site domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc1figure"/> utilizes
the same logical elements as BRSKI but with a different placement in
the deployment architecture for some of the elements.
The main difference is the placement of the PKI RA/CA component, which
is performing the authorization decision for the certification request
message. It is placed in the off-site domain of the operator (not
the deployment site directly), which may have no or only temporary
connectivity to the deployment or on-site domain of the pledge.
This is to underline the authorization decision for the certification
request in the backend rather than on-site.
The following list describes the components in the target domain:</t>

<t><list style="symbols">
  <t>Join Proxy: same functionality as described in BRSKI.</t>
  <t>Domain Registrar / Enrollment Proxy: In general the domain
registrar proxy has a similar functionality regarding the
imprinting of the pledge in the deployment domain to facilitate
the communication of the pledge with the MASA and the PKI.
Different is the authorization of the certification
request. BRSKI-AE allows to perform this in the operator’s
backend (off-site), and not directly at the domain registrar.  <list style="symbols">
      <t>Voucher exchange: The voucher exchange with the MASA  via
the domain registrar is performed as described in BRSKI <xref target="RFC8995"/>.</t>
      <t>Certificate enrollment: For the pledge enrollment the
domain registrar in the deployment domain supports the
adoption of the pledge in the domain based on the voucher
request. Nevertheless, it may not have sufficient
information for authorizing the certification request.
If the authorization of the certification request is done
in the off-site domain, the domain registrar forwards the
certification request to the RA to perform the authorization.
Note that this requires, that the certification request object
is enhanced with a proof-of-identity to allow the authorization
based on the bound identity information of the pledge. As
stated above, this can be done by an additional signature
using the IDevID.
The domain registrar here acts as an enrollment proxy or
local registration authority. It is also able to handle the
case having no connection temporarily to an off-site PKI,
by storing the authenticated certification request and
forwarding it to the RA upon reestablished connectivity.
As authenticated self-contained objects are used, it
requires an enhancement of the domain registrar. This is
done by supporting alternative enrollment approaches
(protocol options, protocols, encoding) by enhancing the
addressing scheme to communicate with the domain registrar
(see <xref target="addressing"/>).</t>
    </list></t>
</list></t>

<t>The following list describes the vendor related components/service
outside the deployment domain:</t>

<t><list style="symbols">
  <t>MASA: general functionality as described in <xref target="RFC8995"/>.
Assumption is that the interaction with the MASA may be
synchronous (voucher request with nonce) or asynchronous
(voucher request without nonce).</t>
  <t>Ownership tracker: as defined in <xref target="RFC8995"/>.</t>
</list></t>

<t>The following list describes the operator related components/service
operated in the backend:</t>

<t><list style="symbols">
  <t>PKI RA: Performs certificate management functions (validation
of certification requests, interaction with inventory/asset
management for authorization of certification requests, etc.)
for issuing, updating, and revoking certificates for a domain
as a centralized infrastructure for the domain operator.
The inventory (asset) management may be a separate component
or integrated into the RA directly.</t>
  <t>PKI CA: Performs certificate generation by signing the
certificate structure provided in the certification request.</t>
</list></t>

<t>Based on BRSKI and the architectural changes the original protocol
flow is divided into three phases showing commonalities and
differences to the original approach as depicted in the following.</t>

<t><list style="symbols">
  <t>Discovery phase (same as BRSKI)</t>
  <t>Voucher exchange with deployment domain registrar
(same as BRSKI).</t>
  <t>Enrollment phase (changed to support the application of
authenticated self-contained objects).</t>
</list></t>

<section anchor="behavior-of-a-pledge" title="Behavior of a pledge">

<t>The behavior of a pledge as described in <xref target="RFC8995"/> is kept with one exception.
After finishing the imprinting phase (4)
the enrollment phase (5) is performed with a method supporting
authenticated self-contained objects. Using EST with simple-enroll
cannot be applied here, as it binds the pledge authentication with
the existing IDevID to the transport channel (TLS) rather than to
the certification request object directly. This authentication in
the transport layer is not visible / verifiable at the authorization
point in the off-site domain. <xref target="exist_prot"/> discusses
potential enrollment protocols and options applicable.</t>

</section>
<section anchor="discovery" title="Pledge - Registrar discovery and voucher exchange">

<t>The discovery phase is applied as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="vexchange" title="Registrar - MASA voucher exchange">

<t>The voucher exchange is performed as specified in <xref target="RFC8995"/>.</t>

</section>
<section anchor="enroll" title="Pledge - Registrar - RA/CA certificate enrollment">

<t>As stated in <xref target="req-sol"/> the enrollment shall be
performed using an authenticated self-contained object providing
proof of possession and proof of identity.</t>

<figure title="Certificate enrollment" anchor="enrollfigure"><artwork align="left"><![CDATA[
+--------+         +---------+    +------------+     +------------+
| Pledge |         | Circuit |    | Domain     |     | Operator   |
|        |         | Join    |    | Registrar  |     | RA/CA      |
|        |         | Proxy   |    |  (JRC)     |     | (OPKI)     |
+--------+         +---------+    +------------+     +------------+
  /-->                                      |                    |
[Request of CA Certificates]                |                    |
  |---------- CA Certs Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |-Request CA Certs ->|
  |                                         |<- CA Certs Response|
  |<-------- CA Certs Response--------------|                    |
  /-->                                      |                    |
[Request of Certificate Attributes to be included]               |
  |---------- Attribute Request ----------->|                    |
  |              [if connection to operator domain is available] |
  |                                         |Attribute Request ->|
  |                                         |<-Attribute Response|
  |<--------- Attribute Response -----------|                    |
  /-->                                      |                    |
[Certification request]                     |                    |
  |-------------- Cert Request ------------>|                    |
  |              [if connection to operator domain is available] |
  |                                         |--- Cert Request -->|
  |                                         |                    |
[Optional Certificate waiting indication]   |                    |
  /-->                                      |                    |
  |<----- Cert Response (with Waiting) -----|                    |
  |-- Cert Polling (with orig request ID) ->|                    |
  |                                         |                    |
  /-->                                      |                    |
  |                                         |<-- Cert Response --|
  |                                         |                    |
  |<-- Cert Response (with Certificate) ----|                    |
  /-->                                      |                    |
[Certificate confirmation]                  |                    |
  |-------------- Cert Confirm ------------>|                    |
  |                                         /-->                 |
  |                                         |[optional]          |
  |                                         |--- Cert Confirm -->|
  |                                         |<-- PKI Confirm ----|
  |<------------- PKI/Registrar Confirm ----|                    |
]]></artwork></figure>

<t>The following list provides an abstract description of the flow
depicted in <xref target="enrollfigure"/>.</t>

<t><list style="symbols">
  <t>CA Cert Request: The pledge SHOULD request the full distribution
of CA Certificates. This ensures that the pledge has the
complete set of current CA certificates beyond the
pinned-domain-cert (which may be the domain registrar certificate
contained in the voucher).</t>
  <t>CA Cert Response: Contains at least one CA certificate of
the issuing CA.</t>
  <t>Attribute Request: Typically, the automated bootstrapping occurs
without local administrative configuration of the pledge.
Nevertheless, there are cases, in which the pledge may also
include additional attributes specific to the deployment domain
into the certification request. To get these attributes in
advance, the attribute request SHOULD be used.</t>
  <t>Attribute Response: Contains the attributes to be included
in the certification request message.</t>
  <t>Cert Request: Depending on the utilized enrollment protocol,
this certification request contains the authenticated
self-contained object ensuring both, proof-of-possession of the
corresponding private key and proof-of-identity of the
requester.</t>
  <t>Cert Response: certification response message containing the
requested certificate and potentially further information like
certificates of intermediary CAs on the certification path.</t>
  <t>Cert Waiting: waiting indication for the pledge to retry
after a given time. For this a request identifier is necessary.
This request identifier may be either part of the enrollment
protocol or build based on the certification request.</t>
  <t>Cert Polling: querying the registrar, if the certificate request
was already processed; can be answered either with another
Cert Waiting, or a Cert Response.</t>
  <t>Cert Confirm: confirmation message from pledge after receiving
and verifying the certificate.</t>
  <t>PKI/Registrar Confirm: confirmation message from PKI/registrar
about reception of the pledge’s certificate confirmation.</t>
</list></t>

<t>The generic messages described above can implemented using various
protocols implementing authenticated self-contained objects,
as described in <xref target="req-sol"/>. Examples are available
in <xref target="exist_prot"/>.</t>

</section>
<section anchor="addressing" title="Addressing Scheme Enhancements">

<t>BRSKI-AE provides enhancements to the addressing scheme defined in <xref target="RFC8995"/> to
accommodate the additional handling of authenticated self-contained
objects for the certification request. As this is supported by
different enrollment protocols, they can be directly employed
(see also <xref target="exist_prot"/>).</t>

<t>The addressing scheme in BRSKI for client certificate request and
CA certificate distribution function during the enrollment uses
the definition from EST <xref target="RFC7030"/>, here on the
example on simple enroll: “/.well-known/est/simpleenroll”
This approach is generalized to the following notation:
“/.well-known/enrollment-protocol/request”
in which enrollment-protocol may be an already existing protocol or
a newly defined approach. Note that enrollment is considered here
as a sequence of at least a certification request and a certification
response. In case of existing enrollment protocols the following
notation is used proving compatibility to BRSKI:</t>

<t><list style="symbols">
  <t>enrollment-protocol: references either EST <xref target="RFC7030"/> as in BRSKI or
CMP, CMC, SCEP, or newly defined approaches as alternatives.
Note: additional endpoints (well-known URI) at the registrar
may need to be defined by the utilized enrollment protocol.</t>
  <t>request: depending on the utilized enrollment protocol,
the request describes the required operation at the
registrar side. Enrollment protocols are expected to
define the request endpoints as done by existing protocols
(see also <xref target="exist_prot"/>).</t>
</list></t>

</section>
</section>
<section anchor="uc2" title="Use Case 2 (pledge-responder-mode): Registrar-agent communication with Pledges">

<t>To support mutual trust establishment of pledges, not directly
connected to the domain registrar. It relies on the exchange of
authenticated self-contained objects (the voucher request/response
objects as known from BRSKI and the enrollment request/response
objects as introduced by BRSKI-AE). This approach has also been applied
also for the use case 1.
This allows independence of a potential protection provided by the
used transport protocol.</t>

<t>In contrast to BRSKI, the object exchanges performed with the help of
a registrar-agent component, supporting the interaction of
the pledge with the domain registrar. It may be an integrated
functionality of a commissioning tool. This leads to enhancements
of the logical elements in the BRSKI architecture as shown in <xref target="uc2figure"/>.
The registrar-agent interacts with the pledge to acquire and to supply
the required data objects for bootstrapping, which are also exchanged
between the registrar-agent and the domain registrar.
Moreover, the addition of the registrar-agent
also influences the sequences for the data exchange between the pledge
and the domain registrar described in <xref target="RFC8995"/>.
The general goal for the registrar-agent application is the reuse of
already defined endpoints of the domain registrar side. The
functionality of the already existing registrar endpoints may need
small enhancements.</t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                                          +------------------------+
   +--------------Drop Ship---------------| Vendor Service         |
   |                                      +------------------------+
   |                                      | M anufacturer|         |
   |                                      | A uthorized  |Ownership|
   |                                      | S igning     |Tracker  |
   |                                      | A uthority   |         |
   |                                      +--------------+---------+
   |                                                     ^
   |                                                     |  BRSKI-
   V                                                     |   MASA
+-------+     +---------+   .............................|.........
|       |     |         |   .                            |        .
|       |     |         |   .  +-----------+       +-----v-----+  .
|       |     |Registrar|   .  |           |       |           |  .
|Pledge |     |Agent    |   .  |   Join    |       | Domain    |  .
|       |     |         |   .  |   Proxy   |       | Registrar |  .
|       <----->.........<------>...........<-------> (PKI RA)  |  .
|       |     |         |   .  |       BRSKI-AE    |           |  .
|       |     |         |   .  |           |       +-----+-----+  .
|IDevID |     | LDevID  |   .  +-----------+             |        .
|       |     |         |   .         +------------------+-----+  .
+-------+     +---------+   .         | Key Infrastructure     |  .
                            .         | (e.g., PKI Certificate |  .
                            .         |       Authority)       |  .
                            .         +------------------------+  .
                            .......................................
                                      "Domain" components
]]></artwork></figure>

<t>The architecture overview in <xref target="uc2figure"/> utilizes
the same logical components as BRSKI with the registrar-agent
component in addition.</t>

<t>For authentication towards the domain registrar, the registrar-agent
uses its LDevID. The provisioning of the registrar-agent LDevID may
be done by a separate BRSKI run or other means in advance. It is
recommended to use short lived registrar-agent LDevIDs in the range
of days or weeks.</t>

<t>If a registrar detects a request originates from a registrar-agent
it is able to switch the operational mode from BRSKI to BRSKI-AE.</t>

<t>In addition, the domain registrar may authenticate the user operating
the registrar-agent to perform additional authorization of a pledge
enrollment action. Examples for such user level authentication are
the application of HTTP authentication or the usage of authorization
tokens or other. This is out of scope of this document.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data
objects for bootstrapping to the registrar-agent.
The transport protocol used between the pledge and the
registrar-agent is assumed to be HTTP in the context of this
document. Other transport protocols may be used but are out of
scope of this document.
As the pledge is acting as a server during bootstrapping it
leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the domain registrar by the pledge is not needed
as the pledge will be triggered by the registrar-agent.</t>
      <t>Discovery of the pledge by the registrar-agent must be
possible.</t>
      <t>As the registrar-agent must be able to request data objects
for bootstrapping of the pledge, the pledge must offer
corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge,
in the context of the triggering request.</t>
      <t>Order of exchanges in the call flow may be different as
the registrar-agent collects both objects, pledge-voucher-request
objects and pledge-enrollment-request objects, at once and provides
them to the registrar. This approach may also be used to
perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between
the pledge and the registrar are self-contained authenticated
objects (signature-wrapped objects) as in use case 1 <xref target="uc1"/>.</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange
data objects between the pledge and the domain registrar.
The registrar-agent facilitates situations, in which the domain
registrar is not directly reachable by the pledge, either due
to a different technology stack or due to missing connectivity.
The registrar-agent triggers
the pledge to create bootstrapping information such as voucher
request objects and enrollment request objects from one or
multiple pledges at once and performs a bulk bootstrapping based
on the collected data.
The registrar-agent is expected to possess information of the
domain registrar, either by configuration or by using the
discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the
registrar-agent as only authenticated self-contained objects
are applied, which are transported via the registrar-agent and
provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar
bases on an own LDevID of the registrar-agent, acting as registrar
component. This allows the registrar-agent to authenticate towards
the registrar. The registrar can utilize this authentication to
distinguish communication with a pledge from a registrar-agent
based on the exchanged objects.</t>
  <t>Join Proxy: same functionality as described in <xref target="RFC8995"/>. Note
that it may be used by the registrar-agent instead of the pledge
to find the registrar, if not configured.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the
same functionality regarding the bootstrapping of the pledge in
a (customer) site domain by facilitating the communication of the
pledge with the MASA service and the domain PKI service. In
contrast to <xref target="RFC8995"/>, the
domain registrar does not interact with a pledge directly but
through the registrar-agent. The registrar detects if
the bootstrapping is performed by the pledge directly or by the
registrar-agent.
The manufacturer provided components/services (MASA and Ownership
tracker) are used as defined in <xref target="RFC8995"/>. For issuing
a voucher, the MASA may perform additional checks on voucher-request
objects, to issue a voucher indicating agent-proximity instead of
registrar-proximity.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: The voucher defined in <xref target="RFC8366"/> defines
the leaf assertion as enum, which cannot be extended. To define an
additional assertion RFC 8366 may be revised. */</t>

<!--
[ YANG-doctor review note this section to be removed before publishing as RFC (or resolution of issue).
We do have a YANG process issue with this document. We need to inroduce a new value for the agent-proximity,
but it is an enum, and these seem to be intrinsically non-extensible even though the transport encodings would give us what we need, so it seems o be a yang process, but not encoding issue:
If we would amend the assertion with the new agent-proximity enum value, binary transport would indicate this as a new numerical value, and string transports would indicate this as the new string value "agent-proximity". In both cases, pre-exising voucher implementation would recognize an unrecognized values and would fail on the voucher, which is exactly what we want. Aka: if it was not for the fact that enum are not meant to be extensible, it seems there would be no issue ?
We are looking for YANG doctor guidance/recommendations for this issue, boh for how to deal with this extension, but also (ideally) with the best option how to minimize he overhead when the next assertion extension comes along. Ideally, the solution would allow us to automatically get a string value encoding for string transports and a numerical encoding vor binary transports. And new values would just require additions to a TBD IANA registry we would define into an appropriate draft.
This issue tracked at: #18
Please discuss on anima@ietf.org so the discussion reaches the whole community.
]
-->

<t>“Agent-proximity” is a weaker assertion then “proximity”.
In case of “agent-proximity” it is a statement, that the
proximity-registrar-certificate was provided via the registrar-agent
and not directly. This can be verified by the registrar and also by the
MASA through voucher-request processing. Note that at the time of
creating the voucher-request, the pledge cannot verify the
LDevID(Reg) EE certificate and has no proof-of-possession of the
corresponding private key for the certificate. Trust handover to the
domain is established via the “pinned-domain-certificate” in the
voucher.</t>

<t>In contrast, “proximity” provides a statement, that the pledge was in
direct contact with the registrar and was able to verify
proof-of-possession of the private key in the context of the TLS
handshake. The provisionally accepted LDevID(Reg) EE certificate can
be verified after the voucher has been processed by the pledge.</t>

<section anchor="pledge_ep" title="Behavior of a pledge in pledge-responder-mode">

<t>In contrast to use case 1 <xref target="uc1"/> the pledge acts as
a server component if data is triggered by the registrar-agent for
the generation of pledge-voucher-request and pledge-enrollment-request
objects as well as for the processing of the response objects and the
generation of status information.
Due to the use of the registrar-agent, the interaction with
the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides
endpoints using the BRSKI interface based on the
“/.well-known/brski” URI tree.
The following endpoints are defined for the pledge in this document:</t>

<t><list style="symbols">
  <t>/.well-known/brski/pledge-voucher-request: trigger pledge to
create voucher request. It returns the pledge-voucher-request.</t>
  <t>/.well-known/brski/pledge-enrollment-request: trigger pledge to
create enrollment request. it returns the pledge-enrollment-request.</t>
  <t>/.well-known/brski/pledge-voucher: supply MASA provided
voucher to pledge. It returns the pledge-voucher-status.</t>
  <t>/.well-known/brski/pledge-enrollment: supply enroll
response (certificate) to pledge. It returns the
pledge-enrollment-status.</t>
  <t>/.well-known/brski/pledge-CACerts: supply CACerts to
pledge (optional).</t>
</list></t>

</section>
<section anchor="behavior-of-a-registrar-agent" title="Behavior of a registrar-agent">

<t>The registrar-agent is a new component in the BRSKI context. It
provides connectivity between the pledge and the domain registrar
and reuses the endpoints of the domain registrar side already
specified in <xref target="RFC8995"/>.
It facilitates the exchange of data objects between the pledge and
the domain registrar, which are the voucher request/response objects,
the enrollment request/response objects, as well as related status
objects.
For the communication the registrar-agent utilizes communication
endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also
be done using other transport mechanisms. This new component changes
the general interaction between the pledge and the domain registrar
as shown in <xref target="exchangesfig_uc2_2"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt)
to authenticate towards the domain registrar. The registrar-agent
will use this LDevID(RegAgt) when establishing the TLS session
with the domain registrar in the context of for TLS client-side
authentication. The LDevID(RegAgt) certificate MUST include a
SubjectKeyIdentifier (SKID), which is used as reference in the
context of an agent-signed-data object. Note that this is an additional
requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In the specific application of BRSKI-AE, it is used in favor of a
certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client-side authentication is a deviation
from <xref target="RFC8995"/>,
in which the pledge’s IDevID credential is used to perform
TLS client authentication. The use of the LDevID(RegAgt) allows the
domain registrar to distinguish, if bootstrapping is initiated from a
pledge or from a registrar-agent and adopt the internal handling
accordingly.
As BRSKI-AE uses authenticated self-contained data objects between
the pledge and the domain registrar, the binding of the pledge
identity to the request object is provided by the data object
signature employing the pledge’s IDevID. The objects exchanged between
the pledge and the domain registrar used in the context of this
specifications are JOSE objects</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided
with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the
registrar-agent using mDNS. The list may be provided by administrative
means or the registrar agent may get the information via an interaction
with the pledge, like scanning of product-serial-number information
using a QR code or similar.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain
registrar performs the pledge authorization for bootstrapping within
his domain based on the pledge voucher-request object.</t>

<t>The following information is therefore available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s)
to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg" title="Registrar discovery by the registrar-agent">

<t>The discovery of the domain registrar may be done as specified in
<xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain
registrar. Alternatively, the registrar-agent may be configured
with the address of the domain registrar and the certificate
of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa" title="Pledge discovery by the registrar-agent">

<t>The discovery of the pledge by registrar-agent should be done
by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS
<xref target="RFC6762"/> to discover the
pledge at “product-serial-number.brski-pledge._tcp.local.”
The pledge constructs a local host name based on device local
information (product-serial-number), which results in
“product-serial-number.brski-pledge._tcp.local.”. It can then be
discovered by the registrar-agent via mDNS. Note that other
mechanisms for discovery may be used.</t>

<t>The registrar-agent is able to build the same information based
on the provided list of product-serial-number.</t>

</section>
</section>
<section anchor="exchanges_uc2" title="Bootstrapping objects and corresponding exchanges">

<t>The interaction of the pledge with the registrar-agent may be
accomplished using different transport means (protocols and or
network technologies). For this document the usage of HTTP is
targeted as in BRSKI. Alternatives may be CoAP, Bluetooth Low
Energy (BLE), or Nearfield Communication (NFC). This requires
independence of the exchanged data objects between the pledge and
the registrar from transport security. Therefore, authenticated
self-contained objects (here: signature-wrapped objects) are applied
in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate
(LDevID(Reg) EE certificate) to the pledge to be included into
the “agent-provided-proximity-registrar-certificate” leaf in the
pledge-voucher-request object. This enables the registrar to verify,
that it is the target registrar for handling the request. The registrar
certificate may be configured at the registrar-agent or may be
fetched by the registrar-agent based on a prior TLS connection
establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing
the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was
in contact with the pledge.
Optionally the registrar-agent may provide its LDevID(RegAgt)
certificate to the pledge for inclusion into the pledge-voucher-request
as “agent-sign-cert” leaf.
Note that this may be omitted in constraint environments to safe
bandwidth between the registrar-agent and the pledge.
If not contained, the registrar-agent MUST fetch the LDevID(RegAgt)
certificate based on the SubjectKeyIdentifier (SKID) in the header
of the agent-signed-data. The registrar may include the LDevID(RegAgt)
certificate information into the registrar-voucher-request.</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included
in the pledge-voucher-request (prior-signed-voucher-request) in the
“agent-provided-proximity-registrar-certificate” leaf and may assert
in the voucher “verified” or “logged”
instead of “proximity”, as there is no direct connection between the
pledge and the registrar.
If the LDevID(RegAgt) certificate is included contained in the “agent-sign-cert”
leave of the registrar-voucher-request, the MASA can verify the
LDevID(RegAgt) certificate and the signature of the registrar-agent
in the agent-signed-data provided in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert
“agent-proximity” in the voucher. Otherwise, it may assert “verified”
or “logged”. The voucher can then be supplied via the registrar
to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of
the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
[discovery of pledge]
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
[trigger pledge-voucher-request and
 pledge-enrollment-request generation]
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide pledge-voucher-request to infrastructure]
     |              |<------ TLS ----->|              |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
[provide pledge enrollment request to infrastructure]
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     ~              ~                  ~              ~            ~
[provide voucher and certificate
 to pledge and collect status info]
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
[provide voucher-status and enrollment status to registrar]
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different
components into:</t>

<t><list style="symbols">
  <t>Request objects acquisition targets exchanges and objects between
the registrar-agent and the pledge.</t>
  <t>Request handling targets exchanges and objects between
the registrar-agent and the registrar and also the interaction
of the registrar with the MASA and the domain CA.</t>
  <t>Response object supply targets the exchanges and objects between
the registrar-agent and the pledge including the status
objects.</t>
  <t>Status handling addresses the exchanges between the
registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1" title="Request objects acquisition (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent already
discovered the pledge. This may be done as described in
<xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using
endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses IDevID CA certificate and an own
LDevID(RegAgt) EE credential for the registrar domain. In addition,
the registrar-agent can be configured with the
product-serial-number(s) of the pledge(s) to be bootstrapped.
Note that the product-serial-number may have been used during
the pledge discovery already.</t>
  <t>Registrar: possesses IDevID CA certificate and an own
LDevID/Reg) credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of pledge
vendor / manufacturer and site-specific LDevID CA certificate.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store
    |                                        | pledge-voucher-request
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store
    |                                        | pledge-enrollment-req.
]]></artwork></figure>

<t>Triggering the pledge to create the pledge-voucher-request is done using
HTTPS POST on the defined pledge endpoint
“/.well-known/brski/pledge-voucher-request”.</t>

<t>The registrar-agent pledge-voucher-request Content-Type header is:</t>

<t>application/json: defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg)
TLS EE certificate.</t>
  <t>agent-sign-cert: base64-encoded LDevID(RegAgt) signing
certificate (optional).</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
</list></t>

<t>Note that optionally including the agent-sign-cert enables the pledge
to verify at least the signature of the agent-signed-data. It may
not verify the agent-sign-cert itself due to missing issuing CA
information.</t>

<t>The agent-signed-data is a JOSE object and contains the following
information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: contains the base64-encoded SubjectKeyIdentifier of the
LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an
ietf-voucher-request:agent-signed-data element
(defined in <xref target="yang-module"/>):</t>

<t><list style="symbols">
  <t>created-on: MUST contain the creation date and time
in yang:date-and-time format.</t>
  <t>serial-number: MUST contain the product-serial-number
as type string as defined in <xref target="RFC8995"/>,
section 2.3.1. The serial-number corresponds with the
product-serial-number contained in the X520SerialNumber field
of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Example of agent-signed-data" anchor="asd"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "kid": "base64encodedvalue=="
}
{
  "ietf-voucher-request-trigger:agent-signed-data": {
    "created-on": "2021-04-16T00:00:01.000Z",
    "serial-number": "callee4711"
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge SHOULD
construct the body of the pledge-voucher-request object as defined in
<xref target="RFC8995"/>. This object
becomes a JSON-in-JWS object as defined in <xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>The header of the pledge-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format.</t>
  <t>nonce: contains a cryptographically strong random or
pseudo-random number.</t>
  <t>serial-number: contains the base64-encoded pledge
product-serial-number.</t>
  <t>assertion: contains the requested voucher assertion.</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST be included and
contains the base64-encoded LDevID(Reg) EE certificate
(provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: MUST contain the base64-encoded
agent-signed-data (as defined in <xref target="asd"/>)
and provided as trigger parameter.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
EE certificate if provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request
with these new leafs are defined in <xref target="yang-module"/>.</t>

<t>The object is signed using the pledges IDevID credential contained
as x5c parameter of the JOSE header.</t>

<figure title="Example of pledge-voucher-request" anchor="pvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The pledge-voucher-request Content-Type is defined in
<xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json</t>

<t>The pledge SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher response. The media type
“application/voucher-jose+json” is defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Once the registrar-agent has received the pledge-voucher-request
it can trigger the pledge to generate an enrollment-request object.
As in BRSKI the enrollment request object is a PKCS#10,
additionally signed by the IDevID.
Note, as the initial enrollment aims to request a general certificate,
no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using
HTTPS GET on the defined pledge endpoint
“/.well-known/brski/pledge-enrollment-request”.</t>

<t>The registrar-agent pledge-enrollment-request Content-Type header
is:</t>

<t>application/json:</t>

<t>with an empty body.</t>

<t>Upon receiving the enrollment-trigger, the pledge SHALL construct
the pledge-enrollment-request as authenticated self-contained object.
The CSR already assures proof of possession of the private key
corresponding to the contained public key. In addition, based on the
additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes
the YANG module for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Reuse of the sub-tree ietf-sztp-csr:csr may not be
possible as it is not the complete module. */</t>

<t>Depending on the capability of the pledge, it MAY construct the
enrollment request as plain PKCS#10.
Note that the focus here is placed on PKCS#10 as PKCS#10 can be
transmitted in different enrollment protocols like EST, CMP, CMS,
and SCEP. If the pledge is already implementing an enrollment
protocol, it may leverage that functionality for the creation of
the enrollment request object. Note also that
<xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion
of certificate request objects from CMP or CMC.</t>

<t>The pledge SHOULD construct the pledge-enrollment-request as PKCS#10
object and sign it additionally with its IDevID credential. The
pledge-enrollment-request should be encoded as JOSE object.</t>

<t>[RFC Editor: please delete] /*
Open Issues: Depending on target environment, it may be useful to
assume that the pledge may already “know” its functional scope and
therefore the number of certificates needed during operation. As a
result, multiple CSRs may be generated to provide achieve multiple
certificates as a result of the enrollment. This would need further
description and potential enhancements also in the enrollment-request
object to transport different CSRs. */</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but
also CMP and CMC as certificate request format. Note that the wrapping
signature is only necessary for plain PKCS#10 as other request formats
like CMP and CMS support the signature wrapping as part of their own
certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a
wrapped PKCS#10 is:</t>

<t>application/jose:</t>

<t>The header of the pledge enrollment-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request object SHOULD contain a P10
parameter (for PKCS#10) as defined for ietf-sztp-csr:csr in
<xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge’s IDevID credential, which
corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of pledge-enrollment-request" anchor="per"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-sztp-csr:csr": {
    "p10": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>With the collected pledge-voucher-request object and the
pledge-enrollment-request object, the registrar-agent starts the
interaction with the domain registrar.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues: further description necessary at least for */</t>

<t><list style="symbols">
  <t>Values to be taken from the IDevID into the PKCS#10
(like product-serial-number or subjectName, or certificate
template)</t>
</list></t>

<t>Once the registrar-agent has collected the pledge-voucher-request and
pledge-enrollment-request objects, it connects to the registrar
and sends the request objects. As the registrar-agent is intended
to work between the pledge and the domain registrar, a collection
of requests from more than one pledges is possible, allowing a bulk
bootstrapping of multiple pledges using the same connection between
the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2" title="Request handling (registrar-agent - infrastructure)">

<t>The bootstrapping exchange between the registrar-agent and the domain
registrar resembles the exchanges between the pledge and the domain
registrar from BRSKI in the pledge-initiator-mode with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses IDevID CA certificate and own
LDevID(RegAgt) EE credential of registrar domain. It knows the
address of the domain registrar through configuration or
discovery by, e.g., mDNS/DNSSD. The registrar-agent has
acquired pledge-voucher-request and pledge-enrollment-request
objects(s).</t>
  <t>Registrar: possesses IDevID CA certificate of pledge vendors
/ manufacturers and an own LDevID(Reg) EE credential.</t>
  <t>MASA: possesses own credentials (voucher signing key, TLS
server certificate) as well as IDevID CA certificate of
pledge vendor / manufacturer and site-specific LDevID CA
certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[exchange between pledge and ]
[registrar-agent done. ]
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |          [accept device?]       |            |
    |          [contact vendor]       |            |
    |                  |------------ TLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |<---- Voucher ----|<-------- Voucher ---------|
    |                  |              |            |
[certification request handling registrar-agent]
[and site infrastructure]
    |--- Enroll-Req -->|              |            |
    |                  |---- TLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the
registrar. As already stated in <xref target="RFC8995"/>, the use
of TLS 1.3 (or newer) is encouraged.  TLS 1.2 or newer is REQUIRED
on the registrar-agent side.  TLS 1.3 (or newer) SHOULD be available
on the registrar, but TLS 1.2 MAY be used.  TLS 1.3 (or newer) SHOULD be
available on the MASA, but TLS 1.2 MAY be used.</t>

<t>In contrast to <xref target="RFC8995"/> client authentication is achieved by using
the LDevID(RegAgt) of the
registrar-agent instead of the IDevID of the pledge. This allows
the registrar to distinguish between pledge-initiator-mode and
pledge-responder-mode. In pledge-responder-mode the registrar
has no direct connection to the pledge but via the registrar-agent.
The registrar can receive request objects in different forms as
defined in <xref target="RFC8995"/>. Specifically,
the registrar will receive JOSE objects from the pledge for
voucher-request and enrollment-request (instead of the objects for
voucher-request (CMS-signed JSON) and enrollment-request (PKCS#10).</t>

<t>The registrar-agent sends the pledge-voucher-request to the
registrar with an HTTPS POST to the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The pledge-voucher-request Content-Type used in the
pledge-responder-mode is defined in <xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json (see <xref target="pvr"/> for the
content definition).</t>

<t>The registrar-agent SHOULD include the “Accept” header field received
during the communication with the pledge, indicating the pledge
acceptable Content-Type for the voucher-response. The voucher-response
Content-Type “application/voucher-jose+json” is defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Upon reception of the pledge-voucher-request, the registrar SHALL
perform the verification of the voucher-request parameter as defined
in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from
the pledge-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: MUST contain the
own LDevID(Reg) EE certificate to ensure the registrar in
proximity is the target registrar for the request.</t>
  <t>agent-signed-data: The registrar MUST verify that the data
has been signed with the LDevID(RegAgt) credential indicated
in the “kid” JOSE header parameter. If the certificate is
not contained in the agent-sign-cert component of the
pledge-voucher-request, it must fetch the certificate from
a repository.</t>
  <t>agent-sign-cert: May contain the base64-encoded LDevID(RegAgt)
certificate. If contained the registrar MUST verify that the
connected credential used to sign the data was valid at
signature creation time and that the corresponding
registrar-agent was authorized to be involved in the
bootstrapping.</t>
</list></t>

<t>If validation fails the registrar SHOULD respond with the HTTP 404
error code to the registrar-agent. If the pledge-voucher-request is in an
unknown format, then an HTTP 406 error code is more appropriate.</t>

<t>If validation succeeds, the registrar will accept the pledge request
to join the domain as defined in section 5.3 of <xref target="RFC8995"/>. The registrar
then establishes a TLS connection with the MASA as described in section
5.4 of <xref target="RFC8995"/> to
obtain a voucher for the pledge.</t>

<t>The registrar SHALL construct the body of the registrar-voucher-request
object as defined in <xref target="RFC8995"/>.
The encoding SHALL be done as JOSE object as defined in
<xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>The header of the registrar-voucher-request SHALL contain the following
parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate.</t>
</list></t>

<t>The body of the registrar-voucher-request object MUST contain the
following parameter as part of the ietf-voucher-request:voucher as
defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in
yang:date-and-time format for the registrar-voucher-request
creation time.</t>
  <t>nonce: copied form the pledge-voucher-request</t>
  <t>serial-number: contains the base64-encoded product-serial-number.
The registrar MUST verify that the product-serial-number
contained in the IDevID certificate of the pledge matches
the serial-number field in the pledge-voucher-request.
In addition, it MUST be equal to the serial-number field
contained in the agent-signed data of pledge-voucher-request.</t>
  <t>assertion: contains the voucher assertion requested the pledge
(agent-proximity). The registrar provides this
information to assure successful verification of agent
proximity based on the agent-signed-data.</t>
</list></t>

<t>The ietf-voucher-request:voucher can be optionally enhanced with the
following additional parameter:</t>

<t><list style="symbols">
  <t>agent-sign-cert: Contain the base64-encoded LDevID(RegAgt)
EE certificate if MASA verification of agent-proximity is
required to provide the assertion “agent-proximity”.</t>
</list></t>

<t>The object is signed using the registrar LDevID(Reg) credential,
which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Example of registrar-voucher-request" anchor="rvr"><artwork align="left"><![CDATA[
{
   "alg": "ES256",
   "x5c": ["MIIB2jCC...dA=="]
}
{
  "ietf-voucher-request:voucher": {
   "created-on": "2021-04-16T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": "base64encodedvalue=="
  }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The registrar sends the registrar-voucher-request to the
MASA with an HTTPS POST at the endpoint
“/.well-known/brski/requestvoucher”.</t>

<t>The registrar-voucher-request Content-Type is defined in
<xref target="I-D.richardson-anima-jose-voucher"/> as:</t>

<t>application/voucher-jose+json</t>

<t>The registrar SHOULD include an “Accept” header field indicating the
acceptable media type for the voucher-response. The media type
“application/voucher-jose+json” is defined in <xref target="I-D.richardson-anima-jose-voucher"/>.</t>

<t>Once the MASA receives the registrar-voucher-request it SHALL
perform the verification of the contained components as described in
section 5.5 in <xref target="RFC8995"/>.
In addition, the following additional processing SHALL be done for
components contained in the prior-signed-voucher-request:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA MAY verify
that this field contains the LDevID(Reg) certificate. If so,
it MUST be consistent with the certificate used to sign the
registrar-voucher-request.</t>
  <t>agent-signed-data: The MASA MAY verify this field to be able
to provide an assertion “agent-proximity”. If so, the
agent-signed-data MUST contain the product-serial-number of
the pledge contained in the serial-number component of the
prior-signed-voucher and also in serial-number component of
the registrar-voucher-request. The LDevID(RegAgt) used to
generate provide the signature is identified by the “kid”
parameter of the JOSE header (agent-signed-data). If the
assertion “agent-proximity” is requested, the
registrar-voucher-request MUST contain the corresponding
LDevID(RegAgt) EE certificate in the agent-sign-cert, which
can be verified by the MASA as issued by the same domain CA
as the LDevID(Reg) EE certificate. If the agent-sign-cert is
not provided, the MASA MAY provide a lower level assertion
“logged” or “verified”</t>
</list></t>

<t>If validation fails, the MASA SHOULD respond with an HTTP
error code to the registrar. The error codes are kept as defined in
section 5.6 of <xref target="RFC8995"/>. <!-- XXX -->
and comprise the response codes 403, 404, 406, and 415.</t>

<t>The voucher response format is as indicated in the submitted
Accept header fields or based on the MASA’s prior understanding of
proper format for this pledge. Specifically for the
pledge-responder-mode the “application/voucher-jose+json” as defined
in <xref target="I-D.richardson-anima-jose-voucher"/> is applied.
The syntactic details of vouchers are described in detail in
<xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Example of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIBkzCCAT...dA=="]
}
{
  "ietf-voucher:voucher": {
    "assertion": "agent-proximity",
    "serial-number": "callee4711",
    "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
    "created-on": "2021-04-17T00:00:02.000Z",
    "pinned-domain-cert": "MIIBpDCCA...w=="
  }
}
{
    SIGNATURE
}

]]></artwork></figure>

<t>The MASA sends the voucher in the indicated form to the
registrar. After receiving the voucher the registrar may evaluate
the voucher for transparency and logging purposes as outlined in
section 5.6 of <xref target="RFC8995"/>.
The registrar forwards the voucher without changes to the
registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the
pledge’s enrollment-request to the registrar. Deviating from BRSKI
the enrollment-request is not a raw PKCS#10 request. As the
registrar-agent is involved in the exchange, the PKCS#10 is contained
in the JOSE object. The signature is created using the pledge’s
IDevID to provide proof-of-identity as outlined in <xref target="per"/>.</t>

<t>When using EST, the registrar-agent sends the enrollment request
to the registrar with an HTTPS POST at the endpoint
“/.well-known/est/simpleenroll”.</t>

<t>The enrollment-request Content-Type is:</t>

<t>application/jose</t>

<t>If validation of the wrapping signature fails, the registrar SHOULD
respond with the HTTP 404 error code.  If the voucher-request is
in an unknown format, then an HTTP 406 error code is more appropriate.
A situation that could be resolved with administrative action (such
as adding a vendor/manufacturer IDevID CA as trusted party) MAY be
responded with an 403 HTTP error code.</t>

<t>This results in a deviation from the content types used in <xref target="RFC7030"/>
and results in additional processing at
the domain registrar as EST server as following. Note that the
registrar is already aware that the bootstrapping is performed in
a pledge-responder-mode due to the use of the LDevID(RegAgt)
certificate in the TLS establishment and the provided
pledge-voucher-request in JOSE object.</t>

<t><list style="symbols">
  <t>If registrar receives the enrollment-request with the Content
Type application/jose, it MUST verify the signature using the
certificate indicated in the JOSE header.</t>
  <t>The domain registrar verifies that the serial-number contained
in the pledge’s IDevID certificate contained in the JOSE header
as being accepted to join the domain, based on the verification
of the pledge-voucher-request.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request
contained in the JOSE body as “P10” parameter of
“ietf-sztp-csr:csr” for further processing of the enrollment
request with the domain CA.</t>
</list></t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>The domain registrar may either enhance the PKCS#10 request
or generate a structure containing the attributes to be
included by the CA and sends both (the original PKCS#10
request and the enhancements) to the domain CA. As enhancing
the PKCS#10 request destroys the initial proof of possession
of the corresponding private key, the CA would need to
accept RA-verified requests.</t>
</list></t>

<t>A successful interaction with the domain CA will result in the pledge
LDevID EE certificate, which is then forwarded by the registrar to the
registrar-agent using the content type “application/pkcs7-mime”.</t>

<t>The registrar-agent has now finished the exchanges with the
domain registrar. Now the registrar-agent can supply the voucher-response
(from MASA via Registrar) and the enrollment-response (LDevID EE
certificate) to the pledge. It can close the TLS connection to the
domain registrar and provide the objects to the pledge(s). The content
of the response objects is defined through the voucher <xref target="RFC8366"/> and
the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3" title="Response object supply (registrar-agent - pledge)">

<t>The following description assumes that the registrar-agent has
obtained the response objects from the domain registrar. It will
re-start the interaction with the pledge. To contact the pledge,
it may either discover the pledge as described in
<xref target="discovery_uc2_ppa"/> or use stored information
from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar |
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher-status --------->| - store
    |                                   |   pledge voucher-status
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll-status ---------->| - store
    |                                   |   pledge enroll-status
]]></artwork></figure>

<t>The registrar-agent provides the information via two distinct
endpoints to the pledge as following.</t>

<t>The voucher response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-voucher”.</t>

<t>The registrar-agent voucher-response Content-Type header is
“application/voucher-jose+json and contains the voucher as provided
by the MASA. An example if given in <xref target="MASA-vr"/>.</t>

<t>The pledge verifies the voucher as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.7 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using JOSE. The pledge generates the voucher-status-object
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>),
it MAY be omitted in case of success.</t>

<figure title="Example of pledge voucher-status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
{
    "alg": "ES256",
    "x5c": ["MIIB2jCC...dA=="]
{
    "version": 1,
    "status":true,
    "reason":"Informative human readable message",
    "reason-context": { "additional" : "JSON" }
}
{
    SIGNATURE
}
]]></artwork></figure>

<t>The enrollment response is provided with a HTTP POST using the
operation path value of “/.well-known/brski/pledge-enrollment”.</t>

<t>The registrar-agent enroll-response Content-Type header when using
EST <xref target="RFC7030"/> as enrollment protocol, from the
registrar-agent to the infrastructure is:</t>

<t>application/pkcs7-mime: note that it only contains the LDevID
certificate for the pledge, not the certificate chain.</t>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issue: the enrollment response object may also be an
application/jose object with a signature of the domain registrar.
This may be used either to transport additional data which is bound
to the LDevID or it may be considered for enrollment status to
ensure that in an error case the registrar providing the certificate
can be identified. */</t>

<t>After successful verification the pledge MUST reply with a status
telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>. As for the
other objects, the defined object is provided with an additional
signature using the JOSE. The pledge generates the enrollment status
and provides it in the response message to the registrar-agent.</t>

<t>The response has the Content-Type “application/jose”, signed using
the LDevID of the pledge as shown in <xref target="estat"/>.
As the reason field is optional, it MAY be omitted in case of
success.</t>

<figure title="Example of pledge enroll-status telemetry" anchor="estat"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": ["MIIB56uz...dA=="]
{
  "version": 1,
  "status":true,
  "reason":"Informative human readable message",
  "reason-context": { "additional" : "JSON" }
}
{
  SIGNATURE
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can
connect to the registrar agent to provide the status responses to
the registrar.</t>

</section>
<section anchor="exchanges_uc2_4" title="Telemetry status handling (registrar-agent - domain registrar)">

<t>The following description assumes that the registrar-agent has
collected the status objects from the pledge. It will provide the
status objects to the registrar for further processing and audit log
information of voucher-status for MASA.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher-status and enroll-status
objects from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
    |                  |              |            |
    |<------ TLS ----->|              |            |
    |                  |              |            |
    |--Voucher-Status->|              |            |
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll-Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent MUST provide the collected pledge voucher-status
to the registrar. This status indicates the pledge could process the
voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent
establishes a TLS connection with the registrar as stated in
<xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/voucher_status”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge voucher-status
and validate that it belongs to an accepted device in his domain
based on the contained “serial-number” in the IDevID certificate
referenced in the header of the voucher-status object.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server logs the server
SHOULD capture this telemetry information.</t>

<t>The registrar SHOULD proceed with the collecting and logging the
status information by requesting the MASA audit-log from the MASA
service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent MUST provide the enroll-status object to the
registrar. The status indicates the pledge could process the
enroll-response object and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll-status object
without modification to the registrar with an HTTPS POST using the
operation path value of “/.well-known/brski/enrollstatus”. The
Content-Type header is kept as “application/jose” as described in
<xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar SHALL verify the signature of the pledge enroll-status
object and validate that it belongs to an accepted device in his domain
based on the contained product-serial-number in the LDevID EE certificate
referenced in the header of the enroll-status object. Note that
the verification of a signature of the object is a deviation form
the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar SHOULD respond
with an HTTP 200 but MAY
simply fail with an HTTP 404 error.  The registrar-agent may use the
response to signal success / failure to the service technician
operating the registrar agent. Within the server log the registrar
SHOULD capture this telemetry information.</t>

</section>
</section>
</section>
<section anchor="discovery_eo" title="Domain registrar support of different enrollment options">

<t>Well-known URIs for different endpoints on the domain registrar are
already defined as part of the base BRSKI specification. In
addition, alternative enrollment endpoints may be supported at the
domain registrar. The pledge / registrar-agent will recognize if its
supported enrollment option is supported by the domain registrar
by sending a request to its preferred enrollment endpoint.</t>

<t>The following provides an illustrative example for a domain
registrar supporting different options for EST as well as
CMP to be used in BRSKI-AE. The listing contains the supported
endpoints for the bootstrapping, to which the pledge may connect. This
includes the voucher handling as well as the enrollment endpoints.
The CMP related enrollment endpoints are defined as well-known URI
in CMP Updates <xref target="I-D.ietf-lamps-cmp-updates"/>.</t>

<figure><artwork align="left"><![CDATA[
  </brski/voucherrequest>,ct=voucher-cms+json
  </brski/voucher_status>,ct=json
  </brski/enrollstatus>,ct=json
  </est/cacerts>;ct=pkcs7-mime
  </est/simpleenroll>;ct=pkcs7-mime
  </est/simplereenroll>;ct=pkcs7-mime
  </est/fullcmc>;ct=pkcs7-mime
  </est/serverkeygen>;ct= pkcs7-mime
  </est/csrattrs>;ct=pkcs7-mime
  </cmp/initialization>;ct=pkixcmp
  </cmp/certification>;ct=pkixcmp
  </cmp/keyupdate>;ct=pkixcmp
  </cmp/p10>;ct=pkixcmp
  </cmp/getCAcert>;ct=pkixcmp
  </cmp/getCSRparam>;ct=pkixcmp

]]></artwork></figure>

<t>[RFC Editor: please delete] /*</t>

<t>Open Issues:</t>

<t><list style="symbols">
  <t>In addition to the current content types, we may specify that
the response provide information about different content types
as multiple values. This would allow to further adopt the
encoding of the objects exchanges (ASN.1, JSON, CBOR, …).
-&gt; dependent on the utilized protocol.
*/</t>
</list></t>

</section>
</section>
<section anchor="yang-module" title="YANG Extensions to Voucher Request">

<t>The following modules extends the <xref target="RFC8995"/> Voucher
Request to include a signed artifact from the registrar-agent as well
as the registrar-proximity-certificate and the agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
module ietf-async-voucher-request {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-async-voucher-request";
  prefix "constrained";

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix ivr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Hendrik Brockhaus
              <mailto: hendrik.brockhaus@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>";
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>";
  description
   "This module defines an extension of the RFC8995 voucher
    request to permit a registrar-agent to convey the adjacency
    relationship from the registrar-agent to the registrar.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
    'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY',
    and 'OPTIONAL' in the module text are to be interpreted as
    described in RFC 2119.";
  revision "YYYY-MM-DD" {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher Request for Asynchronous Enrollment";
  }
  rc:yang-data voucher-request-async-artifact {
    // YANG data template for a voucher.
    uses voucher-request-async-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-async-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses ivr:voucher-request-grouping {
      augment "voucher-request" {
        description "Base the constrained voucher-request upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf agent-sign-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}
]]></artwork></figure>

</section>
<section anchor="exist_prot" title="Example for signature-wrapping using existing enrollment protocols">

<t>This section map the requirements to support proof of possession and
proof of identity to selected existing enrollment protocols.
Note that that the work in the ACE WG described in
<xref target="I-D.selander-ace-coap-est-oscore"/> may be considered
here as well, as it also addresses the encapsulation of EST in a way to
make it independent from the underlying TLS using OSCORE resulting in
an authenticated self-contained object.</t>

<section anchor="est-handling" title="EST Handling">

<t>When using EST <xref target="RFC7030"/>, the following constraints
should be considered:</t>

<t><list style="symbols">
  <t>Proof of possession is provided by using the specified PKCS#10
structure in the request.</t>
  <t>Proof of identity is achieved by signing the certification
request object, which is only supported when Full PKI Request
(the /fullcmc endpoint) is used. This contains sufficient
information for the RA to make an authorization decision on the
received certification request.
Note: EST references CMC <xref target="RFC5272"/> for the
definition of the Full PKI Request. For proof of identity, the
signature of the SignedData of the Full PKI Request would be
calculated using the IDevID credential of the pledge.</t>
  <t>[RFC Editor: please delete] /* TBD: in this case the binding to
the underlying TLS connection is not be necessary. */</t>
  <t>When the RA is not available, as per <xref target="RFC7030"/> Section 4.2.3, a
202 return code should be returned by the
Registrar. The pledge in this case would retry a simpleenroll
with a PKCS#10 request. Note that if the TLS connection is teared
down for the waiting time, the PKCS#10 request would need to be
rebuilt if it contains the unique identifier (tls_unique) from
the underlying TLS connection for the binding.</t>
  <t>[RFC Editor: please delete] /* TBD: clarification of retry for
fullcmc is necessary as not specified in the context of EST */</t>
</list></t>

</section>
<section anchor="cmp-handling" title="CMP Handling">

<t>Instead of using CMP <xref target="RFC4210"/>, this specification
refers to the lightweight CMP profile
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>, as it
restricts the full featured CMP to the functionality needed here.
For this, the following constrains should be observed:</t>

<t><list style="symbols">
  <t>For proof of possession, the defined approach in Lightweight CMP
Profile section 4.1.1 (based on CRMF) and 4.1.5 (based on PCKS#10)
should be supported.</t>
  <t>Proof of identity can be provided by using the signatures to
protect the certificate request message as outlined in section
3.2. of <xref target="I-D.ietf-lamps-lightweight-cmp-profile"/>.</t>
  <t>When the RA/CA is not available, a waiting indication should be
returned in the PKIStatus by the Registrar. The pledge in this
case would retry using the PollReqContent with a request
identifier certReqId provided in the initial CertRequest message
as specified in section 5.2.4 of
<xref target="I-D.ietf-lamps-lightweight-cmp-profile"/> with delayed enrollment.</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document requires the following IANA actions:</t>

<t>IANA is requested to enhance the Registry entitled: “BRSKI well-
known URIs” with the following:</t>

<figure><artwork align="left"><![CDATA[
 URI                       document  description
 pledge-voucher-request    [THISRFC] create pledge-voucher-request
 pledge-enrollment-request [THISRFC] create pledge-enrollment-request
 pledge-voucher            [THISRFC] supply voucher response
 pledge-enrollment         [THISRFC] supply enrollment response
 pledge-CACerts            [THISRFC] supply CA certs to pledge
]]></artwork></figure>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>The credential used by the registrar-agent to sign the data for the
pledge in case of the pledge-initiator-mode should not
contain personal information. Therefore, it is recommended to use an
LDevID certificate associated with the device instead of a potential
service technician operating the device, to avoid revealing this
information to the MASA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="exhaustion-attack-on-pledge" title="Exhaustion attack on pledge">

<t>Exhaustion attack on pledge based on DoS attack (connection
establishment, etc.)</t>

</section>
<section anchor="misuse-of-acquired-voucher-and-enrollment-responses" title="Misuse of acquired voucher and enrollment responses">

<t>Registrar-agent that uses acquired voucher and enrollment response for
domain 1 in domain 2: can be detected in Voucher Request processing
on domain registrar side. Requires domain registrar to verify the
proximity-registrar-cert leaf in the pledge-voucher-request against
his own as well as the association of the pledge to his domain based
on the product-serial-number contained in the voucher.</t>

<t>Misbinding of pledge by a faked domain registrar is countered as
described in BRSKI security considerations (section 11.4).</t>

<t>Misuse of registrar-agent LDevID may be addressed by utilizing
short-lived certificates to be used for authenticating the
registrar-agent against the registrar. The LDevID certificate for
the registrar-agent may be provided by a prior BRSKI execution based
on an existing IDevID. Alternatively, the LDevID may be acquired  by
a service technician after authentication against the issuing CA.</t>

</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>We would like to thank the various reviewers for their input, in
particular Brian E. Carpenter, Michael Richardson, Giorgio Romanenghi,
Oskar Camenzind, for their input and discussion on use cases and
call flows.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.richardson-anima-jose-voucher'>
   <front>
      <title>JOSE signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <author fullname='Thomas Werner'>
	 <organization>Siemens</organization>
      </author>
      <date day='23' month='June' year='2021'/>
      <abstract>
	 <t>   This document describes a serialiation of the RFC8366 voucher format
   to a JSON format is then signed using the JSON Object Signing and
   Encryption mechanism described in RFC7515.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-anima-jose-voucher-01'/>
   <format target='https://www.ietf.org/archive/id/draft-richardson-anima-jose-voucher-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='29' month='June' year='2021'/>
      <abstract>
	 <t>   This draft extends the &quot;get-bootstrapping-data&quot; RPC defined in RFC
   8572 to include an optional certificate signing request (CSR),
   enabling a bootstrapping device to additionally obtain an identity
   certificate (e.g., an LDevID, from IEEE 802.1AR) as part of the
   &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-04.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC4210' target='https://www.rfc-editor.org/info/rfc4210'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
<author fullname='C. Adams' initials='C.' surname='Adams'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='T. Kause' initials='T.' surname='Kause'><organization/></author>
<author fullname='T. Mononen' initials='T.' surname='Mononen'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4210'/>
<seriesInfo name='DOI' value='10.17487/RFC4210'/>
</reference>



<reference anchor='RFC4211' target='https://www.rfc-editor.org/info/rfc4211'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate Request Message Format (CRMF)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='September' year='2005'/>
<abstract><t>This document describes the Certificate Request Message Format (CRMF) syntax and semantics.  This syntax is used to convey a request for a certificate to a Certification Authority (CA), possibly via a Registration Authority (RA), for the purposes of X.509 certificate production.  The request will typically include a public key and the associated registration information.  This document does not define a certificate request protocol.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4211'/>
<seriesInfo name='DOI' value='10.17487/RFC4211'/>
</reference>



<reference anchor='RFC5272' target='https://www.rfc-editor.org/info/rfc5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC5652' target='https://www.rfc-editor.org/info/rfc5652'>
<front>
<title>Cryptographic Message Syntax (CMS)</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2009'/>
<abstract><t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='70'/>
<seriesInfo name='RFC' value='5652'/>
<seriesInfo name='DOI' value='10.17487/RFC5652'/>
</reference>


<reference anchor='I-D.ietf-lamps-lightweight-cmp-profile'>
   <front>
      <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='22' month='February' year='2021'/>
      <abstract>
	 <t>   The goal of this document is to facilitate interoperability and
   automation by profiling the Certificate Management Protocol (CMP)
   version 2, the related Certificate Request Message Format (CRMF)
   version 2, and the HTTP Transfer for the Certificate Management
   Protocol.  It specifies a subset of CMP and CRMF focusing on typical
   use cases relevant for managing certificates of devices in many
   industrial and IoT scenarios.  To limit the overhead of certificate
   management for more constrained devices only the most crucial types
   of operations are specified as mandatory.  To foster interoperability
   in more complex scenarios, other types of operations are specified as
   recommended or optional.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-lightweight-cmp-profile-05'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-lightweight-cmp-profile-05.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-lamps-cmp-updates'>
   <front>
      <title>Certificate Management Protocol (CMP) Updates</title>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <date day='30' month='June' year='2021'/>
      <abstract>
	 <t>   This document contains a set of updates to the syntax and transport
   of Certificate Management Protocol (CMP) version 2.  This document
   updates RFC 4210 and RFC 6712.

   The aspects of CMP updated in this document are using EnvelopedData
   instead of EncryptedValue, clarifying the handling of p10cr messages,
   improving the crypto agility, as well as adding new general message
   types, extended key usages to identify certificates for use with CMP,
   and &#39;.well-known&#39; HTTP path segments.

   To properly differentiate the support of EnvelopedData instead of
   EncryptedValue, the CMP version 3 is introduced in case a transaction
   is supposed to use EnvelopedData.

   CMP version 3 is introduced to enable signaling support of
   EnvelopedData instead of EncryptedValue and signaling the use of an
   explicit hash AlgorithmIdentifier in certConf messages, as far as
   needed.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-lamps-cmp-updates-11'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-lamps-cmp-updates-11.txt' type='TXT'/>
</reference>



<reference anchor='RFC8894' target='https://www.rfc-editor.org/info/rfc8894'>
<front>
<title>Simple Certificate Enrolment Protocol</title>
<author fullname='P. Gutmann' initials='P.' surname='Gutmann'><organization/></author>
<date month='September' year='2020'/>
<abstract><t>This document specifies the Simple Certificate Enrolment Protocol (SCEP), a PKI protocol that leverages existing technology by using Cryptographic Message Syntax (CMS, formerly known as PKCS #7) and PKCS #10 over HTTP.  SCEP is the evolution of the enrolment protocol sponsored by Cisco Systems, which enjoys wide support in both client and server implementations, as well as being relied upon by numerous other industry standards that work with certificates.</t></abstract>
</front>
<seriesInfo name='RFC' value='8894'/>
<seriesInfo name='DOI' value='10.17487/RFC8894'/>
</reference>


<reference anchor='I-D.selander-ace-coap-est-oscore'>
   <front>
      <title>Protecting EST Payloads with OSCORE</title>
      <author fullname='Goeran Selander'>
	 <organization>Ericsson AB</organization>
      </author>
      <author fullname='Shahid Raza'>
	 <organization>RISE</organization>
      </author>
      <author fullname='Martin Furuhed'>
	 <organization>Nexus</organization>
      </author>
      <author fullname='Malisa Vucinic'>
	 <organization>INRIA</organization>
      </author>
      <author fullname='Timothy Claeys'>
	 </author>
      <date day='5' month='May' year='2021'/>
      <abstract>
	 <t>   This document specifies public-key certificate enrollment procedures
   protected with lightweight application-layer security protocols
   suitable for Internet of Things (IoT) deployments.  The protocols
   leverage payload formats defined in Enrollment over Secure Transport
   (EST) and existing IoT standards including the Constrained
   Application Protocol (CoAP), Concise Binary Object Representation
   (CBOR) and the CBOR Object Signing and Encryption (COSE) format.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-selander-ace-coap-est-oscore-05'/>
   <format target='https://www.ietf.org/archive/id/draft-selander-ace-coap-est-oscore-05.txt' type='TXT'/>
</reference>


<reference anchor="IEC-62351-9" >
  <front>
    <title>IEC 62351 - Power systems management and associated information exchange - Data and communications security - Part 9: Cyber security key management for power system equipment</title>
    <author >
      <organization>International Electrotechnical Commission</organization>
    </author>
    <date year="2017" month="May"/>
  </front>
  <seriesInfo name="IEC" value="62351-9 "/>
</reference>
<reference anchor="NERC-CIP-005-5" >
  <front>
    <title>Cyber Security - Electronic Security Perimeter</title>
    <author >
      <organization>North American Reliability Council</organization>
    </author>
    <date year="2013" month="December"/>
  </front>
  <seriesInfo name="CIP" value="005-5"/>
</reference>
<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="ISO-IEC-15118-2" >
  <front>
    <title>ISO/IEC 15118-2 Road vehicles - Vehicle-to-Grid Communication Interface - Part 2: Network and application protocol requirements</title>
    <author >
      <organization>International Standardization Organization / International Electrotechnical Commission</organization>
    </author>
    <date year="2014" month="April"/>
  </front>
  <seriesInfo name="ISO/IEC" value="15118-2 "/>
</reference>
<reference anchor="OCPP" >
  <front>
    <title>Open Charge Point Protocol 2.0.1 (Draft)</title>
    <author >
      <organization>Open Charge Alliance</organization>
    </author>
    <date year="2019" month="December"/>
  </front>
</reference>


    </references>


<section anchor="app_history" title="History of changes [RFC Editor: please delete]">

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #11).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> do not result in additional
/.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
<xref target="discovery_eo"/> as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in <xref target="exist_prot"/> to use
lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in <xref target="uc1"/> to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-AE call flow.</t>
  <t>Update of provided examples of the addressing approach used in
BRSKI to allow for support of multiple enrollment protocols in
<xref target="addressing"/>.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Definition of the addressing approach used in BRSKI to allow for
support of multiple enrollment protocols in <xref target="addressing"/>.  This
section also contains a first
discussion of an optional discovery mechanism to address
situations in which the registrar supports more than one enrollment
approach. Discovery should avoid that the pledge performs a trial
and error of enrollment protocols.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/> and in <xref target="exist_prot"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="app-examples"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting <xref target="exist_prot"/> with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
H4sIADUO5GAAA+y963YcR5Im+D+eIhr8IUDKTBDgRRJKXVMQCEno4q0BqlTd
Go1OIDMARDEzIzcjEhCKYp95kJ1z5ln2UeZJ1q7u5h4eiQTFqq6dHZ7uEglE
ePjF3K6fmQ2Hw6xpi/nk52Jaz8uDvF2uyqxaLOlvTbv/8OGXD/ezST2eFzP4
9WRZXLTDqmwvhsW8mhXD82XzthoWze18PCzny3o6HT58lI2L9iBv2km2qA6y
PG/r8UH+yW3ZfAL/GNezRTFu/Q+a29myvGjMD+plG/4EJjSv2+qiKifww3lN
T7XLyg/TVu0U5ne2Wizg7by+yGlOV8t6Xq+a/JimNivnbV7N869Pz/54km/T
f4aHxztZcX6+LK8Pcv1JVizL4iB/tSiXRVvV8yaHLcpfFPPissRBspvLg/zw
5cmLw/yHb7NJ0cKn9x/u72XFqr2qlwfZED4D8z8b5d8sq7KB6fL+nbXlxUU5
dz+tlzDQWYWDNvnht/ATnYr8kBdalrDQV21bD78rrubD02p+mT/Fvaza24P8
xWpeja/gn8vyEiYLyyiui2VV0GZP4KuffLH3+aMvefNX83YJ73xbLmfF/BZ+
VM6KaoqnRTMbXeDM/tDw10dwWPDIalkd5Fdtu2gOdndvbm5G5te7utbvRvnX
y3r89qpY+fV+V84ny+pt8Jt/nDVf8exG5zq7D1n38Sh/XhZLt+TjaVW3+iNa
61HVjOv87Ba2eGYXdworaCv4V9E0Zf65W9sPxXRaNeV0Ws7dco6+G37x6OFj
u5yzm6r9a7mcAmnCjxdXdH+3Pnu8lz9+nH/x+Rf5l3B7t/xqpzClP4xxLrQ8
mf6bUf5DuZyXfgFvrupZ0fif/uOcV0szG97QzO51VvMahmqr6xLZ0ek3R08/
f7rv//pI/vr5w0cP9a9P9p7IX7949PSp/vXLL+mnJ8NnI+A+V8Vy0tRzYYV/
qZtyeF2vxlflUh8iTjkv23E9vxg2f20Xw3EDv6zmF9GE9r/8Qj/yeH/vof/r
nvz1yf7n++6vX+gDT54+2Q++NS1mi2Y4rS6v2psS/3c4ni2Gi2V9UU3LxJP4
29UCOVija/ziy8f6IBAhUFe5HBbjcjiui8WwbNphDSS05MGOj4ZP9x892Rt+
if8ETs9s+BP4RU6/yIf56xoODLg8kX8+c0yUeCqQfj2u4POT3G1KPc/LX2Bz
55clDZrDIM+KtqAX4DhnSEvCl5tyDCff3uJ3CmD8X8JVuT3H7+kv3pa39qPw
DRl0YeaVl//XqlrgA5/Qb5WP88fpBpzMW6A7+mwxhVtejttl3ZbjK5zMND+C
eVVNA7+ll1Qm7H0+fPiEftKUyFlxkQcyAdgk2CrZvxw//PL49Gh4dPJ6+PDh
k+GTYEt5VWd+uTID+Lr/6Wv4xqxsy2XfIl6CcLzKD2fw3LiY56fltCrOqym+
ewTXblxNw9k/Gu7t98wepnmQ0zyJEI6Ph1883B/tHZ4G08Zf5PILnmeZPyuv
q3GZn0xgu1Gm9872ZN7AMKu2RHnO66W9Rjrwy0fpflnNy3LZhJP/Yvjwae/W
Hx8jz5GJ4d6fnL0aIj3vPdmDN/cjej57tYs0Lb/MT+tikl+XV9V4WjYw3T/x
X4fA/b5dVhOiBkelTDoXcIccOROt7sN5lO1NvXzLV2GxmOobcGFBaaqnwC6B
MJdEus2GpHmG+hxwpuqvPNar5SUwKPnH7h10LDPMe+n58ZCkUHJTeZNgu3Sb
cMavjl6/DjYTtKp5fgS887IE3lDBnXytq90fPRzt5dvPUMvc6Vutff8QJGUx
l411c/wSqTYbDocgqVC8jtss+/TTN6+evTqADZ3V12U+K3O4aDmwPVAW59Pb
Tz/N84/2TPbmqmpyUJpXxHImZTNeVudAKOX8CmdLp4k0fV7XLU5wsUBpWdCg
QO3Eu8oMORfsL6gHoIuPW7w6rLMO8nfvRBq9f5/vgH6dF9OmzmvSV0F/n8PH
QWQCf7woC3gRR5/D75c0RziIWQn/mVazChkvCKc5UEF1jWzgHCiyBMWjml/X
02v67WwBqgXMeJR9swL2AWwoWAfoykiv19UEnoapwCSQkYO0LkXThvUt6wLE
P0ysnF9XcG3p1QEq4zdwc67oYVDR6abj3xfTcgLny1IAlrGsZ7A/42mF2jeu
F+nvGqYyymmz9UF8t0IKh0NHep+BcjGV1zMedFjNqxZETr0c4m9p9+R7w2XZ
wGJR4uGvYOw6b8SkOK/bq2wFitq4aEqYutoKcGgwKzjOOX1cJReZIEC8yOPG
JN9AmF6AEJ23cDDlJKvP/wKb3uTbTXU5x0MqhzdICfCk/GqHTxU2k9gAkBhR
Cah7E9Qaq/MV/QA+xKedN4tyDAx1DBRHHHZcLpHB4ufh8N7A7CblBX7cnUgO
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
8A4+Emuw0p+ro/1ZthgNQydljBT5lvaujTtnBm2PsxhFmBZFO66SU4nSlsJA
rpQos4nzxG/WsUk8G4pgSnklSnEuF6xxHV5gbgRWJwdepTmk3kCSFT7eyeKw
IP/iyU6oxou2xQh/IwA3KdnajPLvGwFpSAUpQjEO+bOZ74qnFb+vuIUa9RLB
EF3Q8CEKxVF4LQg2+3LwbYBs1CZm22+en+0ElrP0xFynf5rkP24rE8Mos/Bj
BKPUdEdEu6P6tSsdXArJbO5qqL7FXVdVH8Hh0yJ/xisK5y+JnKBkuL5V6Qgv
1QAQALevZakUKX70oTHZfRdrfLVjDb574B4QF9ckuqdV4w4Tw21SBCUhH7mg
n/vwkIV54ovX+nf5YueR2Oy866OJZQ/Vn5WGDLx7wP+AGRz2hc2j66QFSjM/
NYGQzDdhGz49LEulSAUpRA4fplHMyB8ful8/63hjEw7az+IoC/t6j6rleFW1
/LMgwPKr/O8rVWoS0SL+mwZqZAx/Bm4MPgr+R3oMjZXIGPn2v5we7QTz2H4F
8ld+9FH2I893Mbyz0Z9kWO/X7EfFDMKZhU2Cmp82HEJc8vxHB2kcntpO+ff9
Q4Q/+rG6iPKh4/rqtrT5T6kh1u3FUCfnZgtTu98QXwVL5SqsNMRXqa3g34cR
ht69+LiHarjHYSu91zXflVMkykl81PGhuhdTp/qPcqiJSd7/UO0gqUMN90KK
7/59DjWZ+tu5pOuGCA6VSRTG/Me+qd1J3vdQ0wv58ZV2u7A3pNtc6Kf+IT7C
oTrS0kUKRW2TZvoDz2YnX09av+rrr6X2ML+NJo7TGzGLb/ND/ZCFfIy92HwW
X3W2DDbo4ywkMTZvaNBB7+922Sld46IST3Divt/vsh/xYB922df8SS75nify
o6a2mFV+KL/w67y/EBiyo8TsVCQEaDvhmV2vKQZPJ8f1MX5WycMwfzrktDaS
H3nyfLExbA+Msxqrey+IK6EnJbOuDjDkzITIJvlUlRfluwe2S6E0nPL51BiP
BctignuBstE58yKVUsxVBjV3keFUY5/9TVJnQxtGSm2nPDSHsEgi1ezjlxYV
iKHJkMXOEJ+Di+ti6lKcqRPbCDMDOyn6YtntRJvCjOEAj72lziOFFoBB10dk
tbneKNp7/OiQhutoLLDLWoXFYW2xwChiUQPkP3WVRyex+oQ58hI18SHGAWea
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

-->

</rfc>

